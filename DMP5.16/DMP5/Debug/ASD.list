
ASD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a08  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d38  08007b18  08007b18  00017b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008850  08008850  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08008850  08008850  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008850  08008850  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008850  08008850  00018850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008854  08008854  00018854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08008858  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  200000a8  08008900  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08008900  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY
 13 .debug_info   000093d2  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ccc  00000000  00000000  000294e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a28  00000000  00000000  0002b1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d1  00000000  00000000  0002bbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018726  00000000  00000000  0002c3b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dbf5  00000000  00000000  00044ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088836  00000000  00000000  000526cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ef8  00000000  00000000  000daf04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000dddfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a8 	.word	0x200000a8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007b00 	.word	0x08007b00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000ac 	.word	0x200000ac
 800014c:	08007b00 	.word	0x08007b00

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2uiz>:
 8000f84:	0042      	lsls	r2, r0, #1
 8000f86:	d20e      	bcs.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30b      	bcc.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d409      	bmi.n	8000fac <__aeabi_f2uiz+0x28>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2uiz+0x32>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_f2uiz+0x38>
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_GPIO_Init+0x58>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	4a13      	ldr	r2, [pc, #76]	; (800101c <MX_GPIO_Init+0x58>)
 8000fd0:	f043 0320 	orr.w	r3, r3, #32
 8000fd4:	6193      	str	r3, [r2, #24]
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_GPIO_Init+0x58>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	f003 0320 	and.w	r3, r3, #32
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_GPIO_Init+0x58>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	4a0d      	ldr	r2, [pc, #52]	; (800101c <MX_GPIO_Init+0x58>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	6193      	str	r3, [r2, #24]
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <MX_GPIO_Init+0x58>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <MX_GPIO_Init+0x58>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	4a07      	ldr	r2, [pc, #28]	; (800101c <MX_GPIO_Init+0x58>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	6193      	str	r3, [r2, #24]
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <MX_GPIO_Init+0x58>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	40021000 	.word	0x40021000

08001020 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <MX_I2C1_Init+0x50>)
 8001026:	4a13      	ldr	r2, [pc, #76]	; (8001074 <MX_I2C1_Init+0x54>)
 8001028:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_I2C1_Init+0x50>)
 800102c:	4a12      	ldr	r2, [pc, #72]	; (8001078 <MX_I2C1_Init+0x58>)
 800102e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_I2C1_Init+0x50>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_I2C1_Init+0x50>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_I2C1_Init+0x50>)
 800103e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001042:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <MX_I2C1_Init+0x50>)
 8001046:	2200      	movs	r2, #0
 8001048:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_I2C1_Init+0x50>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <MX_I2C1_Init+0x50>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_I2C1_Init+0x50>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800105c:	4804      	ldr	r0, [pc, #16]	; (8001070 <MX_I2C1_Init+0x50>)
 800105e:	f000 fcf3 	bl	8001a48 <HAL_I2C_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001068:	f000 f8bb 	bl	80011e2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200000c4 	.word	0x200000c4
 8001074:	40005400 	.word	0x40005400
 8001078:	000186a0 	.word	0x000186a0

0800107c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a19      	ldr	r2, [pc, #100]	; (80010fc <HAL_I2C_MspInit+0x80>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d12b      	bne.n	80010f4 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <HAL_I2C_MspInit+0x84>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a17      	ldr	r2, [pc, #92]	; (8001100 <HAL_I2C_MspInit+0x84>)
 80010a2:	f043 0308 	orr.w	r3, r3, #8
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_I2C_MspInit+0x84>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010b4:	23c0      	movs	r3, #192	; 0xc0
 80010b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b8:	2312      	movs	r3, #18
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	4619      	mov	r1, r3
 80010c6:	480f      	ldr	r0, [pc, #60]	; (8001104 <HAL_I2C_MspInit+0x88>)
 80010c8:	f000 fb3a 	bl	8001740 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_I2C_MspInit+0x84>)
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <HAL_I2C_MspInit+0x84>)
 80010d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d6:	61d3      	str	r3, [r2, #28]
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_I2C_MspInit+0x84>)
 80010da:	69db      	ldr	r3, [r3, #28]
 80010dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	201f      	movs	r0, #31
 80010ea:	f000 fa6c 	bl	80015c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010ee:	201f      	movs	r0, #31
 80010f0:	f000 fa85 	bl	80015fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010f4:	bf00      	nop
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40005400 	.word	0x40005400
 8001100:	40021000 	.word	0x40021000
 8001104:	40010c00 	.word	0x40010c00

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110c:	f000 f8fe 	bl	800130c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001110:	f000 f822 	bl	8001158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001114:	f7ff ff56 	bl	8000fc4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001118:	f7ff ff82 	bl	8001020 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Init(&hi2c1);
 800111c:	4808      	ldr	r0, [pc, #32]	; (8001140 <main+0x38>)
 800111e:	f000 fc93 	bl	8001a48 <HAL_I2C_Init>
  a=MPU6050_DMP_Init();
 8001122:	f005 fd8d 	bl	8006c40 <MPU6050_DMP_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	4a06      	ldr	r2, [pc, #24]	; (8001144 <main+0x3c>)
 800112a:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		 b=MPU6050_DMP_Get_Data(&Pitch, &Roll, &Yaw);
 800112c:	4a06      	ldr	r2, [pc, #24]	; (8001148 <main+0x40>)
 800112e:	4907      	ldr	r1, [pc, #28]	; (800114c <main+0x44>)
 8001130:	4807      	ldr	r0, [pc, #28]	; (8001150 <main+0x48>)
 8001132:	f005 fdf1 	bl	8006d18 <MPU6050_DMP_Get_Data>
 8001136:	4603      	mov	r3, r0
 8001138:	4a06      	ldr	r2, [pc, #24]	; (8001154 <main+0x4c>)
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	e7f6      	b.n	800112c <main+0x24>
 800113e:	bf00      	nop
 8001140:	200000c4 	.word	0x200000c4
 8001144:	20000000 	.word	0x20000000
 8001148:	20000120 	.word	0x20000120
 800114c:	2000011c 	.word	0x2000011c
 8001150:	20000118 	.word	0x20000118
 8001154:	20000124 	.word	0x20000124

08001158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b090      	sub	sp, #64	; 0x40
 800115c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115e:	f107 0318 	add.w	r3, r7, #24
 8001162:	2228      	movs	r2, #40	; 0x28
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f006 fc98 	bl	8007a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800117a:	2301      	movs	r3, #1
 800117c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800117e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001182:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001188:	2301      	movs	r3, #1
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118c:	2302      	movs	r3, #2
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001194:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001196:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800119a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119c:	f107 0318 	add.w	r3, r7, #24
 80011a0:	4618      	mov	r0, r3
 80011a2:	f003 f863 	bl	800426c <HAL_RCC_OscConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011ac:	f000 f819 	bl	80011e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b0:	230f      	movs	r3, #15
 80011b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b4:	2302      	movs	r3, #2
 80011b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2102      	movs	r1, #2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 fad0 	bl	8004770 <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011d6:	f000 f804 	bl	80011e2 <Error_Handler>
  }
}
 80011da:	bf00      	nop
 80011dc:	3740      	adds	r7, #64	; 0x40
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e6:	b672      	cpsid	i
}
 80011e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ea:	e7fe      	b.n	80011ea <Error_Handler+0x8>

080011ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_MspInit+0x5c>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	4a14      	ldr	r2, [pc, #80]	; (8001248 <HAL_MspInit+0x5c>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6193      	str	r3, [r2, #24]
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_MspInit+0x5c>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <HAL_MspInit+0x5c>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <HAL_MspInit+0x5c>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001214:	61d3      	str	r3, [r2, #28]
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <HAL_MspInit+0x5c>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_MspInit+0x60>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_MspInit+0x60>)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	40021000 	.word	0x40021000
 800124c:	40010000 	.word	0x40010000

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001254:	e7fe      	b.n	8001254 <NMI_Handler+0x4>

08001256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <MemManage_Handler+0x4>

08001262 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <UsageFault_Handler+0x4>

0800126e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr

0800127a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001296:	f000 f87f 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <I2C1_EV_IRQHandler+0x10>)
 80012a6:	f001 f889 	bl	80023bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200000c4 	.word	0x200000c4

080012b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012c0:	f7ff fff8 	bl	80012b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c4:	480b      	ldr	r0, [pc, #44]	; (80012f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012c6:	490c      	ldr	r1, [pc, #48]	; (80012f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012c8:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a09      	ldr	r2, [pc, #36]	; (8001300 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012dc:	4c09      	ldr	r4, [pc, #36]	; (8001304 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ea:	f006 fbe5 	bl	8007ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ee:	f7ff ff0b 	bl	8001108 <main>
  bx lr
 80012f2:	4770      	bx	lr
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80012fc:	08008858 	.word	0x08008858
  ldr r2, =_sbss
 8001300:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001304:	20000274 	.word	0x20000274

08001308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC1_2_IRQHandler>
	...

0800130c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_Init+0x28>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_Init+0x28>)
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 f947 	bl	80015b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001322:	200f      	movs	r0, #15
 8001324:	f000 f808 	bl	8001338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001328:	f7ff ff60 	bl	80011ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40022000 	.word	0x40022000

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x54>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x58>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f95f 	bl	800161a <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00e      	b.n	8001384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d80a      	bhi.n	8001382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f000 f927 	bl	80015c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <HAL_InitTick+0x5c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000004 	.word	0x20000004
 8001390:	2000000c 	.word	0x2000000c
 8001394:	20000008 	.word	0x20000008

08001398 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_IncTick+0x1c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_IncTick+0x20>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a03      	ldr	r2, [pc, #12]	; (80013b8 <HAL_IncTick+0x20>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	2000000c 	.word	0x2000000c
 80013b8:	20000128 	.word	0x20000128

080013bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b02      	ldr	r3, [pc, #8]	; (80013cc <HAL_GetTick+0x10>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	20000128 	.word	0x20000128

080013d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff fff0 	bl	80013bc <HAL_GetTick>
 80013dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e8:	d005      	beq.n	80013f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_Delay+0x44>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013f6:	bf00      	nop
 80013f8:	f7ff ffe0 	bl	80013bc <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	d8f7      	bhi.n	80013f8 <HAL_Delay+0x28>
  {
  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000000c 	.word	0x2000000c

08001418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001434:	4013      	ands	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144a:	4a04      	ldr	r2, [pc, #16]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	60d3      	str	r3, [r2, #12]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <__NVIC_GetPriorityGrouping+0x18>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	f003 0307 	and.w	r3, r3, #7
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	2b00      	cmp	r3, #0
 800148c:	db0b      	blt.n	80014a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	f003 021f 	and.w	r2, r3, #31
 8001494:	4906      	ldr	r1, [pc, #24]	; (80014b0 <__NVIC_EnableIRQ+0x34>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	2001      	movs	r0, #1
 800149e:	fa00 f202 	lsl.w	r2, r0, r2
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100

080014b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db0a      	blt.n	80014de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	490c      	ldr	r1, [pc, #48]	; (8001500 <__NVIC_SetPriority+0x4c>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014dc:	e00a      	b.n	80014f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4908      	ldr	r1, [pc, #32]	; (8001504 <__NVIC_SetPriority+0x50>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b04      	subs	r3, #4
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	440b      	add	r3, r1
 80014f2:	761a      	strb	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000e100 	.word	0xe000e100
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf28      	it	cs
 8001526:	2304      	movcs	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3304      	adds	r3, #4
 800152e:	2b06      	cmp	r3, #6
 8001530:	d902      	bls.n	8001538 <NVIC_EncodePriority+0x30>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3b03      	subs	r3, #3
 8001536:	e000      	b.n	800153a <NVIC_EncodePriority+0x32>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	f04f 32ff 	mov.w	r2, #4294967295
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001550:	f04f 31ff 	mov.w	r1, #4294967295
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4313      	orrs	r3, r2
         );
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800157c:	d301      	bcc.n	8001582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157e:	2301      	movs	r3, #1
 8001580:	e00f      	b.n	80015a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <SysTick_Config+0x40>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158a:	210f      	movs	r1, #15
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f7ff ff90 	bl	80014b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <SysTick_Config+0x40>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159a:	4b04      	ldr	r3, [pc, #16]	; (80015ac <SysTick_Config+0x40>)
 800159c:	2207      	movs	r2, #7
 800159e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	e000e010 	.word	0xe000e010

080015b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff2d 	bl	8001418 <__NVIC_SetPriorityGrouping>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d8:	f7ff ff42 	bl	8001460 <__NVIC_GetPriorityGrouping>
 80015dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	6978      	ldr	r0, [r7, #20]
 80015e4:	f7ff ff90 	bl	8001508 <NVIC_EncodePriority>
 80015e8:	4602      	mov	r2, r0
 80015ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff5f 	bl	80014b4 <__NVIC_SetPriority>
}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff35 	bl	800147c <__NVIC_EnableIRQ>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ffa2 	bl	800156c <SysTick_Config>
 8001628:	4603      	mov	r3, r0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d005      	beq.n	8001658 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2204      	movs	r2, #4
 8001650:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	73fb      	strb	r3, [r7, #15]
 8001656:	e051      	b.n	80016fc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 020e 	bic.w	r2, r2, #14
 8001666:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0201 	bic.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a22      	ldr	r2, [pc, #136]	; (8001708 <HAL_DMA_Abort_IT+0xd4>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d029      	beq.n	80016d6 <HAL_DMA_Abort_IT+0xa2>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a21      	ldr	r2, [pc, #132]	; (800170c <HAL_DMA_Abort_IT+0xd8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d022      	beq.n	80016d2 <HAL_DMA_Abort_IT+0x9e>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a1f      	ldr	r2, [pc, #124]	; (8001710 <HAL_DMA_Abort_IT+0xdc>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d01a      	beq.n	80016cc <HAL_DMA_Abort_IT+0x98>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a1e      	ldr	r2, [pc, #120]	; (8001714 <HAL_DMA_Abort_IT+0xe0>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d012      	beq.n	80016c6 <HAL_DMA_Abort_IT+0x92>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <HAL_DMA_Abort_IT+0xe4>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d00a      	beq.n	80016c0 <HAL_DMA_Abort_IT+0x8c>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a1b      	ldr	r2, [pc, #108]	; (800171c <HAL_DMA_Abort_IT+0xe8>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d102      	bne.n	80016ba <HAL_DMA_Abort_IT+0x86>
 80016b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016b8:	e00e      	b.n	80016d8 <HAL_DMA_Abort_IT+0xa4>
 80016ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016be:	e00b      	b.n	80016d8 <HAL_DMA_Abort_IT+0xa4>
 80016c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c4:	e008      	b.n	80016d8 <HAL_DMA_Abort_IT+0xa4>
 80016c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ca:	e005      	b.n	80016d8 <HAL_DMA_Abort_IT+0xa4>
 80016cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d0:	e002      	b.n	80016d8 <HAL_DMA_Abort_IT+0xa4>
 80016d2:	2310      	movs	r3, #16
 80016d4:	e000      	b.n	80016d8 <HAL_DMA_Abort_IT+0xa4>
 80016d6:	2301      	movs	r3, #1
 80016d8:	4a11      	ldr	r2, [pc, #68]	; (8001720 <HAL_DMA_Abort_IT+0xec>)
 80016da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	4798      	blx	r3
    } 
  }
  return status;
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40020008 	.word	0x40020008
 800170c:	4002001c 	.word	0x4002001c
 8001710:	40020030 	.word	0x40020030
 8001714:	40020044 	.word	0x40020044
 8001718:	40020058 	.word	0x40020058
 800171c:	4002006c 	.word	0x4002006c
 8001720:	40020000 	.word	0x40020000

08001724 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001732:	b2db      	uxtb	r3, r3
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
	...

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b08b      	sub	sp, #44	; 0x2c
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001752:	e169      	b.n	8001a28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001754:	2201      	movs	r2, #1
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	429a      	cmp	r2, r3
 800176e:	f040 8158 	bne.w	8001a22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4a9a      	ldr	r2, [pc, #616]	; (80019e0 <HAL_GPIO_Init+0x2a0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d05e      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 800177c:	4a98      	ldr	r2, [pc, #608]	; (80019e0 <HAL_GPIO_Init+0x2a0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d875      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 8001782:	4a98      	ldr	r2, [pc, #608]	; (80019e4 <HAL_GPIO_Init+0x2a4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d058      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 8001788:	4a96      	ldr	r2, [pc, #600]	; (80019e4 <HAL_GPIO_Init+0x2a4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d86f      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 800178e:	4a96      	ldr	r2, [pc, #600]	; (80019e8 <HAL_GPIO_Init+0x2a8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d052      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 8001794:	4a94      	ldr	r2, [pc, #592]	; (80019e8 <HAL_GPIO_Init+0x2a8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d869      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 800179a:	4a94      	ldr	r2, [pc, #592]	; (80019ec <HAL_GPIO_Init+0x2ac>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d04c      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 80017a0:	4a92      	ldr	r2, [pc, #584]	; (80019ec <HAL_GPIO_Init+0x2ac>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d863      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017a6:	4a92      	ldr	r2, [pc, #584]	; (80019f0 <HAL_GPIO_Init+0x2b0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d046      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 80017ac:	4a90      	ldr	r2, [pc, #576]	; (80019f0 <HAL_GPIO_Init+0x2b0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d85d      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017b2:	2b12      	cmp	r3, #18
 80017b4:	d82a      	bhi.n	800180c <HAL_GPIO_Init+0xcc>
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	d859      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017ba:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <HAL_GPIO_Init+0x80>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	0800183b 	.word	0x0800183b
 80017c4:	08001815 	.word	0x08001815
 80017c8:	08001827 	.word	0x08001827
 80017cc:	08001869 	.word	0x08001869
 80017d0:	0800186f 	.word	0x0800186f
 80017d4:	0800186f 	.word	0x0800186f
 80017d8:	0800186f 	.word	0x0800186f
 80017dc:	0800186f 	.word	0x0800186f
 80017e0:	0800186f 	.word	0x0800186f
 80017e4:	0800186f 	.word	0x0800186f
 80017e8:	0800186f 	.word	0x0800186f
 80017ec:	0800186f 	.word	0x0800186f
 80017f0:	0800186f 	.word	0x0800186f
 80017f4:	0800186f 	.word	0x0800186f
 80017f8:	0800186f 	.word	0x0800186f
 80017fc:	0800186f 	.word	0x0800186f
 8001800:	0800186f 	.word	0x0800186f
 8001804:	0800181d 	.word	0x0800181d
 8001808:	08001831 	.word	0x08001831
 800180c:	4a79      	ldr	r2, [pc, #484]	; (80019f4 <HAL_GPIO_Init+0x2b4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001812:	e02c      	b.n	800186e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	623b      	str	r3, [r7, #32]
          break;
 800181a:	e029      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	3304      	adds	r3, #4
 8001822:	623b      	str	r3, [r7, #32]
          break;
 8001824:	e024      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	3308      	adds	r3, #8
 800182c:	623b      	str	r3, [r7, #32]
          break;
 800182e:	e01f      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	330c      	adds	r3, #12
 8001836:	623b      	str	r3, [r7, #32]
          break;
 8001838:	e01a      	b.n	8001870 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001842:	2304      	movs	r3, #4
 8001844:	623b      	str	r3, [r7, #32]
          break;
 8001846:	e013      	b.n	8001870 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d105      	bne.n	800185c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001850:	2308      	movs	r3, #8
 8001852:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	611a      	str	r2, [r3, #16]
          break;
 800185a:	e009      	b.n	8001870 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800185c:	2308      	movs	r3, #8
 800185e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	615a      	str	r2, [r3, #20]
          break;
 8001866:	e003      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
          break;
 800186c:	e000      	b.n	8001870 <HAL_GPIO_Init+0x130>
          break;
 800186e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2bff      	cmp	r3, #255	; 0xff
 8001874:	d801      	bhi.n	800187a <HAL_GPIO_Init+0x13a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	e001      	b.n	800187e <HAL_GPIO_Init+0x13e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3304      	adds	r3, #4
 800187e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2bff      	cmp	r3, #255	; 0xff
 8001884:	d802      	bhi.n	800188c <HAL_GPIO_Init+0x14c>
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	e002      	b.n	8001892 <HAL_GPIO_Init+0x152>
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	3b08      	subs	r3, #8
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	210f      	movs	r1, #15
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	401a      	ands	r2, r3
 80018a4:	6a39      	ldr	r1, [r7, #32]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	431a      	orrs	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 80b1 	beq.w	8001a22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018c0:	4b4d      	ldr	r3, [pc, #308]	; (80019f8 <HAL_GPIO_Init+0x2b8>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a4c      	ldr	r2, [pc, #304]	; (80019f8 <HAL_GPIO_Init+0x2b8>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b4a      	ldr	r3, [pc, #296]	; (80019f8 <HAL_GPIO_Init+0x2b8>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018d8:	4a48      	ldr	r2, [pc, #288]	; (80019fc <HAL_GPIO_Init+0x2bc>)
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3302      	adds	r3, #2
 80018e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	220f      	movs	r2, #15
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	4013      	ands	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a40      	ldr	r2, [pc, #256]	; (8001a00 <HAL_GPIO_Init+0x2c0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d013      	beq.n	800192c <HAL_GPIO_Init+0x1ec>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a3f      	ldr	r2, [pc, #252]	; (8001a04 <HAL_GPIO_Init+0x2c4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d00d      	beq.n	8001928 <HAL_GPIO_Init+0x1e8>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a3e      	ldr	r2, [pc, #248]	; (8001a08 <HAL_GPIO_Init+0x2c8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d007      	beq.n	8001924 <HAL_GPIO_Init+0x1e4>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a3d      	ldr	r2, [pc, #244]	; (8001a0c <HAL_GPIO_Init+0x2cc>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d101      	bne.n	8001920 <HAL_GPIO_Init+0x1e0>
 800191c:	2303      	movs	r3, #3
 800191e:	e006      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 8001920:	2304      	movs	r3, #4
 8001922:	e004      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 8001924:	2302      	movs	r3, #2
 8001926:	e002      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 800192c:	2300      	movs	r3, #0
 800192e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001930:	f002 0203 	and.w	r2, r2, #3
 8001934:	0092      	lsls	r2, r2, #2
 8001936:	4093      	lsls	r3, r2
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800193e:	492f      	ldr	r1, [pc, #188]	; (80019fc <HAL_GPIO_Init+0x2bc>)
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	3302      	adds	r3, #2
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d006      	beq.n	8001966 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001958:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	492c      	ldr	r1, [pc, #176]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	608b      	str	r3, [r1, #8]
 8001964:	e006      	b.n	8001974 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001966:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	43db      	mvns	r3, r3
 800196e:	4928      	ldr	r1, [pc, #160]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001970:	4013      	ands	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	4922      	ldr	r1, [pc, #136]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	60cb      	str	r3, [r1, #12]
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	43db      	mvns	r3, r3
 8001996:	491e      	ldr	r1, [pc, #120]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001998:	4013      	ands	r3, r2
 800199a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d006      	beq.n	80019b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	4918      	ldr	r1, [pc, #96]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	43db      	mvns	r3, r3
 80019be:	4914      	ldr	r1, [pc, #80]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d021      	beq.n	8001a14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	490e      	ldr	r1, [pc, #56]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
 80019dc:	e021      	b.n	8001a22 <HAL_GPIO_Init+0x2e2>
 80019de:	bf00      	nop
 80019e0:	10320000 	.word	0x10320000
 80019e4:	10310000 	.word	0x10310000
 80019e8:	10220000 	.word	0x10220000
 80019ec:	10210000 	.word	0x10210000
 80019f0:	10120000 	.word	0x10120000
 80019f4:	10110000 	.word	0x10110000
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010000 	.word	0x40010000
 8001a00:	40010800 	.word	0x40010800
 8001a04:	40010c00 	.word	0x40010c00
 8001a08:	40011000 	.word	0x40011000
 8001a0c:	40011400 	.word	0x40011400
 8001a10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_GPIO_Init+0x304>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	4909      	ldr	r1, [pc, #36]	; (8001a44 <HAL_GPIO_Init+0x304>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	3301      	adds	r3, #1
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f47f ae8e 	bne.w	8001754 <HAL_GPIO_Init+0x14>
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	372c      	adds	r7, #44	; 0x2c
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	40010400 	.word	0x40010400

08001a48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e12b      	b.n	8001cb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d106      	bne.n	8001a74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff fb04 	bl	800107c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2224      	movs	r2, #36	; 0x24
 8001a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0201 	bic.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001aac:	f002 ffa8 	bl	8004a00 <HAL_RCC_GetPCLK1Freq>
 8001ab0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4a81      	ldr	r2, [pc, #516]	; (8001cbc <HAL_I2C_Init+0x274>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d807      	bhi.n	8001acc <HAL_I2C_Init+0x84>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4a80      	ldr	r2, [pc, #512]	; (8001cc0 <HAL_I2C_Init+0x278>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	bf94      	ite	ls
 8001ac4:	2301      	movls	r3, #1
 8001ac6:	2300      	movhi	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	e006      	b.n	8001ada <HAL_I2C_Init+0x92>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4a7d      	ldr	r2, [pc, #500]	; (8001cc4 <HAL_I2C_Init+0x27c>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	bf94      	ite	ls
 8001ad4:	2301      	movls	r3, #1
 8001ad6:	2300      	movhi	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0e7      	b.n	8001cb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4a78      	ldr	r2, [pc, #480]	; (8001cc8 <HAL_I2C_Init+0x280>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	0c9b      	lsrs	r3, r3, #18
 8001aec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68ba      	ldr	r2, [r7, #8]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	4a6a      	ldr	r2, [pc, #424]	; (8001cbc <HAL_I2C_Init+0x274>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d802      	bhi.n	8001b1c <HAL_I2C_Init+0xd4>
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	e009      	b.n	8001b30 <HAL_I2C_Init+0xe8>
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
 8001b26:	4a69      	ldr	r2, [pc, #420]	; (8001ccc <HAL_I2C_Init+0x284>)
 8001b28:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2c:	099b      	lsrs	r3, r3, #6
 8001b2e:	3301      	adds	r3, #1
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	430b      	orrs	r3, r1
 8001b36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	495c      	ldr	r1, [pc, #368]	; (8001cbc <HAL_I2C_Init+0x274>)
 8001b4c:	428b      	cmp	r3, r1
 8001b4e:	d819      	bhi.n	8001b84 <HAL_I2C_Init+0x13c>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	1e59      	subs	r1, r3, #1
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b5e:	1c59      	adds	r1, r3, #1
 8001b60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b64:	400b      	ands	r3, r1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00a      	beq.n	8001b80 <HAL_I2C_Init+0x138>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1e59      	subs	r1, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7e:	e051      	b.n	8001c24 <HAL_I2C_Init+0x1dc>
 8001b80:	2304      	movs	r3, #4
 8001b82:	e04f      	b.n	8001c24 <HAL_I2C_Init+0x1dc>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d111      	bne.n	8001bb0 <HAL_I2C_Init+0x168>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1e58      	subs	r0, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6859      	ldr	r1, [r3, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	440b      	add	r3, r1
 8001b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf0c      	ite	eq
 8001ba8:	2301      	moveq	r3, #1
 8001baa:	2300      	movne	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	e012      	b.n	8001bd6 <HAL_I2C_Init+0x18e>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1e58      	subs	r0, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6859      	ldr	r1, [r3, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	0099      	lsls	r1, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf0c      	ite	eq
 8001bd0:	2301      	moveq	r3, #1
 8001bd2:	2300      	movne	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_I2C_Init+0x196>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e022      	b.n	8001c24 <HAL_I2C_Init+0x1dc>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10e      	bne.n	8001c04 <HAL_I2C_Init+0x1bc>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1e58      	subs	r0, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6859      	ldr	r1, [r3, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	440b      	add	r3, r1
 8001bf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c02:	e00f      	b.n	8001c24 <HAL_I2C_Init+0x1dc>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1e58      	subs	r0, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	0099      	lsls	r1, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	6809      	ldr	r1, [r1, #0]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69da      	ldr	r2, [r3, #28]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6911      	ldr	r1, [r2, #16]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68d2      	ldr	r2, [r2, #12]
 8001c5e:	4311      	orrs	r1, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	430b      	orrs	r3, r1
 8001c66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695a      	ldr	r2, [r3, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	000186a0 	.word	0x000186a0
 8001cc0:	001e847f 	.word	0x001e847f
 8001cc4:	003d08ff 	.word	0x003d08ff
 8001cc8:	431bde83 	.word	0x431bde83
 8001ccc:	10624dd3 	.word	0x10624dd3

08001cd0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce2:	2b80      	cmp	r3, #128	; 0x80
 8001ce4:	d103      	bne.n	8001cee <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2200      	movs	r2, #0
 8001cec:	611a      	str	r2, [r3, #16]
  }
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	4608      	mov	r0, r1
 8001d02:	4611      	mov	r1, r2
 8001d04:	461a      	mov	r2, r3
 8001d06:	4603      	mov	r3, r0
 8001d08:	817b      	strh	r3, [r7, #10]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	813b      	strh	r3, [r7, #8]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d12:	f7ff fb53 	bl	80013bc <HAL_GetTick>
 8001d16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b20      	cmp	r3, #32
 8001d22:	f040 80d9 	bne.w	8001ed8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2319      	movs	r3, #25
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	496d      	ldr	r1, [pc, #436]	; (8001ee4 <HAL_I2C_Mem_Write+0x1ec>)
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f002 f819 	bl	8003d68 <I2C_WaitOnFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e0cc      	b.n	8001eda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_I2C_Mem_Write+0x56>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e0c5      	b.n	8001eda <HAL_I2C_Mem_Write+0x1e2>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d007      	beq.n	8001d74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2221      	movs	r2, #33	; 0x21
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2240      	movs	r2, #64	; 0x40
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6a3a      	ldr	r2, [r7, #32]
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001da4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4a4d      	ldr	r2, [pc, #308]	; (8001ee8 <HAL_I2C_Mem_Write+0x1f0>)
 8001db4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001db6:	88f8      	ldrh	r0, [r7, #6]
 8001db8:	893a      	ldrh	r2, [r7, #8]
 8001dba:	8979      	ldrh	r1, [r7, #10]
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f001 fda8 	bl	800391c <I2C_RequestMemoryWrite>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d052      	beq.n	8001e78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e081      	b.n	8001eda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f002 f8de 	bl	8003f9c <I2C_WaitOnTXEFlagUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00d      	beq.n	8001e02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d107      	bne.n	8001dfe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e06b      	b.n	8001eda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	781a      	ldrb	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d11b      	bne.n	8001e78 <HAL_I2C_Mem_Write+0x180>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d017      	beq.n	8001e78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	781a      	ldrb	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1aa      	bne.n	8001dd6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f002 f8d1 	bl	800402c <I2C_WaitOnBTFFlagUntilTimeout>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00d      	beq.n	8001eac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d107      	bne.n	8001ea8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ea6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e016      	b.n	8001eda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e000      	b.n	8001eda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ed8:	2302      	movs	r3, #2
  }
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	00100002 	.word	0x00100002
 8001ee8:	ffff0000 	.word	0xffff0000

08001eec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08c      	sub	sp, #48	; 0x30
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	4608      	mov	r0, r1
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4603      	mov	r3, r0
 8001efc:	817b      	strh	r3, [r7, #10]
 8001efe:	460b      	mov	r3, r1
 8001f00:	813b      	strh	r3, [r7, #8]
 8001f02:	4613      	mov	r3, r2
 8001f04:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f0a:	f7ff fa57 	bl	80013bc <HAL_GetTick>
 8001f0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	f040 8244 	bne.w	80023a6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2319      	movs	r3, #25
 8001f24:	2201      	movs	r2, #1
 8001f26:	4982      	ldr	r1, [pc, #520]	; (8002130 <HAL_I2C_Mem_Read+0x244>)
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f001 ff1d 	bl	8003d68 <I2C_WaitOnFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001f34:	2302      	movs	r3, #2
 8001f36:	e237      	b.n	80023a8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_I2C_Mem_Read+0x5a>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e230      	b.n	80023a8 <HAL_I2C_Mem_Read+0x4bc>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d007      	beq.n	8001f6c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2222      	movs	r2, #34	; 0x22
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2240      	movs	r2, #64	; 0x40
 8001f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4a62      	ldr	r2, [pc, #392]	; (8002134 <HAL_I2C_Mem_Read+0x248>)
 8001fac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fae:	88f8      	ldrh	r0, [r7, #6]
 8001fb0:	893a      	ldrh	r2, [r7, #8]
 8001fb2:	8979      	ldrh	r1, [r7, #10]
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f001 fd42 	bl	8003a48 <I2C_RequestMemoryRead>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e1ec      	b.n	80023a8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d113      	bne.n	8001ffe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	e1c0      	b.n	8002380 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002002:	2b01      	cmp	r3, #1
 8002004:	d11e      	bne.n	8002044 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002014:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002016:	b672      	cpsid	i
}
 8002018:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	61bb      	str	r3, [r7, #24]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800203e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002040:	b662      	cpsie	i
}
 8002042:	e035      	b.n	80020b0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002048:	2b02      	cmp	r3, #2
 800204a:	d11e      	bne.n	800208a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800205a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800205c:	b672      	cpsid	i
}
 800205e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002084:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002086:	b662      	cpsie	i
}
 8002088:	e012      	b.n	80020b0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002098:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80020b0:	e166      	b.n	8002380 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	f200 811f 	bhi.w	80022fa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d123      	bne.n	800210c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f002 f829 	bl	8004120 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e167      	b.n	80023a8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002100:	b29b      	uxth	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	855a      	strh	r2, [r3, #42]	; 0x2a
 800210a:	e139      	b.n	8002380 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002110:	2b02      	cmp	r3, #2
 8002112:	d152      	bne.n	80021ba <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211a:	2200      	movs	r2, #0
 800211c:	4906      	ldr	r1, [pc, #24]	; (8002138 <HAL_I2C_Mem_Read+0x24c>)
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f001 fe22 	bl	8003d68 <I2C_WaitOnFlagUntilTimeout>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d008      	beq.n	800213c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e13c      	b.n	80023a8 <HAL_I2C_Mem_Read+0x4bc>
 800212e:	bf00      	nop
 8002130:	00100002 	.word	0x00100002
 8002134:	ffff0000 	.word	0xffff0000
 8002138:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800213c:	b672      	cpsid	i
}
 800213e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800214e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691a      	ldr	r2, [r3, #16]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002182:	b662      	cpsie	i
}
 8002184:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021b8:	e0e2      	b.n	8002380 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	2200      	movs	r2, #0
 80021c2:	497b      	ldr	r1, [pc, #492]	; (80023b0 <HAL_I2C_Mem_Read+0x4c4>)
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f001 fdcf 	bl	8003d68 <I2C_WaitOnFlagUntilTimeout>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0e9      	b.n	80023a8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021e4:	b672      	cpsid	i
}
 80021e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691a      	ldr	r2, [r3, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002210:	b29b      	uxth	r3, r3
 8002212:	3b01      	subs	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800221a:	4b66      	ldr	r3, [pc, #408]	; (80023b4 <HAL_I2C_Mem_Read+0x4c8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	08db      	lsrs	r3, r3, #3
 8002220:	4a65      	ldr	r2, [pc, #404]	; (80023b8 <HAL_I2C_Mem_Read+0x4cc>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0a1a      	lsrs	r2, r3, #8
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00da      	lsls	r2, r3, #3
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	3b01      	subs	r3, #1
 8002238:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d118      	bne.n	8002272 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2220      	movs	r2, #32
 800224a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f043 0220 	orr.w	r2, r3, #32
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002262:	b662      	cpsie	i
}
 8002264:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e09a      	b.n	80023a8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b04      	cmp	r3, #4
 800227e:	d1d9      	bne.n	8002234 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800228e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022c2:	b662      	cpsie	i
}
 80022c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022f8:	e042      	b.n	8002380 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f001 ff0e 	bl	8004120 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e04c      	b.n	80023a8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b04      	cmp	r3, #4
 800234c:	d118      	bne.n	8002380 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236a:	3b01      	subs	r3, #1
 800236c:	b29a      	uxth	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002384:	2b00      	cmp	r3, #0
 8002386:	f47f ae94 	bne.w	80020b2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2220      	movs	r2, #32
 800238e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e000      	b.n	80023a8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
  }
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3728      	adds	r7, #40	; 0x28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	00010004 	.word	0x00010004
 80023b4:	20000004 	.word	0x20000004
 80023b8:	14f8b589 	.word	0x14f8b589

080023bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	2b10      	cmp	r3, #16
 80023ea:	d003      	beq.n	80023f4 <HAL_I2C_EV_IRQHandler+0x38>
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	2b40      	cmp	r3, #64	; 0x40
 80023f0:	f040 80b1 	bne.w	8002556 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10d      	bne.n	800242a <HAL_I2C_EV_IRQHandler+0x6e>
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002414:	d003      	beq.n	800241e <HAL_I2C_EV_IRQHandler+0x62>
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800241c:	d101      	bne.n	8002422 <HAL_I2C_EV_IRQHandler+0x66>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <HAL_I2C_EV_IRQHandler+0x68>
 8002422:	2300      	movs	r3, #0
 8002424:	2b01      	cmp	r3, #1
 8002426:	f000 8114 	beq.w	8002652 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00b      	beq.n	800244c <HAL_I2C_EV_IRQHandler+0x90>
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800243a:	2b00      	cmp	r3, #0
 800243c:	d006      	beq.n	800244c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f001 fef9 	bl	8004236 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 fcb9 	bl	8002dbc <I2C_Master_SB>
 800244a:	e083      	b.n	8002554 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d008      	beq.n	8002468 <HAL_I2C_EV_IRQHandler+0xac>
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fd30 	bl	8002ec6 <I2C_Master_ADD10>
 8002466:	e075      	b.n	8002554 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <HAL_I2C_EV_IRQHandler+0xc8>
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 fd4b 	bl	8002f18 <I2C_Master_ADDR>
 8002482:	e067      	b.n	8002554 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b00      	cmp	r3, #0
 800248c:	d036      	beq.n	80024fc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800249c:	f000 80db 	beq.w	8002656 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00d      	beq.n	80024c6 <HAL_I2C_EV_IRQHandler+0x10a>
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_I2C_EV_IRQHandler+0x10a>
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d103      	bne.n	80024c6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f92d 	bl	800271e <I2C_MasterTransmit_TXE>
 80024c4:	e046      	b.n	8002554 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 80c2 	beq.w	8002656 <HAL_I2C_EV_IRQHandler+0x29a>
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80bc 	beq.w	8002656 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80024de:	7bbb      	ldrb	r3, [r7, #14]
 80024e0:	2b21      	cmp	r3, #33	; 0x21
 80024e2:	d103      	bne.n	80024ec <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f9b6 	bl	8002856 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ea:	e0b4      	b.n	8002656 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	2b40      	cmp	r3, #64	; 0x40
 80024f0:	f040 80b1 	bne.w	8002656 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fa24 	bl	8002942 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024fa:	e0ac      	b.n	8002656 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800250a:	f000 80a4 	beq.w	8002656 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00d      	beq.n	8002534 <HAL_I2C_EV_IRQHandler+0x178>
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_I2C_EV_IRQHandler+0x178>
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d103      	bne.n	8002534 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 faa0 	bl	8002a72 <I2C_MasterReceive_RXNE>
 8002532:	e00f      	b.n	8002554 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 808b 	beq.w	8002656 <HAL_I2C_EV_IRQHandler+0x29a>
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 8085 	beq.w	8002656 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 fb4b 	bl	8002be8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002552:	e080      	b.n	8002656 <HAL_I2C_EV_IRQHandler+0x29a>
 8002554:	e07f      	b.n	8002656 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d004      	beq.n	8002568 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	e007      	b.n	8002578 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d011      	beq.n	80025a6 <HAL_I2C_EV_IRQHandler+0x1ea>
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00c      	beq.n	80025a6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800259c:	69b9      	ldr	r1, [r7, #24]
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 ff11 	bl	80033c6 <I2C_Slave_ADDR>
 80025a4:	e05a      	b.n	800265c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_I2C_EV_IRQHandler+0x206>
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 ff4c 	bl	8003458 <I2C_Slave_STOPF>
 80025c0:	e04c      	b.n	800265c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025c2:	7bbb      	ldrb	r3, [r7, #14]
 80025c4:	2b21      	cmp	r3, #33	; 0x21
 80025c6:	d002      	beq.n	80025ce <HAL_I2C_EV_IRQHandler+0x212>
 80025c8:	7bbb      	ldrb	r3, [r7, #14]
 80025ca:	2b29      	cmp	r3, #41	; 0x29
 80025cc:	d120      	bne.n	8002610 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00d      	beq.n	80025f4 <HAL_I2C_EV_IRQHandler+0x238>
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <HAL_I2C_EV_IRQHandler+0x238>
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d103      	bne.n	80025f4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fe2e 	bl	800324e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025f2:	e032      	b.n	800265a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d02d      	beq.n	800265a <HAL_I2C_EV_IRQHandler+0x29e>
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002604:	2b00      	cmp	r3, #0
 8002606:	d028      	beq.n	800265a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 fe5d 	bl	80032c8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800260e:	e024      	b.n	800265a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00d      	beq.n	8002636 <HAL_I2C_EV_IRQHandler+0x27a>
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_I2C_EV_IRQHandler+0x27a>
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d103      	bne.n	8002636 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fe6a 	bl	8003308 <I2C_SlaveReceive_RXNE>
 8002634:	e012      	b.n	800265c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00d      	beq.n	800265c <HAL_I2C_EV_IRQHandler+0x2a0>
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002646:	2b00      	cmp	r3, #0
 8002648:	d008      	beq.n	800265c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fe9a 	bl	8003384 <I2C_SlaveReceive_BTF>
 8002650:	e004      	b.n	800265c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002652:	bf00      	nop
 8002654:	e002      	b.n	800265c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002656:	bf00      	nop
 8002658:	e000      	b.n	800265c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800265a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr

080026aa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	460b      	mov	r3, r1
 80026b4:	70fb      	strb	r3, [r7, #3]
 80026b6:	4613      	mov	r3, r2
 80026b8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr

0800271e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002734:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002740:	2b00      	cmp	r3, #0
 8002742:	d150      	bne.n	80027e6 <I2C_MasterTransmit_TXE+0xc8>
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	2b21      	cmp	r3, #33	; 0x21
 8002748:	d14d      	bne.n	80027e6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b08      	cmp	r3, #8
 800274e:	d01d      	beq.n	800278c <I2C_MasterTransmit_TXE+0x6e>
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b20      	cmp	r3, #32
 8002754:	d01a      	beq.n	800278c <I2C_MasterTransmit_TXE+0x6e>
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800275c:	d016      	beq.n	800278c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800276c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2211      	movs	r2, #17
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff ff6c 	bl	8002662 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800278a:	e060      	b.n	800284e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800279a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027aa:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b40      	cmp	r3, #64	; 0x40
 80027c4:	d107      	bne.n	80027d6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ff81 	bl	80026d6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027d4:	e03b      	b.n	800284e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ff3f 	bl	8002662 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027e4:	e033      	b.n	800284e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	2b21      	cmp	r3, #33	; 0x21
 80027ea:	d005      	beq.n	80027f8 <I2C_MasterTransmit_TXE+0xda>
 80027ec:	7bbb      	ldrb	r3, [r7, #14]
 80027ee:	2b40      	cmp	r3, #64	; 0x40
 80027f0:	d12d      	bne.n	800284e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	2b22      	cmp	r3, #34	; 0x22
 80027f6:	d12a      	bne.n	800284e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d108      	bne.n	8002814 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002810:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002812:	e01c      	b.n	800284e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b40      	cmp	r3, #64	; 0x40
 800281e:	d103      	bne.n	8002828 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f88e 	bl	8002942 <I2C_MemoryTransmit_TXE_BTF>
}
 8002826:	e012      	b.n	800284e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800284c:	e7ff      	b.n	800284e <I2C_MasterTransmit_TXE+0x130>
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b21      	cmp	r3, #33	; 0x21
 800286e:	d164      	bne.n	800293a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d012      	beq.n	80028a0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	781a      	ldrb	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800289e:	e04c      	b.n	800293a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d01d      	beq.n	80028e2 <I2C_MasterTransmit_BTF+0x8c>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d01a      	beq.n	80028e2 <I2C_MasterTransmit_BTF+0x8c>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028b2:	d016      	beq.n	80028e2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028c2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2211      	movs	r2, #17
 80028c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff fec1 	bl	8002662 <HAL_I2C_MasterTxCpltCallback>
}
 80028e0:	e02b      	b.n	800293a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028f0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002900:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b40      	cmp	r3, #64	; 0x40
 800291a:	d107      	bne.n	800292c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff fed6 	bl	80026d6 <HAL_I2C_MemTxCpltCallback>
}
 800292a:	e006      	b.n	800293a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff fe94 	bl	8002662 <HAL_I2C_MasterTxCpltCallback>
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002950:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002956:	2b00      	cmp	r3, #0
 8002958:	d11d      	bne.n	8002996 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295e:	2b01      	cmp	r3, #1
 8002960:	d10b      	bne.n	800297a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002966:	b2da      	uxtb	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002972:	1c9a      	adds	r2, r3, #2
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002978:	e077      	b.n	8002a6a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297e:	b29b      	uxth	r3, r3
 8002980:	121b      	asrs	r3, r3, #8
 8002982:	b2da      	uxtb	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002994:	e069      	b.n	8002a6a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800299a:	2b01      	cmp	r3, #1
 800299c:	d10b      	bne.n	80029b6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80029b4:	e059      	b.n	8002a6a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d152      	bne.n	8002a64 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	2b22      	cmp	r3, #34	; 0x22
 80029c2:	d10d      	bne.n	80029e0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80029de:	e044      	b.n	8002a6a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d015      	beq.n	8002a16 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	2b21      	cmp	r3, #33	; 0x21
 80029ee:	d112      	bne.n	8002a16 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	781a      	ldrb	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a14:	e029      	b.n	8002a6a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d124      	bne.n	8002a6a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	2b21      	cmp	r3, #33	; 0x21
 8002a24:	d121      	bne.n	8002a6a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a34:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a44:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff fe3a 	bl	80026d6 <HAL_I2C_MemTxCpltCallback>
}
 8002a62:	e002      	b.n	8002a6a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff f933 	bl	8001cd0 <I2C_Flush_DR>
}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b22      	cmp	r3, #34	; 0x22
 8002a84:	f040 80ac 	bne.w	8002be0 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d921      	bls.n	8002ada <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	f040 808c 	bne.w	8002be0 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002ad8:	e082      	b.n	8002be0 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d075      	beq.n	8002bce <I2C_MasterReceive_RXNE+0x15c>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d002      	beq.n	8002aee <I2C_MasterReceive_RXNE+0x7c>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d16f      	bne.n	8002bce <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f001 fae4 	bl	80040bc <I2C_WaitOnSTOPRequestThroughIT>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d142      	bne.n	8002b80 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b08:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b18:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b40      	cmp	r3, #64	; 0x40
 8002b52:	d10a      	bne.n	8002b6a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff fdc0 	bl	80026e8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002b68:	e03a      	b.n	8002be0 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2212      	movs	r2, #18
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff fd7b 	bl	8002674 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002b7e:	e02f      	b.n	8002be0 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b8e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691a      	ldr	r2, [r3, #16]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff fd97 	bl	80026fa <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002bcc:	e008      	b.n	8002be0 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bdc:	605a      	str	r2, [r3, #4]
}
 8002bde:	e7ff      	b.n	8002be0 <I2C_MasterReceive_RXNE+0x16e>
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d11b      	bne.n	8002c38 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c0e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002c36:	e0bd      	b.n	8002db4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d129      	bne.n	8002c96 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c50:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d00a      	beq.n	8002c6e <I2C_MasterReceive_BTF+0x86>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d007      	beq.n	8002c6e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c6c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c94:	e08e      	b.n	8002db4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d176      	bne.n	8002d8e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d002      	beq.n	8002cac <I2C_MasterReceive_BTF+0xc4>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d108      	bne.n	8002cbe <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e019      	b.n	8002cf2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d002      	beq.n	8002cca <I2C_MasterReceive_BTF+0xe2>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d108      	bne.n	8002cdc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	e00a      	b.n	8002cf2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b10      	cmp	r3, #16
 8002ce0:	d007      	beq.n	8002cf2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691a      	ldr	r2, [r3, #16]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d4c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b40      	cmp	r3, #64	; 0x40
 8002d60:	d10a      	bne.n	8002d78 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff fcb9 	bl	80026e8 <HAL_I2C_MemRxCpltCallback>
}
 8002d76:	e01d      	b.n	8002db4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2212      	movs	r2, #18
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff fc74 	bl	8002674 <HAL_I2C_MasterRxCpltCallback>
}
 8002d8c:	e012      	b.n	8002db4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002db4:	bf00      	nop
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b40      	cmp	r3, #64	; 0x40
 8002dce:	d117      	bne.n	8002e00 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d109      	bne.n	8002dec <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002de8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002dea:	e067      	b.n	8002ebc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	611a      	str	r2, [r3, #16]
}
 8002dfe:	e05d      	b.n	8002ebc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e08:	d133      	bne.n	8002e72 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b21      	cmp	r3, #33	; 0x21
 8002e14:	d109      	bne.n	8002e2a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e26:	611a      	str	r2, [r3, #16]
 8002e28:	e008      	b.n	8002e3c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d004      	beq.n	8002e4e <I2C_Master_SB+0x92>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d108      	bne.n	8002e60 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d032      	beq.n	8002ebc <I2C_Master_SB+0x100>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d02d      	beq.n	8002ebc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e6e:	605a      	str	r2, [r3, #4]
}
 8002e70:	e024      	b.n	8002ebc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10e      	bne.n	8002e98 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	11db      	asrs	r3, r3, #7
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f003 0306 	and.w	r3, r3, #6
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f063 030f 	orn	r3, r3, #15
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	611a      	str	r2, [r3, #16]
}
 8002e96:	e011      	b.n	8002ebc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d10d      	bne.n	8002ebc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	11db      	asrs	r3, r3, #7
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f003 0306 	and.w	r3, r3, #6
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f063 030e 	orn	r3, r3, #14
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	611a      	str	r2, [r3, #16]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d004      	beq.n	8002eec <I2C_Master_ADD10+0x26>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d108      	bne.n	8002efe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00c      	beq.n	8002f0e <I2C_Master_ADD10+0x48>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f0c:	605a      	str	r2, [r3, #4]
  }
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b091      	sub	sp, #68	; 0x44
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b22      	cmp	r3, #34	; 0x22
 8002f40:	f040 8174 	bne.w	800322c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10f      	bne.n	8002f6c <I2C_Master_ADDR+0x54>
 8002f4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002f50:	2b40      	cmp	r3, #64	; 0x40
 8002f52:	d10b      	bne.n	8002f6c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f54:	2300      	movs	r3, #0
 8002f56:	633b      	str	r3, [r7, #48]	; 0x30
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	633b      	str	r3, [r7, #48]	; 0x30
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	633b      	str	r3, [r7, #48]	; 0x30
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6a:	e16b      	b.n	8003244 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d11d      	bne.n	8002fb0 <I2C_Master_ADDR+0x98>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f7c:	d118      	bne.n	8002fb0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f7e:	2300      	movs	r3, #0
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	651a      	str	r2, [r3, #80]	; 0x50
 8002fae:	e149      	b.n	8003244 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d113      	bne.n	8002fe2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fba:	2300      	movs	r3, #0
 8002fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fce:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	e120      	b.n	8003224 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	f040 808a 	bne.w	8003102 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ff4:	d137      	bne.n	8003066 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003004:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003014:	d113      	bne.n	800303e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003024:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003026:	2300      	movs	r3, #0
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	e0f2      	b.n	8003224 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303e:	2300      	movs	r3, #0
 8003040:	623b      	str	r3, [r7, #32]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	623b      	str	r3, [r7, #32]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	623b      	str	r3, [r7, #32]
 8003052:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	e0de      	b.n	8003224 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003068:	2b08      	cmp	r3, #8
 800306a:	d02e      	beq.n	80030ca <I2C_Master_ADDR+0x1b2>
 800306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306e:	2b20      	cmp	r3, #32
 8003070:	d02b      	beq.n	80030ca <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003074:	2b12      	cmp	r3, #18
 8003076:	d102      	bne.n	800307e <I2C_Master_ADDR+0x166>
 8003078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307a:	2b01      	cmp	r3, #1
 800307c:	d125      	bne.n	80030ca <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	2b04      	cmp	r3, #4
 8003082:	d00e      	beq.n	80030a2 <I2C_Master_ADDR+0x18a>
 8003084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003086:	2b02      	cmp	r3, #2
 8003088:	d00b      	beq.n	80030a2 <I2C_Master_ADDR+0x18a>
 800308a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308c:	2b10      	cmp	r3, #16
 800308e:	d008      	beq.n	80030a2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	e007      	b.n	80030b2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	e0ac      	b.n	8003224 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030da:	2300      	movs	r3, #0
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	e090      	b.n	8003224 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d158      	bne.n	80031be <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800310c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310e:	2b04      	cmp	r3, #4
 8003110:	d021      	beq.n	8003156 <I2C_Master_ADDR+0x23e>
 8003112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003114:	2b02      	cmp	r3, #2
 8003116:	d01e      	beq.n	8003156 <I2C_Master_ADDR+0x23e>
 8003118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311a:	2b10      	cmp	r3, #16
 800311c:	d01b      	beq.n	8003156 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800312c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	e012      	b.n	800317c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003164:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800318a:	d14b      	bne.n	8003224 <I2C_Master_ADDR+0x30c>
 800318c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003192:	d00b      	beq.n	80031ac <I2C_Master_ADDR+0x294>
 8003194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003196:	2b01      	cmp	r3, #1
 8003198:	d008      	beq.n	80031ac <I2C_Master_ADDR+0x294>
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	2b08      	cmp	r3, #8
 800319e:	d005      	beq.n	80031ac <I2C_Master_ADDR+0x294>
 80031a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a2:	2b10      	cmp	r3, #16
 80031a4:	d002      	beq.n	80031ac <I2C_Master_ADDR+0x294>
 80031a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	d13b      	bne.n	8003224 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	e032      	b.n	8003224 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031cc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031dc:	d117      	bne.n	800320e <I2C_Master_ADDR+0x2f6>
 80031de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031e4:	d00b      	beq.n	80031fe <I2C_Master_ADDR+0x2e6>
 80031e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d008      	beq.n	80031fe <I2C_Master_ADDR+0x2e6>
 80031ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d005      	beq.n	80031fe <I2C_Master_ADDR+0x2e6>
 80031f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f4:	2b10      	cmp	r3, #16
 80031f6:	d002      	beq.n	80031fe <I2C_Master_ADDR+0x2e6>
 80031f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d107      	bne.n	800320e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800320c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800322a:	e00b      	b.n	8003244 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	68bb      	ldr	r3, [r7, #8]
}
 8003242:	e7ff      	b.n	8003244 <I2C_Master_ADDR+0x32c>
 8003244:	bf00      	nop
 8003246:	3744      	adds	r7, #68	; 0x44
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d02b      	beq.n	80032c0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	781a      	ldrb	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d114      	bne.n	80032c0 <I2C_SlaveTransmit_TXE+0x72>
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	2b29      	cmp	r3, #41	; 0x29
 800329a:	d111      	bne.n	80032c0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032aa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2221      	movs	r2, #33	; 0x21
 80032b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2228      	movs	r2, #40	; 0x28
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff f9e3 	bl	8002686 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d011      	beq.n	80032fe <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	781a      	ldrb	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003316:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d02c      	beq.n	800337c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d114      	bne.n	800337c <I2C_SlaveReceive_RXNE+0x74>
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	2b2a      	cmp	r3, #42	; 0x2a
 8003356:	d111      	bne.n	800337c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003366:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2222      	movs	r2, #34	; 0x22
 800336c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2228      	movs	r2, #40	; 0x28
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff f98e 	bl	8002698 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d012      	beq.n	80033bc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033e0:	2b28      	cmp	r3, #40	; 0x28
 80033e2:	d125      	bne.n	8003430 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80033fe:	2301      	movs	r3, #1
 8003400:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003408:	2b00      	cmp	r3, #0
 800340a:	d103      	bne.n	8003414 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	81bb      	strh	r3, [r7, #12]
 8003412:	e002      	b.n	800341a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003422:	89ba      	ldrh	r2, [r7, #12]
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	4619      	mov	r1, r3
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff f93e 	bl	80026aa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800342e:	e00e      	b.n	800344e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003430:	2300      	movs	r3, #0
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003466:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003476:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003478:	2300      	movs	r3, #0
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b4:	d172      	bne.n	800359c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	2b22      	cmp	r3, #34	; 0x22
 80034ba:	d002      	beq.n	80034c2 <I2C_Slave_STOPF+0x6a>
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2b2a      	cmp	r3, #42	; 0x2a
 80034c0:	d135      	bne.n	800352e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f043 0204 	orr.w	r2, r3, #4
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe f912 	bl	8001724 <HAL_DMA_GetState>
 8003500:	4603      	mov	r3, r0
 8003502:	2b01      	cmp	r3, #1
 8003504:	d049      	beq.n	800359a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	4a69      	ldr	r2, [pc, #420]	; (80036b0 <I2C_Slave_STOPF+0x258>)
 800350c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe f88e 	bl	8001634 <HAL_DMA_Abort_IT>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d03d      	beq.n	800359a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003528:	4610      	mov	r0, r2
 800352a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800352c:	e035      	b.n	800359a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	b29a      	uxth	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f043 0204 	orr.w	r2, r3, #4
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003560:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe f8dc 	bl	8001724 <HAL_DMA_GetState>
 800356c:	4603      	mov	r3, r0
 800356e:	2b01      	cmp	r3, #1
 8003570:	d014      	beq.n	800359c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003576:	4a4e      	ldr	r2, [pc, #312]	; (80036b0 <I2C_Slave_STOPF+0x258>)
 8003578:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357e:	4618      	mov	r0, r3
 8003580:	f7fe f858 	bl	8001634 <HAL_DMA_Abort_IT>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d008      	beq.n	800359c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003594:	4610      	mov	r0, r2
 8003596:	4798      	blx	r3
 8003598:	e000      	b.n	800359c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800359a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d03e      	beq.n	8003624 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d112      	bne.n	80035da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e4:	2b40      	cmp	r3, #64	; 0x40
 80035e6:	d112      	bne.n	800360e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	f043 0204 	orr.w	r2, r3, #4
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f843 	bl	80036b8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003632:	e039      	b.n	80036a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	2b2a      	cmp	r3, #42	; 0x2a
 8003638:	d109      	bne.n	800364e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2228      	movs	r2, #40	; 0x28
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7ff f825 	bl	8002698 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b28      	cmp	r3, #40	; 0x28
 8003658:	d111      	bne.n	800367e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <I2C_Slave_STOPF+0x25c>)
 800365e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff f824 	bl	80026c4 <HAL_I2C_ListenCpltCallback>
}
 800367c:	e014      	b.n	80036a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	2b22      	cmp	r3, #34	; 0x22
 8003684:	d002      	beq.n	800368c <I2C_Slave_STOPF+0x234>
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	2b22      	cmp	r3, #34	; 0x22
 800368a:	d10d      	bne.n	80036a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fe fff8 	bl	8002698 <HAL_I2C_SlaveRxCpltCallback>
}
 80036a8:	bf00      	nop
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	08003c19 	.word	0x08003c19
 80036b4:	ffff0000 	.word	0xffff0000

080036b8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80036d0:	7bbb      	ldrb	r3, [r7, #14]
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d002      	beq.n	80036dc <I2C_ITError+0x24>
 80036d6:	7bbb      	ldrb	r3, [r7, #14]
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	d10a      	bne.n	80036f2 <I2C_ITError+0x3a>
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b22      	cmp	r3, #34	; 0x22
 80036e0:	d107      	bne.n	80036f2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036f0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036f8:	2b28      	cmp	r3, #40	; 0x28
 80036fa:	d107      	bne.n	800370c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2228      	movs	r2, #40	; 0x28
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800370a:	e015      	b.n	8003738 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003716:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800371a:	d00a      	beq.n	8003732 <I2C_ITError+0x7a>
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	2b60      	cmp	r3, #96	; 0x60
 8003720:	d007      	beq.n	8003732 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003746:	d162      	bne.n	800380e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003756:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b01      	cmp	r3, #1
 8003764:	d020      	beq.n	80037a8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376a:	4a6a      	ldr	r2, [pc, #424]	; (8003914 <I2C_ITError+0x25c>)
 800376c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003772:	4618      	mov	r0, r3
 8003774:	f7fd ff5e 	bl	8001634 <HAL_DMA_Abort_IT>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 8089 	beq.w	8003892 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037a2:	4610      	mov	r0, r2
 80037a4:	4798      	blx	r3
 80037a6:	e074      	b.n	8003892 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ac:	4a59      	ldr	r2, [pc, #356]	; (8003914 <I2C_ITError+0x25c>)
 80037ae:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fd ff3d 	bl	8001634 <HAL_DMA_Abort_IT>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d068      	beq.n	8003892 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ca:	2b40      	cmp	r3, #64	; 0x40
 80037cc:	d10b      	bne.n	80037e6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0201 	bic.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003808:	4610      	mov	r0, r2
 800380a:	4798      	blx	r3
 800380c:	e041      	b.n	8003892 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b60      	cmp	r3, #96	; 0x60
 8003818:	d125      	bne.n	8003866 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003832:	2b40      	cmp	r3, #64	; 0x40
 8003834:	d10b      	bne.n	800384e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fe ff54 	bl	800270c <HAL_I2C_AbortCpltCallback>
 8003864:	e015      	b.n	8003892 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003870:	2b40      	cmp	r3, #64	; 0x40
 8003872:	d10b      	bne.n	800388c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7fe ff34 	bl	80026fa <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10e      	bne.n	80038c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d104      	bne.n	80038c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d007      	beq.n	80038d0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038ce:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d113      	bne.n	800390c <I2C_ITError+0x254>
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	2b28      	cmp	r3, #40	; 0x28
 80038e8:	d110      	bne.n	800390c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <I2C_ITError+0x260>)
 80038ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fe fedc 	bl	80026c4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	08003c19 	.word	0x08003c19
 8003918:	ffff0000 	.word	0xffff0000

0800391c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	4608      	mov	r0, r1
 8003926:	4611      	mov	r1, r2
 8003928:	461a      	mov	r2, r3
 800392a:	4603      	mov	r3, r0
 800392c:	817b      	strh	r3, [r7, #10]
 800392e:	460b      	mov	r3, r1
 8003930:	813b      	strh	r3, [r7, #8]
 8003932:	4613      	mov	r3, r2
 8003934:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003944:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	2200      	movs	r2, #0
 800394e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 fa08 	bl	8003d68 <I2C_WaitOnFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00d      	beq.n	800397a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800396c:	d103      	bne.n	8003976 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e05f      	b.n	8003a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800397a:	897b      	ldrh	r3, [r7, #10]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	461a      	mov	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003988:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	6a3a      	ldr	r2, [r7, #32]
 800398e:	492d      	ldr	r1, [pc, #180]	; (8003a44 <I2C_RequestMemoryWrite+0x128>)
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 fa63 	bl	8003e5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e04c      	b.n	8003a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b8:	6a39      	ldr	r1, [r7, #32]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 faee 	bl	8003f9c <I2C_WaitOnTXEFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00d      	beq.n	80039e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d107      	bne.n	80039de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e02b      	b.n	8003a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d105      	bne.n	80039f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039e8:	893b      	ldrh	r3, [r7, #8]
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	611a      	str	r2, [r3, #16]
 80039f2:	e021      	b.n	8003a38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039f4:	893b      	ldrh	r3, [r7, #8]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a04:	6a39      	ldr	r1, [r7, #32]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 fac8 	bl	8003f9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d107      	bne.n	8003a2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e005      	b.n	8003a3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a2e:	893b      	ldrh	r3, [r7, #8]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	00010002 	.word	0x00010002

08003a48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	4608      	mov	r0, r1
 8003a52:	4611      	mov	r1, r2
 8003a54:	461a      	mov	r2, r3
 8003a56:	4603      	mov	r3, r0
 8003a58:	817b      	strh	r3, [r7, #10]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	813b      	strh	r3, [r7, #8]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f96a 	bl	8003d68 <I2C_WaitOnFlagUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00d      	beq.n	8003ab6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa8:	d103      	bne.n	8003ab2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e0aa      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ab6:	897b      	ldrh	r3, [r7, #10]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ac4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	6a3a      	ldr	r2, [r7, #32]
 8003aca:	4952      	ldr	r1, [pc, #328]	; (8003c14 <I2C_RequestMemoryRead+0x1cc>)
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f9c5 	bl	8003e5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e097      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003adc:	2300      	movs	r3, #0
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af4:	6a39      	ldr	r1, [r7, #32]
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 fa50 	bl	8003f9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00d      	beq.n	8003b1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d107      	bne.n	8003b1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e076      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b1e:	88fb      	ldrh	r3, [r7, #6]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d105      	bne.n	8003b30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b24:	893b      	ldrh	r3, [r7, #8]
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	611a      	str	r2, [r3, #16]
 8003b2e:	e021      	b.n	8003b74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b30:	893b      	ldrh	r3, [r7, #8]
 8003b32:	0a1b      	lsrs	r3, r3, #8
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b40:	6a39      	ldr	r1, [r7, #32]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 fa2a 	bl	8003f9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00d      	beq.n	8003b6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d107      	bne.n	8003b66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e050      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b6a:	893b      	ldrh	r3, [r7, #8]
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b76:	6a39      	ldr	r1, [r7, #32]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fa0f 	bl	8003f9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00d      	beq.n	8003ba0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d107      	bne.n	8003b9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e035      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f8d3 	bl	8003d68 <I2C_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00d      	beq.n	8003be4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bd6:	d103      	bne.n	8003be0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e013      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003be4:	897b      	ldrh	r3, [r7, #10]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	6a3a      	ldr	r2, [r7, #32]
 8003bf8:	4906      	ldr	r1, [pc, #24]	; (8003c14 <I2C_RequestMemoryRead+0x1cc>)
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f92e 	bl	8003e5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	00010002 	.word	0x00010002

08003c18 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c30:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c32:	4b4b      	ldr	r3, [pc, #300]	; (8003d60 <I2C_DMAAbort+0x148>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	08db      	lsrs	r3, r3, #3
 8003c38:	4a4a      	ldr	r2, [pc, #296]	; (8003d64 <I2C_DMAAbort+0x14c>)
 8003c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3e:	0a1a      	lsrs	r2, r3, #8
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	00da      	lsls	r2, r3, #3
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f043 0220 	orr.w	r2, r3, #32
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003c5e:	e00a      	b.n	8003c76 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c74:	d0ea      	beq.n	8003c4c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c82:	2200      	movs	r2, #0
 8003c84:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	2200      	movs	r2, #0
 8003c94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb8:	2200      	movs	r2, #0
 8003cba:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	2200      	movs	r2, #0
 8003cca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0201 	bic.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b60      	cmp	r3, #96	; 0x60
 8003ce6:	d10e      	bne.n	8003d06 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003cfe:	6978      	ldr	r0, [r7, #20]
 8003d00:	f7fe fd04 	bl	800270c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d04:	e027      	b.n	8003d56 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d06:	7cfb      	ldrb	r3, [r7, #19]
 8003d08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d0c:	2b28      	cmp	r3, #40	; 0x28
 8003d0e:	d117      	bne.n	8003d40 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d2e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2200      	movs	r2, #0
 8003d34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2228      	movs	r2, #40	; 0x28
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d3e:	e007      	b.n	8003d50 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003d50:	6978      	ldr	r0, [r7, #20]
 8003d52:	f7fe fcd2 	bl	80026fa <HAL_I2C_ErrorCallback>
}
 8003d56:	bf00      	nop
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000004 	.word	0x20000004
 8003d64:	14f8b589 	.word	0x14f8b589

08003d68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	4613      	mov	r3, r2
 8003d76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d78:	e048      	b.n	8003e0c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d80:	d044      	beq.n	8003e0c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d82:	f7fd fb1b 	bl	80013bc <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d302      	bcc.n	8003d98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d139      	bne.n	8003e0c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	0c1b      	lsrs	r3, r3, #16
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d10d      	bne.n	8003dbe <I2C_WaitOnFlagUntilTimeout+0x56>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	43da      	mvns	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	4013      	ands	r3, r2
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bf0c      	ite	eq
 8003db4:	2301      	moveq	r3, #1
 8003db6:	2300      	movne	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	461a      	mov	r2, r3
 8003dbc:	e00c      	b.n	8003dd8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	43da      	mvns	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bf0c      	ite	eq
 8003dd0:	2301      	moveq	r3, #1
 8003dd2:	2300      	movne	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d116      	bne.n	8003e0c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	f043 0220 	orr.w	r2, r3, #32
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e023      	b.n	8003e54 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	0c1b      	lsrs	r3, r3, #16
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d10d      	bne.n	8003e32 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	43da      	mvns	r2, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	4013      	ands	r3, r2
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bf0c      	ite	eq
 8003e28:	2301      	moveq	r3, #1
 8003e2a:	2300      	movne	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	461a      	mov	r2, r3
 8003e30:	e00c      	b.n	8003e4c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	43da      	mvns	r2, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf0c      	ite	eq
 8003e44:	2301      	moveq	r3, #1
 8003e46:	2300      	movne	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d093      	beq.n	8003d7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e6a:	e071      	b.n	8003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7a:	d123      	bne.n	8003ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	f043 0204 	orr.w	r2, r3, #4
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e067      	b.n	8003f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eca:	d041      	beq.n	8003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ecc:	f7fd fa76 	bl	80013bc <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d302      	bcc.n	8003ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d136      	bne.n	8003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	0c1b      	lsrs	r3, r3, #16
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d10c      	bne.n	8003f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	43da      	mvns	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	bf14      	ite	ne
 8003efe:	2301      	movne	r3, #1
 8003f00:	2300      	moveq	r3, #0
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	e00b      	b.n	8003f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	43da      	mvns	r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	4013      	ands	r3, r2
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	bf14      	ite	ne
 8003f18:	2301      	movne	r3, #1
 8003f1a:	2300      	moveq	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d016      	beq.n	8003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	f043 0220 	orr.w	r2, r3, #32
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e021      	b.n	8003f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	0c1b      	lsrs	r3, r3, #16
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d10c      	bne.n	8003f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	43da      	mvns	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	4013      	ands	r3, r2
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	bf14      	ite	ne
 8003f6c:	2301      	movne	r3, #1
 8003f6e:	2300      	moveq	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	e00b      	b.n	8003f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	43da      	mvns	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bf14      	ite	ne
 8003f86:	2301      	movne	r3, #1
 8003f88:	2300      	moveq	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f47f af6d 	bne.w	8003e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fa8:	e034      	b.n	8004014 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f915 	bl	80041da <I2C_IsAcknowledgeFailed>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e034      	b.n	8004024 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc0:	d028      	beq.n	8004014 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc2:	f7fd f9fb 	bl	80013bc <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d302      	bcc.n	8003fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d11d      	bne.n	8004014 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe2:	2b80      	cmp	r3, #128	; 0x80
 8003fe4:	d016      	beq.n	8004014 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	f043 0220 	orr.w	r2, r3, #32
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e007      	b.n	8004024 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401e:	2b80      	cmp	r3, #128	; 0x80
 8004020:	d1c3      	bne.n	8003faa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004038:	e034      	b.n	80040a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f8cd 	bl	80041da <I2C_IsAcknowledgeFailed>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e034      	b.n	80040b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004050:	d028      	beq.n	80040a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004052:	f7fd f9b3 	bl	80013bc <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	429a      	cmp	r2, r3
 8004060:	d302      	bcc.n	8004068 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d11d      	bne.n	80040a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b04      	cmp	r3, #4
 8004074:	d016      	beq.n	80040a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	f043 0220 	orr.w	r2, r3, #32
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e007      	b.n	80040b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d1c3      	bne.n	800403a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80040c8:	4b13      	ldr	r3, [pc, #76]	; (8004118 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	08db      	lsrs	r3, r3, #3
 80040ce:	4a13      	ldr	r2, [pc, #76]	; (800411c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	0a1a      	lsrs	r2, r3, #8
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d107      	bne.n	80040fa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f043 0220 	orr.w	r2, r3, #32
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e008      	b.n	800410c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004108:	d0e9      	beq.n	80040de <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000004 	.word	0x20000004
 800411c:	14f8b589 	.word	0x14f8b589

08004120 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800412c:	e049      	b.n	80041c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b10      	cmp	r3, #16
 800413a:	d119      	bne.n	8004170 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0210 	mvn.w	r2, #16
 8004144:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e030      	b.n	80041d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004170:	f7fd f924 	bl	80013bc <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	429a      	cmp	r2, r3
 800417e:	d302      	bcc.n	8004186 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d11d      	bne.n	80041c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004190:	2b40      	cmp	r3, #64	; 0x40
 8004192:	d016      	beq.n	80041c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f043 0220 	orr.w	r2, r3, #32
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e007      	b.n	80041d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041cc:	2b40      	cmp	r3, #64	; 0x40
 80041ce:	d1ae      	bne.n	800412e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f0:	d11b      	bne.n	800422a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041fa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f043 0204 	orr.w	r2, r3, #4
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr

08004236 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004246:	d103      	bne.n	8004250 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800424e:	e007      	b.n	8004260 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004258:	d102      	bne.n	8004260 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2208      	movs	r2, #8
 800425e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	4770      	bx	lr
	...

0800426c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e272      	b.n	8004764 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 8087 	beq.w	800439a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800428c:	4b92      	ldr	r3, [pc, #584]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 030c 	and.w	r3, r3, #12
 8004294:	2b04      	cmp	r3, #4
 8004296:	d00c      	beq.n	80042b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004298:	4b8f      	ldr	r3, [pc, #572]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f003 030c 	and.w	r3, r3, #12
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d112      	bne.n	80042ca <HAL_RCC_OscConfig+0x5e>
 80042a4:	4b8c      	ldr	r3, [pc, #560]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b0:	d10b      	bne.n	80042ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b2:	4b89      	ldr	r3, [pc, #548]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d06c      	beq.n	8004398 <HAL_RCC_OscConfig+0x12c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d168      	bne.n	8004398 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e24c      	b.n	8004764 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d2:	d106      	bne.n	80042e2 <HAL_RCC_OscConfig+0x76>
 80042d4:	4b80      	ldr	r3, [pc, #512]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a7f      	ldr	r2, [pc, #508]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80042da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042de:	6013      	str	r3, [r2, #0]
 80042e0:	e02e      	b.n	8004340 <HAL_RCC_OscConfig+0xd4>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10c      	bne.n	8004304 <HAL_RCC_OscConfig+0x98>
 80042ea:	4b7b      	ldr	r3, [pc, #492]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a7a      	ldr	r2, [pc, #488]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	4b78      	ldr	r3, [pc, #480]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a77      	ldr	r2, [pc, #476]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	e01d      	b.n	8004340 <HAL_RCC_OscConfig+0xd4>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800430c:	d10c      	bne.n	8004328 <HAL_RCC_OscConfig+0xbc>
 800430e:	4b72      	ldr	r3, [pc, #456]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a71      	ldr	r2, [pc, #452]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 8004314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	4b6f      	ldr	r3, [pc, #444]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a6e      	ldr	r2, [pc, #440]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 8004320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	e00b      	b.n	8004340 <HAL_RCC_OscConfig+0xd4>
 8004328:	4b6b      	ldr	r3, [pc, #428]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a6a      	ldr	r2, [pc, #424]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 800432e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	4b68      	ldr	r3, [pc, #416]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a67      	ldr	r2, [pc, #412]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 800433a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800433e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d013      	beq.n	8004370 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fd f838 	bl	80013bc <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004350:	f7fd f834 	bl	80013bc <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b64      	cmp	r3, #100	; 0x64
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e200      	b.n	8004764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004362:	4b5d      	ldr	r3, [pc, #372]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0xe4>
 800436e:	e014      	b.n	800439a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7fd f824 	bl	80013bc <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004378:	f7fd f820 	bl	80013bc <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b64      	cmp	r3, #100	; 0x64
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e1ec      	b.n	8004764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438a:	4b53      	ldr	r3, [pc, #332]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x10c>
 8004396:	e000      	b.n	800439a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d063      	beq.n	800446e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043a6:	4b4c      	ldr	r3, [pc, #304]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 030c 	and.w	r3, r3, #12
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00b      	beq.n	80043ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043b2:	4b49      	ldr	r3, [pc, #292]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d11c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x18c>
 80043be:	4b46      	ldr	r3, [pc, #280]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d116      	bne.n	80043f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ca:	4b43      	ldr	r3, [pc, #268]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_RCC_OscConfig+0x176>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d001      	beq.n	80043e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e1c0      	b.n	8004764 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e2:	4b3d      	ldr	r3, [pc, #244]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	4939      	ldr	r1, [pc, #228]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f6:	e03a      	b.n	800446e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d020      	beq.n	8004442 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004400:	4b36      	ldr	r3, [pc, #216]	; (80044dc <HAL_RCC_OscConfig+0x270>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004406:	f7fc ffd9 	bl	80013bc <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440e:	f7fc ffd5 	bl	80013bc <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e1a1      	b.n	8004764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004420:	4b2d      	ldr	r3, [pc, #180]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442c:	4b2a      	ldr	r3, [pc, #168]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	4927      	ldr	r1, [pc, #156]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 800443c:	4313      	orrs	r3, r2
 800443e:	600b      	str	r3, [r1, #0]
 8004440:	e015      	b.n	800446e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004442:	4b26      	ldr	r3, [pc, #152]	; (80044dc <HAL_RCC_OscConfig+0x270>)
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004448:	f7fc ffb8 	bl	80013bc <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004450:	f7fc ffb4 	bl	80013bc <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e180      	b.n	8004764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004462:	4b1d      	ldr	r3, [pc, #116]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d03a      	beq.n	80044f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d019      	beq.n	80044b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004482:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 8004484:	2201      	movs	r2, #1
 8004486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004488:	f7fc ff98 	bl	80013bc <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004490:	f7fc ff94 	bl	80013bc <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e160      	b.n	8004764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a2:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <HAL_RCC_OscConfig+0x26c>)
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0f0      	beq.n	8004490 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044ae:	2001      	movs	r0, #1
 80044b0:	f000 faba 	bl	8004a28 <RCC_Delay>
 80044b4:	e01c      	b.n	80044f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b6:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <HAL_RCC_OscConfig+0x274>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044bc:	f7fc ff7e 	bl	80013bc <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c2:	e00f      	b.n	80044e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c4:	f7fc ff7a 	bl	80013bc <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d908      	bls.n	80044e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e146      	b.n	8004764 <HAL_RCC_OscConfig+0x4f8>
 80044d6:	bf00      	nop
 80044d8:	40021000 	.word	0x40021000
 80044dc:	42420000 	.word	0x42420000
 80044e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e4:	4b92      	ldr	r3, [pc, #584]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e9      	bne.n	80044c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 80a6 	beq.w	800464a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044fe:	2300      	movs	r3, #0
 8004500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004502:	4b8b      	ldr	r3, [pc, #556]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10d      	bne.n	800452a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450e:	4b88      	ldr	r3, [pc, #544]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	4a87      	ldr	r2, [pc, #540]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 8004514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004518:	61d3      	str	r3, [r2, #28]
 800451a:	4b85      	ldr	r3, [pc, #532]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004522:	60bb      	str	r3, [r7, #8]
 8004524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004526:	2301      	movs	r3, #1
 8004528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452a:	4b82      	ldr	r3, [pc, #520]	; (8004734 <HAL_RCC_OscConfig+0x4c8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004532:	2b00      	cmp	r3, #0
 8004534:	d118      	bne.n	8004568 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004536:	4b7f      	ldr	r3, [pc, #508]	; (8004734 <HAL_RCC_OscConfig+0x4c8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a7e      	ldr	r2, [pc, #504]	; (8004734 <HAL_RCC_OscConfig+0x4c8>)
 800453c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004542:	f7fc ff3b 	bl	80013bc <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454a:	f7fc ff37 	bl	80013bc <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b64      	cmp	r3, #100	; 0x64
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e103      	b.n	8004764 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455c:	4b75      	ldr	r3, [pc, #468]	; (8004734 <HAL_RCC_OscConfig+0x4c8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d106      	bne.n	800457e <HAL_RCC_OscConfig+0x312>
 8004570:	4b6f      	ldr	r3, [pc, #444]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	4a6e      	ldr	r2, [pc, #440]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	6213      	str	r3, [r2, #32]
 800457c:	e02d      	b.n	80045da <HAL_RCC_OscConfig+0x36e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10c      	bne.n	80045a0 <HAL_RCC_OscConfig+0x334>
 8004586:	4b6a      	ldr	r3, [pc, #424]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	4a69      	ldr	r2, [pc, #420]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 800458c:	f023 0301 	bic.w	r3, r3, #1
 8004590:	6213      	str	r3, [r2, #32]
 8004592:	4b67      	ldr	r3, [pc, #412]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	4a66      	ldr	r2, [pc, #408]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 8004598:	f023 0304 	bic.w	r3, r3, #4
 800459c:	6213      	str	r3, [r2, #32]
 800459e:	e01c      	b.n	80045da <HAL_RCC_OscConfig+0x36e>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b05      	cmp	r3, #5
 80045a6:	d10c      	bne.n	80045c2 <HAL_RCC_OscConfig+0x356>
 80045a8:	4b61      	ldr	r3, [pc, #388]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	4a60      	ldr	r2, [pc, #384]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 80045ae:	f043 0304 	orr.w	r3, r3, #4
 80045b2:	6213      	str	r3, [r2, #32]
 80045b4:	4b5e      	ldr	r3, [pc, #376]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	4a5d      	ldr	r2, [pc, #372]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	6213      	str	r3, [r2, #32]
 80045c0:	e00b      	b.n	80045da <HAL_RCC_OscConfig+0x36e>
 80045c2:	4b5b      	ldr	r3, [pc, #364]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	4a5a      	ldr	r2, [pc, #360]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 80045c8:	f023 0301 	bic.w	r3, r3, #1
 80045cc:	6213      	str	r3, [r2, #32]
 80045ce:	4b58      	ldr	r3, [pc, #352]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	4a57      	ldr	r2, [pc, #348]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 80045d4:	f023 0304 	bic.w	r3, r3, #4
 80045d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d015      	beq.n	800460e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e2:	f7fc feeb 	bl	80013bc <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e8:	e00a      	b.n	8004600 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ea:	f7fc fee7 	bl	80013bc <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e0b1      	b.n	8004764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004600:	4b4b      	ldr	r3, [pc, #300]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0ee      	beq.n	80045ea <HAL_RCC_OscConfig+0x37e>
 800460c:	e014      	b.n	8004638 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460e:	f7fc fed5 	bl	80013bc <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004614:	e00a      	b.n	800462c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fc fed1 	bl	80013bc <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f241 3288 	movw	r2, #5000	; 0x1388
 8004624:	4293      	cmp	r3, r2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e09b      	b.n	8004764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800462c:	4b40      	ldr	r3, [pc, #256]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1ee      	bne.n	8004616 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004638:	7dfb      	ldrb	r3, [r7, #23]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d105      	bne.n	800464a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800463e:	4b3c      	ldr	r3, [pc, #240]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	4a3b      	ldr	r2, [pc, #236]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 8004644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004648:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 8087 	beq.w	8004762 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004654:	4b36      	ldr	r3, [pc, #216]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 030c 	and.w	r3, r3, #12
 800465c:	2b08      	cmp	r3, #8
 800465e:	d061      	beq.n	8004724 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	2b02      	cmp	r3, #2
 8004666:	d146      	bne.n	80046f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004668:	4b33      	ldr	r3, [pc, #204]	; (8004738 <HAL_RCC_OscConfig+0x4cc>)
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466e:	f7fc fea5 	bl	80013bc <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004676:	f7fc fea1 	bl	80013bc <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e06d      	b.n	8004764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004688:	4b29      	ldr	r3, [pc, #164]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1f0      	bne.n	8004676 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469c:	d108      	bne.n	80046b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800469e:	4b24      	ldr	r3, [pc, #144]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	4921      	ldr	r1, [pc, #132]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046b0:	4b1f      	ldr	r3, [pc, #124]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a19      	ldr	r1, [r3, #32]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	430b      	orrs	r3, r1
 80046c2:	491b      	ldr	r1, [pc, #108]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c8:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <HAL_RCC_OscConfig+0x4cc>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ce:	f7fc fe75 	bl	80013bc <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d6:	f7fc fe71 	bl	80013bc <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e03d      	b.n	8004764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046e8:	4b11      	ldr	r3, [pc, #68]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCC_OscConfig+0x46a>
 80046f4:	e035      	b.n	8004762 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f6:	4b10      	ldr	r3, [pc, #64]	; (8004738 <HAL_RCC_OscConfig+0x4cc>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fc fe5e 	bl	80013bc <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004704:	f7fc fe5a 	bl	80013bc <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e026      	b.n	8004764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004716:	4b06      	ldr	r3, [pc, #24]	; (8004730 <HAL_RCC_OscConfig+0x4c4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x498>
 8004722:	e01e      	b.n	8004762 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d107      	bne.n	800473c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e019      	b.n	8004764 <HAL_RCC_OscConfig+0x4f8>
 8004730:	40021000 	.word	0x40021000
 8004734:	40007000 	.word	0x40007000
 8004738:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800473c:	4b0b      	ldr	r3, [pc, #44]	; (800476c <HAL_RCC_OscConfig+0x500>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	429a      	cmp	r2, r3
 800474e:	d106      	bne.n	800475e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475a:	429a      	cmp	r2, r3
 800475c:	d001      	beq.n	8004762 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40021000 	.word	0x40021000

08004770 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0d0      	b.n	8004926 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004784:	4b6a      	ldr	r3, [pc, #424]	; (8004930 <HAL_RCC_ClockConfig+0x1c0>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d910      	bls.n	80047b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004792:	4b67      	ldr	r3, [pc, #412]	; (8004930 <HAL_RCC_ClockConfig+0x1c0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 0207 	bic.w	r2, r3, #7
 800479a:	4965      	ldr	r1, [pc, #404]	; (8004930 <HAL_RCC_ClockConfig+0x1c0>)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	4313      	orrs	r3, r2
 80047a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a2:	4b63      	ldr	r3, [pc, #396]	; (8004930 <HAL_RCC_ClockConfig+0x1c0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d001      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0b8      	b.n	8004926 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d020      	beq.n	8004802 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047cc:	4b59      	ldr	r3, [pc, #356]	; (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	4a58      	ldr	r2, [pc, #352]	; (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 80047d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e4:	4b53      	ldr	r3, [pc, #332]	; (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4a52      	ldr	r2, [pc, #328]	; (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 80047ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f0:	4b50      	ldr	r3, [pc, #320]	; (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	494d      	ldr	r1, [pc, #308]	; (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d040      	beq.n	8004890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d107      	bne.n	8004826 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004816:	4b47      	ldr	r3, [pc, #284]	; (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d115      	bne.n	800484e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e07f      	b.n	8004926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d107      	bne.n	800483e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482e:	4b41      	ldr	r3, [pc, #260]	; (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e073      	b.n	8004926 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483e:	4b3d      	ldr	r3, [pc, #244]	; (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e06b      	b.n	8004926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800484e:	4b39      	ldr	r3, [pc, #228]	; (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f023 0203 	bic.w	r2, r3, #3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	4936      	ldr	r1, [pc, #216]	; (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 800485c:	4313      	orrs	r3, r2
 800485e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004860:	f7fc fdac 	bl	80013bc <HAL_GetTick>
 8004864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004866:	e00a      	b.n	800487e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004868:	f7fc fda8 	bl	80013bc <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	f241 3288 	movw	r2, #5000	; 0x1388
 8004876:	4293      	cmp	r3, r2
 8004878:	d901      	bls.n	800487e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e053      	b.n	8004926 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487e:	4b2d      	ldr	r3, [pc, #180]	; (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f003 020c 	and.w	r2, r3, #12
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	429a      	cmp	r2, r3
 800488e:	d1eb      	bne.n	8004868 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004890:	4b27      	ldr	r3, [pc, #156]	; (8004930 <HAL_RCC_ClockConfig+0x1c0>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d210      	bcs.n	80048c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489e:	4b24      	ldr	r3, [pc, #144]	; (8004930 <HAL_RCC_ClockConfig+0x1c0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f023 0207 	bic.w	r2, r3, #7
 80048a6:	4922      	ldr	r1, [pc, #136]	; (8004930 <HAL_RCC_ClockConfig+0x1c0>)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ae:	4b20      	ldr	r3, [pc, #128]	; (8004930 <HAL_RCC_ClockConfig+0x1c0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e032      	b.n	8004926 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048cc:	4b19      	ldr	r3, [pc, #100]	; (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	4916      	ldr	r1, [pc, #88]	; (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048ea:	4b12      	ldr	r3, [pc, #72]	; (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	490e      	ldr	r1, [pc, #56]	; (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048fe:	f000 f821 	bl	8004944 <HAL_RCC_GetSysClockFreq>
 8004902:	4602      	mov	r2, r0
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	091b      	lsrs	r3, r3, #4
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	490a      	ldr	r1, [pc, #40]	; (8004938 <HAL_RCC_ClockConfig+0x1c8>)
 8004910:	5ccb      	ldrb	r3, [r1, r3]
 8004912:	fa22 f303 	lsr.w	r3, r2, r3
 8004916:	4a09      	ldr	r2, [pc, #36]	; (800493c <HAL_RCC_ClockConfig+0x1cc>)
 8004918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800491a:	4b09      	ldr	r3, [pc, #36]	; (8004940 <HAL_RCC_ClockConfig+0x1d0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f7fc fd0a 	bl	8001338 <HAL_InitTick>

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40022000 	.word	0x40022000
 8004934:	40021000 	.word	0x40021000
 8004938:	08007b64 	.word	0x08007b64
 800493c:	20000004 	.word	0x20000004
 8004940:	20000008 	.word	0x20000008

08004944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	2300      	movs	r3, #0
 8004950:	60bb      	str	r3, [r7, #8]
 8004952:	2300      	movs	r3, #0
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	2300      	movs	r3, #0
 8004958:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800495e:	4b1e      	ldr	r3, [pc, #120]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f003 030c 	and.w	r3, r3, #12
 800496a:	2b04      	cmp	r3, #4
 800496c:	d002      	beq.n	8004974 <HAL_RCC_GetSysClockFreq+0x30>
 800496e:	2b08      	cmp	r3, #8
 8004970:	d003      	beq.n	800497a <HAL_RCC_GetSysClockFreq+0x36>
 8004972:	e027      	b.n	80049c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004974:	4b19      	ldr	r3, [pc, #100]	; (80049dc <HAL_RCC_GetSysClockFreq+0x98>)
 8004976:	613b      	str	r3, [r7, #16]
      break;
 8004978:	e027      	b.n	80049ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	0c9b      	lsrs	r3, r3, #18
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	4a17      	ldr	r2, [pc, #92]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004984:	5cd3      	ldrb	r3, [r2, r3]
 8004986:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d010      	beq.n	80049b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004992:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	0c5b      	lsrs	r3, r3, #17
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	4a11      	ldr	r2, [pc, #68]	; (80049e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800499e:	5cd3      	ldrb	r3, [r2, r3]
 80049a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a0d      	ldr	r2, [pc, #52]	; (80049dc <HAL_RCC_GetSysClockFreq+0x98>)
 80049a6:	fb03 f202 	mul.w	r2, r3, r2
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b0:	617b      	str	r3, [r7, #20]
 80049b2:	e004      	b.n	80049be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a0c      	ldr	r2, [pc, #48]	; (80049e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049b8:	fb02 f303 	mul.w	r3, r2, r3
 80049bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	613b      	str	r3, [r7, #16]
      break;
 80049c2:	e002      	b.n	80049ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <HAL_RCC_GetSysClockFreq+0x98>)
 80049c6:	613b      	str	r3, [r7, #16]
      break;
 80049c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ca:	693b      	ldr	r3, [r7, #16]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40021000 	.word	0x40021000
 80049dc:	007a1200 	.word	0x007a1200
 80049e0:	08007b7c 	.word	0x08007b7c
 80049e4:	08007b8c 	.word	0x08007b8c
 80049e8:	003d0900 	.word	0x003d0900

080049ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f0:	4b02      	ldr	r3, [pc, #8]	; (80049fc <HAL_RCC_GetHCLKFreq+0x10>)
 80049f2:	681b      	ldr	r3, [r3, #0]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr
 80049fc:	20000004 	.word	0x20000004

08004a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a04:	f7ff fff2 	bl	80049ec <HAL_RCC_GetHCLKFreq>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	0a1b      	lsrs	r3, r3, #8
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	4903      	ldr	r1, [pc, #12]	; (8004a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a16:	5ccb      	ldrb	r3, [r1, r3]
 8004a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40021000 	.word	0x40021000
 8004a24:	08007b74 	.word	0x08007b74

08004a28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a30:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <RCC_Delay+0x34>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a0a      	ldr	r2, [pc, #40]	; (8004a60 <RCC_Delay+0x38>)
 8004a36:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3a:	0a5b      	lsrs	r3, r3, #9
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	fb02 f303 	mul.w	r3, r2, r3
 8004a42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a44:	bf00      	nop
  }
  while (Delay --);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	1e5a      	subs	r2, r3, #1
 8004a4a:	60fa      	str	r2, [r7, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1f9      	bne.n	8004a44 <RCC_Delay+0x1c>
}
 8004a50:	bf00      	nop
 8004a52:	bf00      	nop
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr
 8004a5c:	20000004 	.word	0x20000004
 8004a60:	10624dd3 	.word	0x10624dd3

08004a64 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af04      	add	r7, sp, #16
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8004a6e:	4b33      	ldr	r3, [pc, #204]	; (8004b3c <set_int_enable+0xd8>)
 8004a70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d026      	beq.n	8004ac6 <set_int_enable+0x62>
        if (enable)
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 8004a7e:	2302      	movs	r3, #2
 8004a80:	73fb      	strb	r3, [r7, #15]
 8004a82:	e001      	b.n	8004a88 <set_int_enable+0x24>
        else
            tmp = 0x00;
 8004a84:	2300      	movs	r3, #0
 8004a86:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8004a88:	4b2c      	ldr	r3, [pc, #176]	; (8004b3c <set_int_enable+0xd8>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	b299      	uxth	r1, r3
 8004a94:	4b29      	ldr	r3, [pc, #164]	; (8004b3c <set_int_enable+0xd8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	7c5b      	ldrb	r3, [r3, #17]
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	2305      	movs	r3, #5
 8004a9e:	9302      	str	r3, [sp, #8]
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	9301      	str	r3, [sp, #4]
 8004aa4:	f107 030f 	add.w	r3, r7, #15
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	2301      	movs	r3, #1
 8004aac:	4824      	ldr	r0, [pc, #144]	; (8004b40 <set_int_enable+0xdc>)
 8004aae:	f7fd f923 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <set_int_enable+0x5a>
            return -1;
 8004ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8004abc:	e03a      	b.n	8004b34 <set_int_enable+0xd0>
        st.chip_cfg.int_enable = tmp;
 8004abe:	7bfa      	ldrb	r2, [r7, #15]
 8004ac0:	4b1e      	ldr	r3, [pc, #120]	; (8004b3c <set_int_enable+0xd8>)
 8004ac2:	745a      	strb	r2, [r3, #17]
 8004ac4:	e035      	b.n	8004b32 <set_int_enable+0xce>
    } else {
        if (!st.chip_cfg.sensors)
 8004ac6:	4b1d      	ldr	r3, [pc, #116]	; (8004b3c <set_int_enable+0xd8>)
 8004ac8:	7a9b      	ldrb	r3, [r3, #10]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <set_int_enable+0x70>
            return -1;
 8004ace:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad2:	e02f      	b.n	8004b34 <set_int_enable+0xd0>
        if (enable && st.chip_cfg.int_enable)
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <set_int_enable+0x82>
 8004ada:	4b18      	ldr	r3, [pc, #96]	; (8004b3c <set_int_enable+0xd8>)
 8004adc:	7c5b      	ldrb	r3, [r3, #17]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <set_int_enable+0x82>
            return 0;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e026      	b.n	8004b34 <set_int_enable+0xd0>
        if (enable)
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <set_int_enable+0x8e>
            tmp = BIT_DATA_RDY_EN;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
 8004af0:	e001      	b.n	8004af6 <set_int_enable+0x92>
        else
            tmp = 0x00;
 8004af2:	2300      	movs	r3, #0
 8004af4:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8004af6:	4b11      	ldr	r3, [pc, #68]	; (8004b3c <set_int_enable+0xd8>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	b299      	uxth	r1, r3
 8004b02:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <set_int_enable+0xd8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	7c5b      	ldrb	r3, [r3, #17]
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	2305      	movs	r3, #5
 8004b0c:	9302      	str	r3, [sp, #8]
 8004b0e:	2301      	movs	r3, #1
 8004b10:	9301      	str	r3, [sp, #4]
 8004b12:	f107 030f 	add.w	r3, r7, #15
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	2301      	movs	r3, #1
 8004b1a:	4809      	ldr	r0, [pc, #36]	; (8004b40 <set_int_enable+0xdc>)
 8004b1c:	f7fd f8ec 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <set_int_enable+0xc8>
            return -1;
 8004b26:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2a:	e003      	b.n	8004b34 <set_int_enable+0xd0>
        st.chip_cfg.int_enable = tmp;
 8004b2c:	7bfa      	ldrb	r2, [r7, #15]
 8004b2e:	4b03      	ldr	r3, [pc, #12]	; (8004b3c <set_int_enable+0xd8>)
 8004b30:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20000010 	.word	0x20000010
 8004b40:	200000c4 	.word	0x200000c4

08004b44 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af04      	add	r7, sp, #16
 8004b4a:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
 8004b4c:	2380      	movs	r3, #128	; 0x80
 8004b4e:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8004b50:	4b59      	ldr	r3, [pc, #356]	; (8004cb8 <mpu_init+0x174>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	b299      	uxth	r1, r3
 8004b5c:	4b56      	ldr	r3, [pc, #344]	; (8004cb8 <mpu_init+0x174>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	7d5b      	ldrb	r3, [r3, #21]
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	2305      	movs	r3, #5
 8004b66:	9302      	str	r3, [sp, #8]
 8004b68:	2301      	movs	r3, #1
 8004b6a:	9301      	str	r3, [sp, #4]
 8004b6c:	f107 0308 	add.w	r3, r7, #8
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	2301      	movs	r3, #1
 8004b74:	4851      	ldr	r0, [pc, #324]	; (8004cbc <mpu_init+0x178>)
 8004b76:	f7fd f8bf 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <mpu_init+0x42>
        return -1;
 8004b80:	f04f 33ff 	mov.w	r3, #4294967295
 8004b84:	e094      	b.n	8004cb0 <mpu_init+0x16c>
    delay_ms(100);
 8004b86:	2064      	movs	r0, #100	; 0x64
 8004b88:	f7fc fc22 	bl	80013d0 <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8004b90:	4b49      	ldr	r3, [pc, #292]	; (8004cb8 <mpu_init+0x174>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	b299      	uxth	r1, r3
 8004b9c:	4b46      	ldr	r3, [pc, #280]	; (8004cb8 <mpu_init+0x174>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	7d5b      	ldrb	r3, [r3, #21]
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	2305      	movs	r3, #5
 8004ba6:	9302      	str	r3, [sp, #8]
 8004ba8:	2301      	movs	r3, #1
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	f107 0308 	add.w	r3, r7, #8
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	4841      	ldr	r0, [pc, #260]	; (8004cbc <mpu_init+0x178>)
 8004bb6:	f7fd f89f 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <mpu_init+0x82>
        return -1;
 8004bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc4:	e074      	b.n	8004cb0 <mpu_init+0x16c>

   st.chip_cfg.accel_half = 0;
 8004bc6:	4b3c      	ldr	r3, [pc, #240]	; (8004cb8 <mpu_init+0x174>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 8004bcc:	4b3a      	ldr	r3, [pc, #232]	; (8004cb8 <mpu_init+0x174>)
 8004bce:	22ff      	movs	r2, #255	; 0xff
 8004bd0:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8004bd2:	4b39      	ldr	r3, [pc, #228]	; (8004cb8 <mpu_init+0x174>)
 8004bd4:	22ff      	movs	r2, #255	; 0xff
 8004bd6:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8004bd8:	4b37      	ldr	r3, [pc, #220]	; (8004cb8 <mpu_init+0x174>)
 8004bda:	22ff      	movs	r2, #255	; 0xff
 8004bdc:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8004bde:	4b36      	ldr	r3, [pc, #216]	; (8004cb8 <mpu_init+0x174>)
 8004be0:	22ff      	movs	r2, #255	; 0xff
 8004be2:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8004be4:	4b34      	ldr	r3, [pc, #208]	; (8004cb8 <mpu_init+0x174>)
 8004be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bea:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8004bec:	4b32      	ldr	r3, [pc, #200]	; (8004cb8 <mpu_init+0x174>)
 8004bee:	22ff      	movs	r2, #255	; 0xff
 8004bf0:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8004bf2:	4b31      	ldr	r3, [pc, #196]	; (8004cb8 <mpu_init+0x174>)
 8004bf4:	22ff      	movs	r2, #255	; 0xff
 8004bf6:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8004bf8:	4b2f      	ldr	r3, [pc, #188]	; (8004cb8 <mpu_init+0x174>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 8004bfe:	4b2e      	ldr	r3, [pc, #184]	; (8004cb8 <mpu_init+0x174>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 8004c06:	4b2c      	ldr	r3, [pc, #176]	; (8004cb8 <mpu_init+0x174>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 8004c0e:	4b2a      	ldr	r3, [pc, #168]	; (8004cb8 <mpu_init+0x174>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8004c14:	4b28      	ldr	r3, [pc, #160]	; (8004cb8 <mpu_init+0x174>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8004c1a:	220c      	movs	r2, #12
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4828      	ldr	r0, [pc, #160]	; (8004cc0 <mpu_init+0x17c>)
 8004c20:	f002 ff3c 	bl	8007a9c <memset>
    st.chip_cfg.dmp_on = 0;
 8004c24:	4b24      	ldr	r3, [pc, #144]	; (8004cb8 <mpu_init+0x174>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 8004c2c:	4b22      	ldr	r3, [pc, #136]	; (8004cb8 <mpu_init+0x174>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8004c34:	4b20      	ldr	r3, [pc, #128]	; (8004cb8 <mpu_init+0x174>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 8004c3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004c3e:	f000 fa49 	bl	80050d4 <mpu_set_gyro_fsr>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <mpu_init+0x10a>
        return -1;
 8004c48:	f04f 33ff 	mov.w	r3, #4294967295
 8004c4c:	e030      	b.n	8004cb0 <mpu_init+0x16c>
    if (mpu_set_accel_fsr(2))
 8004c4e:	2002      	movs	r0, #2
 8004c50:	f000 fada 	bl	8005208 <mpu_set_accel_fsr>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <mpu_init+0x11c>
        return -1;
 8004c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c5e:	e027      	b.n	8004cb0 <mpu_init+0x16c>
    if (mpu_set_lpf(42))
 8004c60:	202a      	movs	r0, #42	; 0x2a
 8004c62:	f000 fb45 	bl	80052f0 <mpu_set_lpf>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <mpu_init+0x12e>
        return -1;
 8004c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c70:	e01e      	b.n	8004cb0 <mpu_init+0x16c>
    if (mpu_set_sample_rate(50))
 8004c72:	2032      	movs	r0, #50	; 0x32
 8004c74:	f000 fb96 	bl	80053a4 <mpu_set_sample_rate>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <mpu_init+0x140>
        return -1;
 8004c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c82:	e015      	b.n	8004cb0 <mpu_init+0x16c>
    if (mpu_configure_fifo(0))
 8004c84:	2000      	movs	r0, #0
 8004c86:	f000 fbff 	bl	8005488 <mpu_configure_fifo>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <mpu_init+0x152>
        return -1;
 8004c90:	f04f 33ff 	mov.w	r3, #4294967295
 8004c94:	e00c      	b.n	8004cb0 <mpu_init+0x16c>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 8004c96:	2000      	movs	r0, #0
 8004c98:	f000 fd82 	bl	80057a0 <mpu_set_bypass>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <mpu_init+0x164>
        return -1;
 8004ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca6:	e003      	b.n	8004cb0 <mpu_init+0x16c>
#endif

    mpu_set_sensors(0);
 8004ca8:	2000      	movs	r0, #0
 8004caa:	f000 fc3f 	bl	800552c <mpu_set_sensors>
    return 0;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	20000010 	.word	0x20000010
 8004cbc:	200000c4 	.word	0x200000c4
 8004cc0:	20000026 	.word	0x20000026

08004cc4 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b088      	sub	sp, #32
 8004cc8:	af04      	add	r7, sp, #16
 8004cca:	4603      	mov	r3, r0
 8004ccc:	80fb      	strh	r3, [r7, #6]

#if defined MPU6500
    unsigned char data;
#endif

    if (!rate) {
 8004cce:	88fb      	ldrh	r3, [r7, #6]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d126      	bne.n	8004d22 <mpu_lp_accel_mode+0x5e>
        mpu_set_int_latched(0);
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	f000 fe67 	bl	80059a8 <mpu_set_int_latched>
        tmp[0] = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 8004cde:	2307      	movs	r3, #7
 8004ce0:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8004ce2:	4b3c      	ldr	r3, [pc, #240]	; (8004dd4 <mpu_lp_accel_mode+0x110>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	b299      	uxth	r1, r3
 8004cee:	4b39      	ldr	r3, [pc, #228]	; (8004dd4 <mpu_lp_accel_mode+0x110>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	7d5b      	ldrb	r3, [r3, #21]
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	2305      	movs	r3, #5
 8004cf8:	9302      	str	r3, [sp, #8]
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	f107 030c 	add.w	r3, r7, #12
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	2301      	movs	r3, #1
 8004d06:	4834      	ldr	r0, [pc, #208]	; (8004dd8 <mpu_lp_accel_mode+0x114>)
 8004d08:	f7fc fff6 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <mpu_lp_accel_mode+0x54>
            return -1;
 8004d12:	f04f 33ff 	mov.w	r3, #4294967295
 8004d16:	e059      	b.n	8004dcc <mpu_lp_accel_mode+0x108>
        st.chip_cfg.lp_accel_mode = 0;
 8004d18:	4b2e      	ldr	r3, [pc, #184]	; (8004dd4 <mpu_lp_accel_mode+0x110>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	751a      	strb	r2, [r3, #20]
        return 0;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e054      	b.n	8004dcc <mpu_lp_accel_mode+0x108>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8004d22:	2001      	movs	r0, #1
 8004d24:	f000 fe40 	bl	80059a8 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 8004d28:	2320      	movs	r3, #32
 8004d2a:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 8004d2c:	88fb      	ldrh	r3, [r7, #6]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d105      	bne.n	8004d3e <mpu_lp_accel_mode+0x7a>
        tmp[1] = INV_LPA_1_25HZ;
 8004d32:	2300      	movs	r3, #0
 8004d34:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8004d36:	2005      	movs	r0, #5
 8004d38:	f000 fada 	bl	80052f0 <mpu_set_lpf>
 8004d3c:	e016      	b.n	8004d6c <mpu_lp_accel_mode+0xa8>
    } else if (rate <= 5) {
 8004d3e:	88fb      	ldrh	r3, [r7, #6]
 8004d40:	2b05      	cmp	r3, #5
 8004d42:	d805      	bhi.n	8004d50 <mpu_lp_accel_mode+0x8c>
        tmp[1] = INV_LPA_5HZ;
 8004d44:	2301      	movs	r3, #1
 8004d46:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8004d48:	2005      	movs	r0, #5
 8004d4a:	f000 fad1 	bl	80052f0 <mpu_set_lpf>
 8004d4e:	e00d      	b.n	8004d6c <mpu_lp_accel_mode+0xa8>
    } else if (rate <= 20) {
 8004d50:	88fb      	ldrh	r3, [r7, #6]
 8004d52:	2b14      	cmp	r3, #20
 8004d54:	d805      	bhi.n	8004d62 <mpu_lp_accel_mode+0x9e>
        tmp[1] = INV_LPA_20HZ;
 8004d56:	2302      	movs	r3, #2
 8004d58:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 8004d5a:	200a      	movs	r0, #10
 8004d5c:	f000 fac8 	bl	80052f0 <mpu_set_lpf>
 8004d60:	e004      	b.n	8004d6c <mpu_lp_accel_mode+0xa8>
    } else {
        tmp[1] = INV_LPA_40HZ;
 8004d62:	2303      	movs	r3, #3
 8004d64:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 8004d66:	2014      	movs	r0, #20
 8004d68:	f000 fac2 	bl	80052f0 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 8004d6c:	7b7b      	ldrb	r3, [r7, #13]
 8004d6e:	019b      	lsls	r3, r3, #6
 8004d70:	b25b      	sxtb	r3, r3
 8004d72:	f043 0307 	orr.w	r3, r3, #7
 8004d76:	b25b      	sxtb	r3, r3
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8004d7c:	4b15      	ldr	r3, [pc, #84]	; (8004dd4 <mpu_lp_accel_mode+0x110>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	b299      	uxth	r1, r3
 8004d88:	4b12      	ldr	r3, [pc, #72]	; (8004dd4 <mpu_lp_accel_mode+0x110>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	7d5b      	ldrb	r3, [r3, #21]
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	2305      	movs	r3, #5
 8004d92:	9302      	str	r3, [sp, #8]
 8004d94:	2302      	movs	r3, #2
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	f107 030c 	add.w	r3, r7, #12
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	2301      	movs	r3, #1
 8004da0:	480d      	ldr	r0, [pc, #52]	; (8004dd8 <mpu_lp_accel_mode+0x114>)
 8004da2:	f7fc ffa9 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <mpu_lp_accel_mode+0xee>
        return -1;
 8004dac:	f04f 33ff 	mov.w	r3, #4294967295
 8004db0:	e00c      	b.n	8004dcc <mpu_lp_accel_mode+0x108>
            
    data = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8004db2:	4b08      	ldr	r3, [pc, #32]	; (8004dd4 <mpu_lp_accel_mode+0x110>)
 8004db4:	2208      	movs	r2, #8
 8004db6:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8004db8:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <mpu_lp_accel_mode+0x110>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8004dbe:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <mpu_lp_accel_mode+0x110>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	f000 fb5f 	bl	8005488 <mpu_configure_fifo>

    return 0;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	20000010 	.word	0x20000010
 8004dd8:	200000c4 	.word	0x200000c4

08004ddc <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af04      	add	r7, sp, #16
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8004de2:	4b99      	ldr	r3, [pc, #612]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004de4:	7a9b      	ldrb	r3, [r3, #10]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d102      	bne.n	8004df0 <mpu_reset_fifo+0x14>
        return -1;
 8004dea:	f04f 33ff 	mov.w	r3, #4294967295
 8004dee:	e166      	b.n	80050be <mpu_reset_fifo+0x2e2>

    data = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8004df4:	4b94      	ldr	r3, [pc, #592]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	b299      	uxth	r1, r3
 8004e00:	4b91      	ldr	r3, [pc, #580]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	7c5b      	ldrb	r3, [r3, #17]
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	2305      	movs	r3, #5
 8004e0a:	9302      	str	r3, [sp, #8]
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	9301      	str	r3, [sp, #4]
 8004e10:	1dfb      	adds	r3, r7, #7
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	2301      	movs	r3, #1
 8004e16:	488d      	ldr	r0, [pc, #564]	; (800504c <mpu_reset_fifo+0x270>)
 8004e18:	f7fc ff6e 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <mpu_reset_fifo+0x4c>
        return -1;
 8004e22:	f04f 33ff 	mov.w	r3, #4294967295
 8004e26:	e14a      	b.n	80050be <mpu_reset_fifo+0x2e2>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8004e28:	4b87      	ldr	r3, [pc, #540]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	b299      	uxth	r1, r3
 8004e34:	4b84      	ldr	r3, [pc, #528]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	795b      	ldrb	r3, [r3, #5]
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	2305      	movs	r3, #5
 8004e3e:	9302      	str	r3, [sp, #8]
 8004e40:	2301      	movs	r3, #1
 8004e42:	9301      	str	r3, [sp, #4]
 8004e44:	1dfb      	adds	r3, r7, #7
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	2301      	movs	r3, #1
 8004e4a:	4880      	ldr	r0, [pc, #512]	; (800504c <mpu_reset_fifo+0x270>)
 8004e4c:	f7fc ff54 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <mpu_reset_fifo+0x80>
        return -1;
 8004e56:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5a:	e130      	b.n	80050be <mpu_reset_fifo+0x2e2>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8004e5c:	4b7a      	ldr	r3, [pc, #488]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	b299      	uxth	r1, r3
 8004e68:	4b77      	ldr	r3, [pc, #476]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	791b      	ldrb	r3, [r3, #4]
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	2305      	movs	r3, #5
 8004e72:	9302      	str	r3, [sp, #8]
 8004e74:	2301      	movs	r3, #1
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	1dfb      	adds	r3, r7, #7
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	4873      	ldr	r0, [pc, #460]	; (800504c <mpu_reset_fifo+0x270>)
 8004e80:	f7fc ff3a 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <mpu_reset_fifo+0xb4>
        return -1;
 8004e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e8e:	e116      	b.n	80050be <mpu_reset_fifo+0x2e2>

    if (st.chip_cfg.dmp_on) {
 8004e90:	4b6d      	ldr	r3, [pc, #436]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004e92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 8086 	beq.w	8004fa8 <mpu_reset_fifo+0x1cc>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8004e9c:	230c      	movs	r3, #12
 8004e9e:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8004ea0:	4b69      	ldr	r3, [pc, #420]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	b299      	uxth	r1, r3
 8004eac:	4b66      	ldr	r3, [pc, #408]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	791b      	ldrb	r3, [r3, #4]
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	2305      	movs	r3, #5
 8004eb6:	9302      	str	r3, [sp, #8]
 8004eb8:	2301      	movs	r3, #1
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	1dfb      	adds	r3, r7, #7
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	4862      	ldr	r0, [pc, #392]	; (800504c <mpu_reset_fifo+0x270>)
 8004ec4:	f7fc ff18 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <mpu_reset_fifo+0xf8>
            return -1;
 8004ece:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed2:	e0f4      	b.n	80050be <mpu_reset_fifo+0x2e2>
        delay_ms(50);
 8004ed4:	2032      	movs	r0, #50	; 0x32
 8004ed6:	f7fc fa7b 	bl	80013d0 <HAL_Delay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8004eda:	23c0      	movs	r3, #192	; 0xc0
 8004edc:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8004ede:	4b5a      	ldr	r3, [pc, #360]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004ee0:	7a9b      	ldrb	r3, [r3, #10]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d004      	beq.n	8004ef4 <mpu_reset_fifo+0x118>
            data |= BIT_AUX_IF_EN;
 8004eea:	79fb      	ldrb	r3, [r7, #7]
 8004eec:	f043 0320 	orr.w	r3, r3, #32
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8004ef4:	4b54      	ldr	r3, [pc, #336]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	b299      	uxth	r1, r3
 8004f00:	4b51      	ldr	r3, [pc, #324]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	791b      	ldrb	r3, [r3, #4]
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	2305      	movs	r3, #5
 8004f0a:	9302      	str	r3, [sp, #8]
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	9301      	str	r3, [sp, #4]
 8004f10:	1dfb      	adds	r3, r7, #7
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	2301      	movs	r3, #1
 8004f16:	484d      	ldr	r0, [pc, #308]	; (800504c <mpu_reset_fifo+0x270>)
 8004f18:	f7fc feee 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <mpu_reset_fifo+0x14c>
            return -1;
 8004f22:	f04f 33ff 	mov.w	r3, #4294967295
 8004f26:	e0ca      	b.n	80050be <mpu_reset_fifo+0x2e2>
        if (st.chip_cfg.int_enable)
 8004f28:	4b47      	ldr	r3, [pc, #284]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004f2a:	7c5b      	ldrb	r3, [r3, #17]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <mpu_reset_fifo+0x15a>
            data = BIT_DMP_INT_EN;
 8004f30:	2302      	movs	r3, #2
 8004f32:	71fb      	strb	r3, [r7, #7]
 8004f34:	e001      	b.n	8004f3a <mpu_reset_fifo+0x15e>
        else
            data = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8004f3a:	4b43      	ldr	r3, [pc, #268]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	b299      	uxth	r1, r3
 8004f46:	4b40      	ldr	r3, [pc, #256]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	7c5b      	ldrb	r3, [r3, #17]
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	2305      	movs	r3, #5
 8004f50:	9302      	str	r3, [sp, #8]
 8004f52:	2301      	movs	r3, #1
 8004f54:	9301      	str	r3, [sp, #4]
 8004f56:	1dfb      	adds	r3, r7, #7
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	483b      	ldr	r0, [pc, #236]	; (800504c <mpu_reset_fifo+0x270>)
 8004f5e:	f7fc fecb 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <mpu_reset_fifo+0x192>
            return -1;
 8004f68:	f04f 33ff 	mov.w	r3, #4294967295
 8004f6c:	e0a7      	b.n	80050be <mpu_reset_fifo+0x2e2>
        data = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8004f72:	4b35      	ldr	r3, [pc, #212]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	b299      	uxth	r1, r3
 8004f7e:	4b32      	ldr	r3, [pc, #200]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	795b      	ldrb	r3, [r3, #5]
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	2305      	movs	r3, #5
 8004f88:	9302      	str	r3, [sp, #8]
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	9301      	str	r3, [sp, #4]
 8004f8e:	1dfb      	adds	r3, r7, #7
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	2301      	movs	r3, #1
 8004f94:	482d      	ldr	r0, [pc, #180]	; (800504c <mpu_reset_fifo+0x270>)
 8004f96:	f7fc feaf 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 808d 	beq.w	80050bc <mpu_reset_fifo+0x2e0>
            return -1;
 8004fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa6:	e08a      	b.n	80050be <mpu_reset_fifo+0x2e2>
    } else {
        data = BIT_FIFO_RST;
 8004fa8:	2304      	movs	r3, #4
 8004faa:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8004fac:	4b26      	ldr	r3, [pc, #152]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	b299      	uxth	r1, r3
 8004fb8:	4b23      	ldr	r3, [pc, #140]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	791b      	ldrb	r3, [r3, #4]
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	2305      	movs	r3, #5
 8004fc2:	9302      	str	r3, [sp, #8]
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	9301      	str	r3, [sp, #4]
 8004fc8:	1dfb      	adds	r3, r7, #7
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	2301      	movs	r3, #1
 8004fce:	481f      	ldr	r0, [pc, #124]	; (800504c <mpu_reset_fifo+0x270>)
 8004fd0:	f7fc fe92 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <mpu_reset_fifo+0x204>
            return -1;
 8004fda:	f04f 33ff 	mov.w	r3, #4294967295
 8004fde:	e06e      	b.n	80050be <mpu_reset_fifo+0x2e2>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8004fe0:	4b19      	ldr	r3, [pc, #100]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004fe2:	7c9b      	ldrb	r3, [r3, #18]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d105      	bne.n	8004ff4 <mpu_reset_fifo+0x218>
 8004fe8:	4b17      	ldr	r3, [pc, #92]	; (8005048 <mpu_reset_fifo+0x26c>)
 8004fea:	7a9b      	ldrb	r3, [r3, #10]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d102      	bne.n	8004ffa <mpu_reset_fifo+0x21e>
            data = BIT_FIFO_EN;
 8004ff4:	2340      	movs	r3, #64	; 0x40
 8004ff6:	71fb      	strb	r3, [r7, #7]
 8004ff8:	e001      	b.n	8004ffe <mpu_reset_fifo+0x222>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8004ffa:	2360      	movs	r3, #96	; 0x60
 8004ffc:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8004ffe:	4b12      	ldr	r3, [pc, #72]	; (8005048 <mpu_reset_fifo+0x26c>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	b29b      	uxth	r3, r3
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	b299      	uxth	r1, r3
 800500a:	4b0f      	ldr	r3, [pc, #60]	; (8005048 <mpu_reset_fifo+0x26c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	791b      	ldrb	r3, [r3, #4]
 8005010:	b29a      	uxth	r2, r3
 8005012:	2305      	movs	r3, #5
 8005014:	9302      	str	r3, [sp, #8]
 8005016:	2301      	movs	r3, #1
 8005018:	9301      	str	r3, [sp, #4]
 800501a:	1dfb      	adds	r3, r7, #7
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	2301      	movs	r3, #1
 8005020:	480a      	ldr	r0, [pc, #40]	; (800504c <mpu_reset_fifo+0x270>)
 8005022:	f7fc fe69 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <mpu_reset_fifo+0x256>
            return -1;
 800502c:	f04f 33ff 	mov.w	r3, #4294967295
 8005030:	e045      	b.n	80050be <mpu_reset_fifo+0x2e2>
        delay_ms(50);
 8005032:	2032      	movs	r0, #50	; 0x32
 8005034:	f7fc f9cc 	bl	80013d0 <HAL_Delay>
        if (st.chip_cfg.int_enable)
 8005038:	4b03      	ldr	r3, [pc, #12]	; (8005048 <mpu_reset_fifo+0x26c>)
 800503a:	7c5b      	ldrb	r3, [r3, #17]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d007      	beq.n	8005050 <mpu_reset_fifo+0x274>
            data = BIT_DATA_RDY_EN;
 8005040:	2301      	movs	r3, #1
 8005042:	71fb      	strb	r3, [r7, #7]
 8005044:	e006      	b.n	8005054 <mpu_reset_fifo+0x278>
 8005046:	bf00      	nop
 8005048:	20000010 	.word	0x20000010
 800504c:	200000c4 	.word	0x200000c4
        else
            data = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8005054:	4b1c      	ldr	r3, [pc, #112]	; (80050c8 <mpu_reset_fifo+0x2ec>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	b29b      	uxth	r3, r3
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	b299      	uxth	r1, r3
 8005060:	4b19      	ldr	r3, [pc, #100]	; (80050c8 <mpu_reset_fifo+0x2ec>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	7c5b      	ldrb	r3, [r3, #17]
 8005066:	b29a      	uxth	r2, r3
 8005068:	2305      	movs	r3, #5
 800506a:	9302      	str	r3, [sp, #8]
 800506c:	2301      	movs	r3, #1
 800506e:	9301      	str	r3, [sp, #4]
 8005070:	1dfb      	adds	r3, r7, #7
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	2301      	movs	r3, #1
 8005076:	4815      	ldr	r0, [pc, #84]	; (80050cc <mpu_reset_fifo+0x2f0>)
 8005078:	f7fc fe3e 	bl	8001cf8 <HAL_I2C_Mem_Write>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <mpu_reset_fifo+0x2ac>
            return -1;
 8005082:	f04f 33ff 	mov.w	r3, #4294967295
 8005086:	e01a      	b.n	80050be <mpu_reset_fifo+0x2e2>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8005088:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <mpu_reset_fifo+0x2ec>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	b29b      	uxth	r3, r3
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	b299      	uxth	r1, r3
 8005094:	4b0c      	ldr	r3, [pc, #48]	; (80050c8 <mpu_reset_fifo+0x2ec>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	795b      	ldrb	r3, [r3, #5]
 800509a:	b29a      	uxth	r2, r3
 800509c:	2305      	movs	r3, #5
 800509e:	9302      	str	r3, [sp, #8]
 80050a0:	2301      	movs	r3, #1
 80050a2:	9301      	str	r3, [sp, #4]
 80050a4:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <mpu_reset_fifo+0x2f4>)
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	2301      	movs	r3, #1
 80050aa:	4808      	ldr	r0, [pc, #32]	; (80050cc <mpu_reset_fifo+0x2f0>)
 80050ac:	f7fc fe24 	bl	8001cf8 <HAL_I2C_Mem_Write>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <mpu_reset_fifo+0x2e0>
            return -1;
 80050b6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ba:	e000      	b.n	80050be <mpu_reset_fifo+0x2e2>
    }
    return 0;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000010 	.word	0x20000010
 80050cc:	200000c4 	.word	0x200000c4
 80050d0:	20000020 	.word	0x20000020

080050d4 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af04      	add	r7, sp, #16
 80050da:	4603      	mov	r3, r0
 80050dc:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80050de:	4b2b      	ldr	r3, [pc, #172]	; (800518c <mpu_set_gyro_fsr+0xb8>)
 80050e0:	7a9b      	ldrb	r3, [r3, #10]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d102      	bne.n	80050ec <mpu_set_gyro_fsr+0x18>
        return -1;
 80050e6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ea:	e04b      	b.n	8005184 <mpu_set_gyro_fsr+0xb0>

    switch (fsr) {
 80050ec:	88fb      	ldrh	r3, [r7, #6]
 80050ee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80050f2:	d017      	beq.n	8005124 <mpu_set_gyro_fsr+0x50>
 80050f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80050f8:	dc17      	bgt.n	800512a <mpu_set_gyro_fsr+0x56>
 80050fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050fe:	d00e      	beq.n	800511e <mpu_set_gyro_fsr+0x4a>
 8005100:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005104:	dc11      	bgt.n	800512a <mpu_set_gyro_fsr+0x56>
 8005106:	2bfa      	cmp	r3, #250	; 0xfa
 8005108:	d003      	beq.n	8005112 <mpu_set_gyro_fsr+0x3e>
 800510a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800510e:	d003      	beq.n	8005118 <mpu_set_gyro_fsr+0x44>
 8005110:	e00b      	b.n	800512a <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8005112:	2300      	movs	r3, #0
 8005114:	73fb      	strb	r3, [r7, #15]
        break;
 8005116:	e00b      	b.n	8005130 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 8005118:	2308      	movs	r3, #8
 800511a:	73fb      	strb	r3, [r7, #15]
        break;
 800511c:	e008      	b.n	8005130 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 800511e:	2310      	movs	r3, #16
 8005120:	73fb      	strb	r3, [r7, #15]
        break;
 8005122:	e005      	b.n	8005130 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8005124:	2318      	movs	r3, #24
 8005126:	73fb      	strb	r3, [r7, #15]
        break;
 8005128:	e002      	b.n	8005130 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 800512a:	f04f 33ff 	mov.w	r3, #4294967295
 800512e:	e029      	b.n	8005184 <mpu_set_gyro_fsr+0xb0>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8005130:	4b16      	ldr	r3, [pc, #88]	; (800518c <mpu_set_gyro_fsr+0xb8>)
 8005132:	7a1a      	ldrb	r2, [r3, #8]
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	08db      	lsrs	r3, r3, #3
 8005138:	b2db      	uxtb	r3, r3
 800513a:	429a      	cmp	r2, r3
 800513c:	d101      	bne.n	8005142 <mpu_set_gyro_fsr+0x6e>
        return 0;
 800513e:	2300      	movs	r3, #0
 8005140:	e020      	b.n	8005184 <mpu_set_gyro_fsr+0xb0>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8005142:	4b12      	ldr	r3, [pc, #72]	; (800518c <mpu_set_gyro_fsr+0xb8>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	b299      	uxth	r1, r3
 800514e:	4b0f      	ldr	r3, [pc, #60]	; (800518c <mpu_set_gyro_fsr+0xb8>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	799b      	ldrb	r3, [r3, #6]
 8005154:	b29a      	uxth	r2, r3
 8005156:	2305      	movs	r3, #5
 8005158:	9302      	str	r3, [sp, #8]
 800515a:	2301      	movs	r3, #1
 800515c:	9301      	str	r3, [sp, #4]
 800515e:	f107 030f 	add.w	r3, r7, #15
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2301      	movs	r3, #1
 8005166:	480a      	ldr	r0, [pc, #40]	; (8005190 <mpu_set_gyro_fsr+0xbc>)
 8005168:	f7fc fdc6 	bl	8001cf8 <HAL_I2C_Mem_Write>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <mpu_set_gyro_fsr+0xa4>
        return -1;
 8005172:	f04f 33ff 	mov.w	r3, #4294967295
 8005176:	e005      	b.n	8005184 <mpu_set_gyro_fsr+0xb0>
    st.chip_cfg.gyro_fsr = data >> 3;
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	08db      	lsrs	r3, r3, #3
 800517c:	b2da      	uxtb	r2, r3
 800517e:	4b03      	ldr	r3, [pc, #12]	; (800518c <mpu_set_gyro_fsr+0xb8>)
 8005180:	721a      	strb	r2, [r3, #8]
    return 0;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20000010 	.word	0x20000010
 8005190:	200000c4 	.word	0x200000c4

08005194 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 800519c:	4b19      	ldr	r3, [pc, #100]	; (8005204 <mpu_get_accel_fsr+0x70>)
 800519e:	7a5b      	ldrb	r3, [r3, #9]
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d81b      	bhi.n	80051dc <mpu_get_accel_fsr+0x48>
 80051a4:	a201      	add	r2, pc, #4	; (adr r2, 80051ac <mpu_get_accel_fsr+0x18>)
 80051a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051aa:	bf00      	nop
 80051ac:	080051bd 	.word	0x080051bd
 80051b0:	080051c5 	.word	0x080051c5
 80051b4:	080051cd 	.word	0x080051cd
 80051b8:	080051d5 	.word	0x080051d5
    case INV_FSR_2G:
        fsr[0] = 2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	701a      	strb	r2, [r3, #0]
        break;
 80051c2:	e00e      	b.n	80051e2 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2204      	movs	r2, #4
 80051c8:	701a      	strb	r2, [r3, #0]
        break;
 80051ca:	e00a      	b.n	80051e2 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2208      	movs	r2, #8
 80051d0:	701a      	strb	r2, [r3, #0]
        break;
 80051d2:	e006      	b.n	80051e2 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2210      	movs	r2, #16
 80051d8:	701a      	strb	r2, [r3, #0]
        break;
 80051da:	e002      	b.n	80051e2 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 80051dc:	f04f 33ff 	mov.w	r3, #4294967295
 80051e0:	e00a      	b.n	80051f8 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 80051e2:	4b08      	ldr	r3, [pc, #32]	; (8005204 <mpu_get_accel_fsr+0x70>)
 80051e4:	7cdb      	ldrb	r3, [r3, #19]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d005      	beq.n	80051f6 <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	701a      	strb	r2, [r3, #0]
    return 0;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	20000010 	.word	0x20000010

08005208 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af04      	add	r7, sp, #16
 800520e:	4603      	mov	r3, r0
 8005210:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8005212:	4b35      	ldr	r3, [pc, #212]	; (80052e8 <mpu_set_accel_fsr+0xe0>)
 8005214:	7a9b      	ldrb	r3, [r3, #10]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d102      	bne.n	8005220 <mpu_set_accel_fsr+0x18>
        return -1;
 800521a:	f04f 33ff 	mov.w	r3, #4294967295
 800521e:	e05e      	b.n	80052de <mpu_set_accel_fsr+0xd6>

    switch (fsr) {
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	3b02      	subs	r3, #2
 8005224:	2b0e      	cmp	r3, #14
 8005226:	d82d      	bhi.n	8005284 <mpu_set_accel_fsr+0x7c>
 8005228:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <mpu_set_accel_fsr+0x28>)
 800522a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522e:	bf00      	nop
 8005230:	0800526d 	.word	0x0800526d
 8005234:	08005285 	.word	0x08005285
 8005238:	08005273 	.word	0x08005273
 800523c:	08005285 	.word	0x08005285
 8005240:	08005285 	.word	0x08005285
 8005244:	08005285 	.word	0x08005285
 8005248:	08005279 	.word	0x08005279
 800524c:	08005285 	.word	0x08005285
 8005250:	08005285 	.word	0x08005285
 8005254:	08005285 	.word	0x08005285
 8005258:	08005285 	.word	0x08005285
 800525c:	08005285 	.word	0x08005285
 8005260:	08005285 	.word	0x08005285
 8005264:	08005285 	.word	0x08005285
 8005268:	0800527f 	.word	0x0800527f
    case 2:
        data = INV_FSR_2G << 3;
 800526c:	2300      	movs	r3, #0
 800526e:	73fb      	strb	r3, [r7, #15]
        break;
 8005270:	e00b      	b.n	800528a <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 8005272:	2308      	movs	r3, #8
 8005274:	73fb      	strb	r3, [r7, #15]
        break;
 8005276:	e008      	b.n	800528a <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 8005278:	2310      	movs	r3, #16
 800527a:	73fb      	strb	r3, [r7, #15]
        break;
 800527c:	e005      	b.n	800528a <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 800527e:	2318      	movs	r3, #24
 8005280:	73fb      	strb	r3, [r7, #15]
        break;
 8005282:	e002      	b.n	800528a <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 8005284:	f04f 33ff 	mov.w	r3, #4294967295
 8005288:	e029      	b.n	80052de <mpu_set_accel_fsr+0xd6>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 800528a:	4b17      	ldr	r3, [pc, #92]	; (80052e8 <mpu_set_accel_fsr+0xe0>)
 800528c:	7a5a      	ldrb	r2, [r3, #9]
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	08db      	lsrs	r3, r3, #3
 8005292:	b2db      	uxtb	r3, r3
 8005294:	429a      	cmp	r2, r3
 8005296:	d101      	bne.n	800529c <mpu_set_accel_fsr+0x94>
        return 0;
 8005298:	2300      	movs	r3, #0
 800529a:	e020      	b.n	80052de <mpu_set_accel_fsr+0xd6>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 800529c:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <mpu_set_accel_fsr+0xe0>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	b299      	uxth	r1, r3
 80052a8:	4b0f      	ldr	r3, [pc, #60]	; (80052e8 <mpu_set_accel_fsr+0xe0>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	79db      	ldrb	r3, [r3, #7]
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	2305      	movs	r3, #5
 80052b2:	9302      	str	r3, [sp, #8]
 80052b4:	2301      	movs	r3, #1
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	f107 030f 	add.w	r3, r7, #15
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	2301      	movs	r3, #1
 80052c0:	480a      	ldr	r0, [pc, #40]	; (80052ec <mpu_set_accel_fsr+0xe4>)
 80052c2:	f7fc fd19 	bl	8001cf8 <HAL_I2C_Mem_Write>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <mpu_set_accel_fsr+0xca>
        return -1;
 80052cc:	f04f 33ff 	mov.w	r3, #4294967295
 80052d0:	e005      	b.n	80052de <mpu_set_accel_fsr+0xd6>
    st.chip_cfg.accel_fsr = data >> 3;
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	08db      	lsrs	r3, r3, #3
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <mpu_set_accel_fsr+0xe0>)
 80052da:	725a      	strb	r2, [r3, #9]
    return 0;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20000010 	.word	0x20000010
 80052ec:	200000c4 	.word	0x200000c4

080052f0 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af04      	add	r7, sp, #16
 80052f6:	4603      	mov	r3, r0
 80052f8:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80052fa:	4b28      	ldr	r3, [pc, #160]	; (800539c <mpu_set_lpf+0xac>)
 80052fc:	7a9b      	ldrb	r3, [r3, #10]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d102      	bne.n	8005308 <mpu_set_lpf+0x18>
        return -1;
 8005302:	f04f 33ff 	mov.w	r3, #4294967295
 8005306:	e045      	b.n	8005394 <mpu_set_lpf+0xa4>

    if (lpf >= 188)
 8005308:	88fb      	ldrh	r3, [r7, #6]
 800530a:	2bbb      	cmp	r3, #187	; 0xbb
 800530c:	d902      	bls.n	8005314 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 800530e:	2301      	movs	r3, #1
 8005310:	73fb      	strb	r3, [r7, #15]
 8005312:	e019      	b.n	8005348 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8005314:	88fb      	ldrh	r3, [r7, #6]
 8005316:	2b61      	cmp	r3, #97	; 0x61
 8005318:	d902      	bls.n	8005320 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 800531a:	2302      	movs	r3, #2
 800531c:	73fb      	strb	r3, [r7, #15]
 800531e:	e013      	b.n	8005348 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8005320:	88fb      	ldrh	r3, [r7, #6]
 8005322:	2b29      	cmp	r3, #41	; 0x29
 8005324:	d902      	bls.n	800532c <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 8005326:	2303      	movs	r3, #3
 8005328:	73fb      	strb	r3, [r7, #15]
 800532a:	e00d      	b.n	8005348 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 800532c:	88fb      	ldrh	r3, [r7, #6]
 800532e:	2b13      	cmp	r3, #19
 8005330:	d902      	bls.n	8005338 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8005332:	2304      	movs	r3, #4
 8005334:	73fb      	strb	r3, [r7, #15]
 8005336:	e007      	b.n	8005348 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8005338:	88fb      	ldrh	r3, [r7, #6]
 800533a:	2b09      	cmp	r3, #9
 800533c:	d902      	bls.n	8005344 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 800533e:	2305      	movs	r3, #5
 8005340:	73fb      	strb	r3, [r7, #15]
 8005342:	e001      	b.n	8005348 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8005344:	2306      	movs	r3, #6
 8005346:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 8005348:	4b14      	ldr	r3, [pc, #80]	; (800539c <mpu_set_lpf+0xac>)
 800534a:	7ada      	ldrb	r2, [r3, #11]
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	429a      	cmp	r2, r3
 8005350:	d101      	bne.n	8005356 <mpu_set_lpf+0x66>
        return 0;
 8005352:	2300      	movs	r3, #0
 8005354:	e01e      	b.n	8005394 <mpu_set_lpf+0xa4>

    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8005356:	4b11      	ldr	r3, [pc, #68]	; (800539c <mpu_set_lpf+0xac>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	b29b      	uxth	r3, r3
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	b299      	uxth	r1, r3
 8005362:	4b0e      	ldr	r3, [pc, #56]	; (800539c <mpu_set_lpf+0xac>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	789b      	ldrb	r3, [r3, #2]
 8005368:	b29a      	uxth	r2, r3
 800536a:	2305      	movs	r3, #5
 800536c:	9302      	str	r3, [sp, #8]
 800536e:	2301      	movs	r3, #1
 8005370:	9301      	str	r3, [sp, #4]
 8005372:	f107 030f 	add.w	r3, r7, #15
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	2301      	movs	r3, #1
 800537a:	4809      	ldr	r0, [pc, #36]	; (80053a0 <mpu_set_lpf+0xb0>)
 800537c:	f7fc fcbc 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <mpu_set_lpf+0x9c>
        return -1;
 8005386:	f04f 33ff 	mov.w	r3, #4294967295
 800538a:	e003      	b.n	8005394 <mpu_set_lpf+0xa4>
    data = BIT_FIFO_SIZE_1024 | data;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, &data))
            return -1;
#endif

    st.chip_cfg.lpf = data;
 800538c:	7bfa      	ldrb	r2, [r7, #15]
 800538e:	4b03      	ldr	r3, [pc, #12]	; (800539c <mpu_set_lpf+0xac>)
 8005390:	72da      	strb	r2, [r3, #11]
    return 0;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20000010 	.word	0x20000010
 80053a0:	200000c4 	.word	0x200000c4

080053a4 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af04      	add	r7, sp, #16
 80053aa:	4603      	mov	r3, r0
 80053ac:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80053ae:	4b34      	ldr	r3, [pc, #208]	; (8005480 <mpu_set_sample_rate+0xdc>)
 80053b0:	7a9b      	ldrb	r3, [r3, #10]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d102      	bne.n	80053bc <mpu_set_sample_rate+0x18>
        return -1;
 80053b6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ba:	e05c      	b.n	8005476 <mpu_set_sample_rate+0xd2>

    if (st.chip_cfg.dmp_on)
 80053bc:	4b30      	ldr	r3, [pc, #192]	; (8005480 <mpu_set_sample_rate+0xdc>)
 80053be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <mpu_set_sample_rate+0x28>
        return -1;
 80053c6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ca:	e054      	b.n	8005476 <mpu_set_sample_rate+0xd2>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 80053cc:	4b2c      	ldr	r3, [pc, #176]	; (8005480 <mpu_set_sample_rate+0xdc>)
 80053ce:	7d1b      	ldrb	r3, [r3, #20]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00e      	beq.n	80053f2 <mpu_set_sample_rate+0x4e>
            if (rate && (rate <= 40)) {
 80053d4:	88fb      	ldrh	r3, [r7, #6]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d008      	beq.n	80053ec <mpu_set_sample_rate+0x48>
 80053da:	88fb      	ldrh	r3, [r7, #6]
 80053dc:	2b28      	cmp	r3, #40	; 0x28
 80053de:	d805      	bhi.n	80053ec <mpu_set_sample_rate+0x48>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 80053e0:	88fb      	ldrh	r3, [r7, #6]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff fc6e 	bl	8004cc4 <mpu_lp_accel_mode>
                return 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	e044      	b.n	8005476 <mpu_set_sample_rate+0xd2>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 80053ec:	2000      	movs	r0, #0
 80053ee:	f7ff fc69 	bl	8004cc4 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 80053f2:	88fb      	ldrh	r3, [r7, #6]
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d802      	bhi.n	80053fe <mpu_set_sample_rate+0x5a>
            rate = 4;
 80053f8:	2304      	movs	r3, #4
 80053fa:	80fb      	strh	r3, [r7, #6]
 80053fc:	e006      	b.n	800540c <mpu_set_sample_rate+0x68>
        else if (rate > 1000)
 80053fe:	88fb      	ldrh	r3, [r7, #6]
 8005400:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005404:	d902      	bls.n	800540c <mpu_set_sample_rate+0x68>
            rate = 1000;
 8005406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800540a:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005412:	fb92 f3f3 	sdiv	r3, r2, r3
 8005416:	b2db      	uxtb	r3, r3
 8005418:	3b01      	subs	r3, #1
 800541a:	b2db      	uxtb	r3, r3
 800541c:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 800541e:	4b18      	ldr	r3, [pc, #96]	; (8005480 <mpu_set_sample_rate+0xdc>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	b29b      	uxth	r3, r3
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	b299      	uxth	r1, r3
 800542a:	4b15      	ldr	r3, [pc, #84]	; (8005480 <mpu_set_sample_rate+0xdc>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	785b      	ldrb	r3, [r3, #1]
 8005430:	b29a      	uxth	r2, r3
 8005432:	2305      	movs	r3, #5
 8005434:	9302      	str	r3, [sp, #8]
 8005436:	2301      	movs	r3, #1
 8005438:	9301      	str	r3, [sp, #4]
 800543a:	f107 030f 	add.w	r3, r7, #15
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	2301      	movs	r3, #1
 8005442:	4810      	ldr	r0, [pc, #64]	; (8005484 <mpu_set_sample_rate+0xe0>)
 8005444:	f7fc fc58 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <mpu_set_sample_rate+0xb0>
            return -1;
 800544e:	f04f 33ff 	mov.w	r3, #4294967295
 8005452:	e010      	b.n	8005476 <mpu_set_sample_rate+0xd2>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	3301      	adds	r3, #1
 8005458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800545c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005460:	b29a      	uxth	r2, r3
 8005462:	4b07      	ldr	r3, [pc, #28]	; (8005480 <mpu_set_sample_rate+0xdc>)
 8005464:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8005466:	4b06      	ldr	r3, [pc, #24]	; (8005480 <mpu_set_sample_rate+0xdc>)
 8005468:	89db      	ldrh	r3, [r3, #14]
 800546a:	085b      	lsrs	r3, r3, #1
 800546c:	b29b      	uxth	r3, r3
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff ff3e 	bl	80052f0 <mpu_set_lpf>
        return 0;
 8005474:	2300      	movs	r3, #0
    }
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	20000010 	.word	0x20000010
 8005484:	200000c4 	.word	0x200000c4

08005488 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	4603      	mov	r3, r0
 8005490:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8005492:	2300      	movs	r3, #0
 8005494:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	f023 0301 	bic.w	r3, r3, #1
 800549c:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 800549e:	4b22      	ldr	r3, [pc, #136]	; (8005528 <mpu_configure_fifo+0xa0>)
 80054a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <mpu_configure_fifo+0x24>
        return 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	e038      	b.n	800551e <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 80054ac:	4b1e      	ldr	r3, [pc, #120]	; (8005528 <mpu_configure_fifo+0xa0>)
 80054ae:	7a9b      	ldrb	r3, [r3, #10]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d102      	bne.n	80054ba <mpu_configure_fifo+0x32>
            return -1;
 80054b4:	f04f 33ff 	mov.w	r3, #4294967295
 80054b8:	e031      	b.n	800551e <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 80054ba:	4b1b      	ldr	r3, [pc, #108]	; (8005528 <mpu_configure_fifo+0xa0>)
 80054bc:	7c1b      	ldrb	r3, [r3, #16]
 80054be:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 80054c0:	4b19      	ldr	r3, [pc, #100]	; (8005528 <mpu_configure_fifo+0xa0>)
 80054c2:	7a9a      	ldrb	r2, [r3, #10]
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	4013      	ands	r3, r2
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	4b17      	ldr	r3, [pc, #92]	; (8005528 <mpu_configure_fifo+0xa0>)
 80054cc:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 80054ce:	4b16      	ldr	r3, [pc, #88]	; (8005528 <mpu_configure_fifo+0xa0>)
 80054d0:	7c1b      	ldrb	r3, [r3, #16]
 80054d2:	79fa      	ldrb	r2, [r7, #7]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d003      	beq.n	80054e0 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 80054d8:	f04f 33ff 	mov.w	r3, #4294967295
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	e001      	b.n	80054e4 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 80054e4:	79fb      	ldrb	r3, [r7, #7]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d103      	bne.n	80054f2 <mpu_configure_fifo+0x6a>
 80054ea:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <mpu_configure_fifo+0xa0>)
 80054ec:	7d1b      	ldrb	r3, [r3, #20]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <mpu_configure_fifo+0x72>
            set_int_enable(1);
 80054f2:	2001      	movs	r0, #1
 80054f4:	f7ff fab6 	bl	8004a64 <set_int_enable>
 80054f8:	e002      	b.n	8005500 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 80054fa:	2000      	movs	r0, #0
 80054fc:	f7ff fab2 	bl	8004a64 <set_int_enable>
        if (sensors) {
 8005500:	79fb      	ldrb	r3, [r7, #7]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 8005506:	f7ff fc69 	bl	8004ddc <mpu_reset_fifo>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 8005510:	4a05      	ldr	r2, [pc, #20]	; (8005528 <mpu_configure_fifo+0xa0>)
 8005512:	7afb      	ldrb	r3, [r7, #11]
 8005514:	7413      	strb	r3, [r2, #16]
                return -1;
 8005516:	f04f 33ff 	mov.w	r3, #4294967295
 800551a:	e000      	b.n	800551e <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 800551c:	68fb      	ldr	r3, [r7, #12]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000010 	.word	0x20000010

0800552c <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b088      	sub	sp, #32
 8005530:	af04      	add	r7, sp, #16
 8005532:	4603      	mov	r3, r0
 8005534:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8005536:	79fb      	ldrb	r3, [r7, #7]
 8005538:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8005540:	2301      	movs	r3, #1
 8005542:	73fb      	strb	r3, [r7, #15]
 8005544:	e007      	b.n	8005556 <mpu_set_sensors+0x2a>
    else if (sensors)
 8005546:	79fb      	ldrb	r3, [r7, #7]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <mpu_set_sensors+0x26>
        data = 0;
 800554c:	2300      	movs	r3, #0
 800554e:	73fb      	strb	r3, [r7, #15]
 8005550:	e001      	b.n	8005556 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8005552:	2340      	movs	r3, #64	; 0x40
 8005554:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8005556:	4b41      	ldr	r3, [pc, #260]	; (800565c <mpu_set_sensors+0x130>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	b29b      	uxth	r3, r3
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	b299      	uxth	r1, r3
 8005562:	4b3e      	ldr	r3, [pc, #248]	; (800565c <mpu_set_sensors+0x130>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	7d5b      	ldrb	r3, [r3, #21]
 8005568:	b29a      	uxth	r2, r3
 800556a:	2305      	movs	r3, #5
 800556c:	9302      	str	r3, [sp, #8]
 800556e:	2301      	movs	r3, #1
 8005570:	9301      	str	r3, [sp, #4]
 8005572:	f107 030f 	add.w	r3, r7, #15
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	2301      	movs	r3, #1
 800557a:	4839      	ldr	r0, [pc, #228]	; (8005660 <mpu_set_sensors+0x134>)
 800557c:	f7fc fbbc 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d005      	beq.n	8005592 <mpu_set_sensors+0x66>
        st.chip_cfg.sensors = 0;
 8005586:	4b35      	ldr	r3, [pc, #212]	; (800565c <mpu_set_sensors+0x130>)
 8005588:	2200      	movs	r2, #0
 800558a:	729a      	strb	r2, [r3, #10]
        return -1;
 800558c:	f04f 33ff 	mov.w	r3, #4294967295
 8005590:	e060      	b.n	8005654 <mpu_set_sensors+0x128>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005598:	b2da      	uxtb	r2, r3
 800559a:	4b30      	ldr	r3, [pc, #192]	; (800565c <mpu_set_sensors+0x130>)
 800559c:	731a      	strb	r2, [r3, #12]

    data = 0;
 800559e:	2300      	movs	r3, #0
 80055a0:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d104      	bne.n	80055b6 <mpu_set_sensors+0x8a>
        data |= BIT_STBY_XG;
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
 80055ae:	f043 0304 	orr.w	r3, r3, #4
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 80055b6:	79fb      	ldrb	r3, [r7, #7]
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d104      	bne.n	80055ca <mpu_set_sensors+0x9e>
        data |= BIT_STBY_YG;
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	f043 0302 	orr.w	r3, r3, #2
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d104      	bne.n	80055de <mpu_set_sensors+0xb2>
        data |= BIT_STBY_ZG;
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
 80055d6:	f043 0301 	orr.w	r3, r3, #1
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d104      	bne.n	80055f2 <mpu_set_sensors+0xc6>
        data |= BIT_STBY_XYZA;
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80055f2:	4b1a      	ldr	r3, [pc, #104]	; (800565c <mpu_set_sensors+0x130>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	b299      	uxth	r1, r3
 80055fe:	4b17      	ldr	r3, [pc, #92]	; (800565c <mpu_set_sensors+0x130>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	7d9b      	ldrb	r3, [r3, #22]
 8005604:	b29a      	uxth	r2, r3
 8005606:	2305      	movs	r3, #5
 8005608:	9302      	str	r3, [sp, #8]
 800560a:	2301      	movs	r3, #1
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	f107 030f 	add.w	r3, r7, #15
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	2301      	movs	r3, #1
 8005616:	4812      	ldr	r0, [pc, #72]	; (8005660 <mpu_set_sensors+0x134>)
 8005618:	f7fc fb6e 	bl	8001cf8 <HAL_I2C_Mem_Write>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d005      	beq.n	800562e <mpu_set_sensors+0x102>
        st.chip_cfg.sensors = 0;
 8005622:	4b0e      	ldr	r3, [pc, #56]	; (800565c <mpu_set_sensors+0x130>)
 8005624:	2200      	movs	r2, #0
 8005626:	729a      	strb	r2, [r3, #10]
        return -1;
 8005628:	f04f 33ff 	mov.w	r3, #4294967295
 800562c:	e012      	b.n	8005654 <mpu_set_sensors+0x128>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <mpu_set_sensors+0x114>
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	2b08      	cmp	r3, #8
 8005638:	d002      	beq.n	8005640 <mpu_set_sensors+0x114>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 800563a:	2000      	movs	r0, #0
 800563c:	f000 f9b4 	bl	80059a8 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 8005640:	4a06      	ldr	r2, [pc, #24]	; (800565c <mpu_set_sensors+0x130>)
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8005646:	4b05      	ldr	r3, [pc, #20]	; (800565c <mpu_set_sensors+0x130>)
 8005648:	2200      	movs	r2, #0
 800564a:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 800564c:	2032      	movs	r0, #50	; 0x32
 800564e:	f7fb febf 	bl	80013d0 <HAL_Delay>
    return 0;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20000010 	.word	0x20000010
 8005660:	200000c4 	.word	0x200000c4

08005664 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08a      	sub	sp, #40	; 0x28
 8005668:	af04      	add	r7, sp, #16
 800566a:	4603      	mov	r3, r0
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8005672:	4b49      	ldr	r3, [pc, #292]	; (8005798 <mpu_read_fifo_stream+0x134>)
 8005674:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005678:	2b00      	cmp	r3, #0
 800567a:	d102      	bne.n	8005682 <mpu_read_fifo_stream+0x1e>
        return -1;
 800567c:	f04f 33ff 	mov.w	r3, #4294967295
 8005680:	e085      	b.n	800578e <mpu_read_fifo_stream+0x12a>
    if (!st.chip_cfg.sensors)
 8005682:	4b45      	ldr	r3, [pc, #276]	; (8005798 <mpu_read_fifo_stream+0x134>)
 8005684:	7a9b      	ldrb	r3, [r3, #10]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d102      	bne.n	8005690 <mpu_read_fifo_stream+0x2c>
        return -1;
 800568a:	f04f 33ff 	mov.w	r3, #4294967295
 800568e:	e07e      	b.n	800578e <mpu_read_fifo_stream+0x12a>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8005690:	4b41      	ldr	r3, [pc, #260]	; (8005798 <mpu_read_fifo_stream+0x134>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	b29b      	uxth	r3, r3
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	b299      	uxth	r1, r3
 800569c:	4b3e      	ldr	r3, [pc, #248]	; (8005798 <mpu_read_fifo_stream+0x134>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	7b1b      	ldrb	r3, [r3, #12]
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	2305      	movs	r3, #5
 80056a6:	9302      	str	r3, [sp, #8]
 80056a8:	2302      	movs	r3, #2
 80056aa:	9301      	str	r3, [sp, #4]
 80056ac:	f107 0314 	add.w	r3, r7, #20
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	2301      	movs	r3, #1
 80056b4:	4839      	ldr	r0, [pc, #228]	; (800579c <mpu_read_fifo_stream+0x138>)
 80056b6:	f7fc fc19 	bl	8001eec <HAL_I2C_Mem_Read>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <mpu_read_fifo_stream+0x62>
        return -1;
 80056c0:	f04f 33ff 	mov.w	r3, #4294967295
 80056c4:	e063      	b.n	800578e <mpu_read_fifo_stream+0x12a>
    fifo_count = (tmp[0] << 8) | tmp[1];
 80056c6:	7d3b      	ldrb	r3, [r7, #20]
 80056c8:	021b      	lsls	r3, r3, #8
 80056ca:	b21a      	sxth	r2, r3
 80056cc:	7d7b      	ldrb	r3, [r7, #21]
 80056ce:	b21b      	sxth	r3, r3
 80056d0:	4313      	orrs	r3, r2
 80056d2:	b21b      	sxth	r3, r3
 80056d4:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 80056d6:	8afa      	ldrh	r2, [r7, #22]
 80056d8:	89fb      	ldrh	r3, [r7, #14]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d205      	bcs.n	80056ea <mpu_read_fifo_stream+0x86>
        more[0] = 0;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	701a      	strb	r2, [r3, #0]
        return -1;
 80056e4:	f04f 33ff 	mov.w	r3, #4294967295
 80056e8:	e051      	b.n	800578e <mpu_read_fifo_stream+0x12a>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 80056ea:	4b2b      	ldr	r3, [pc, #172]	; (8005798 <mpu_read_fifo_stream+0x134>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	885b      	ldrh	r3, [r3, #2]
 80056f0:	085b      	lsrs	r3, r3, #1
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	8afa      	ldrh	r2, [r7, #22]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d924      	bls.n	8005744 <mpu_read_fifo_stream+0xe0>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 80056fa:	4b27      	ldr	r3, [pc, #156]	; (8005798 <mpu_read_fifo_stream+0x134>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	b299      	uxth	r1, r3
 8005706:	4b24      	ldr	r3, [pc, #144]	; (8005798 <mpu_read_fifo_stream+0x134>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	7cdb      	ldrb	r3, [r3, #19]
 800570c:	b29a      	uxth	r2, r3
 800570e:	2305      	movs	r3, #5
 8005710:	9302      	str	r3, [sp, #8]
 8005712:	2301      	movs	r3, #1
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	f107 0314 	add.w	r3, r7, #20
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	2301      	movs	r3, #1
 800571e:	481f      	ldr	r0, [pc, #124]	; (800579c <mpu_read_fifo_stream+0x138>)
 8005720:	f7fc fbe4 	bl	8001eec <HAL_I2C_Mem_Read>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <mpu_read_fifo_stream+0xcc>
            return -1;
 800572a:	f04f 33ff 	mov.w	r3, #4294967295
 800572e:	e02e      	b.n	800578e <mpu_read_fifo_stream+0x12a>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8005730:	7d3b      	ldrb	r3, [r7, #20]
 8005732:	f003 0310 	and.w	r3, r3, #16
 8005736:	2b00      	cmp	r3, #0
 8005738:	d004      	beq.n	8005744 <mpu_read_fifo_stream+0xe0>
            mpu_reset_fifo();
 800573a:	f7ff fb4f 	bl	8004ddc <mpu_reset_fifo>
            return -2;
 800573e:	f06f 0301 	mvn.w	r3, #1
 8005742:	e024      	b.n	800578e <mpu_read_fifo_stream+0x12a>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8005744:	4b14      	ldr	r3, [pc, #80]	; (8005798 <mpu_read_fifo_stream+0x134>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	b299      	uxth	r1, r3
 8005750:	4b11      	ldr	r3, [pc, #68]	; (8005798 <mpu_read_fifo_stream+0x134>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	7b5b      	ldrb	r3, [r3, #13]
 8005756:	b29a      	uxth	r2, r3
 8005758:	2305      	movs	r3, #5
 800575a:	9302      	str	r3, [sp, #8]
 800575c:	89fb      	ldrh	r3, [r7, #14]
 800575e:	9301      	str	r3, [sp, #4]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	2301      	movs	r3, #1
 8005766:	480d      	ldr	r0, [pc, #52]	; (800579c <mpu_read_fifo_stream+0x138>)
 8005768:	f7fc fbc0 	bl	8001eec <HAL_I2C_Mem_Read>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <mpu_read_fifo_stream+0x114>
        return -1;
 8005772:	f04f 33ff 	mov.w	r3, #4294967295
 8005776:	e00a      	b.n	800578e <mpu_read_fifo_stream+0x12a>
    more[0] = fifo_count / length - 1;
 8005778:	8afa      	ldrh	r2, [r7, #22]
 800577a:	89fb      	ldrh	r3, [r7, #14]
 800577c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005780:	b29b      	uxth	r3, r3
 8005782:	b2db      	uxtb	r3, r3
 8005784:	3b01      	subs	r3, #1
 8005786:	b2da      	uxtb	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	701a      	strb	r2, [r3, #0]
    return 0;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20000010 	.word	0x20000010
 800579c:	200000c4 	.word	0x200000c4

080057a0 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af04      	add	r7, sp, #16
 80057a6:	4603      	mov	r3, r0
 80057a8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 80057aa:	4b7d      	ldr	r3, [pc, #500]	; (80059a0 <mpu_set_bypass+0x200>)
 80057ac:	7c9b      	ldrb	r3, [r3, #18]
 80057ae:	79fa      	ldrb	r2, [r7, #7]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d101      	bne.n	80057b8 <mpu_set_bypass+0x18>
        return 0;
 80057b4:	2300      	movs	r3, #0
 80057b6:	e0ee      	b.n	8005996 <mpu_set_bypass+0x1f6>

    if (bypass_on) {
 80057b8:	79fb      	ldrb	r3, [r7, #7]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d06e      	beq.n	800589c <mpu_set_bypass+0xfc>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80057be:	4b78      	ldr	r3, [pc, #480]	; (80059a0 <mpu_set_bypass+0x200>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	b299      	uxth	r1, r3
 80057ca:	4b75      	ldr	r3, [pc, #468]	; (80059a0 <mpu_set_bypass+0x200>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	791b      	ldrb	r3, [r3, #4]
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	2305      	movs	r3, #5
 80057d4:	9302      	str	r3, [sp, #8]
 80057d6:	2301      	movs	r3, #1
 80057d8:	9301      	str	r3, [sp, #4]
 80057da:	f107 030f 	add.w	r3, r7, #15
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	2301      	movs	r3, #1
 80057e2:	4870      	ldr	r0, [pc, #448]	; (80059a4 <mpu_set_bypass+0x204>)
 80057e4:	f7fc fb82 	bl	8001eec <HAL_I2C_Mem_Read>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d002      	beq.n	80057f4 <mpu_set_bypass+0x54>
            return -1;
 80057ee:	f04f 33ff 	mov.w	r3, #4294967295
 80057f2:	e0d0      	b.n	8005996 <mpu_set_bypass+0x1f6>
        tmp &= ~BIT_AUX_IF_EN;
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
 80057f6:	f023 0320 	bic.w	r3, r3, #32
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80057fe:	4b68      	ldr	r3, [pc, #416]	; (80059a0 <mpu_set_bypass+0x200>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	b299      	uxth	r1, r3
 800580a:	4b65      	ldr	r3, [pc, #404]	; (80059a0 <mpu_set_bypass+0x200>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	791b      	ldrb	r3, [r3, #4]
 8005810:	b29a      	uxth	r2, r3
 8005812:	2305      	movs	r3, #5
 8005814:	9302      	str	r3, [sp, #8]
 8005816:	2301      	movs	r3, #1
 8005818:	9301      	str	r3, [sp, #4]
 800581a:	f107 030f 	add.w	r3, r7, #15
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	2301      	movs	r3, #1
 8005822:	4860      	ldr	r0, [pc, #384]	; (80059a4 <mpu_set_bypass+0x204>)
 8005824:	f7fc fa68 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <mpu_set_bypass+0x94>
            return -1;
 800582e:	f04f 33ff 	mov.w	r3, #4294967295
 8005832:	e0b0      	b.n	8005996 <mpu_set_bypass+0x1f6>
        delay_ms(3);
 8005834:	2003      	movs	r0, #3
 8005836:	f7fb fdcb 	bl	80013d0 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 800583a:	2302      	movs	r3, #2
 800583c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 800583e:	4b58      	ldr	r3, [pc, #352]	; (80059a0 <mpu_set_bypass+0x200>)
 8005840:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005844:	2b00      	cmp	r3, #0
 8005846:	d004      	beq.n	8005852 <mpu_set_bypass+0xb2>
            tmp |= BIT_ACTL;
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800584e:	b2db      	uxtb	r3, r3
 8005850:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8005852:	4b53      	ldr	r3, [pc, #332]	; (80059a0 <mpu_set_bypass+0x200>)
 8005854:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005858:	2b00      	cmp	r3, #0
 800585a:	d004      	beq.n	8005866 <mpu_set_bypass+0xc6>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005862:	b2db      	uxtb	r3, r3
 8005864:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8005866:	4b4e      	ldr	r3, [pc, #312]	; (80059a0 <mpu_set_bypass+0x200>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	b299      	uxth	r1, r3
 8005872:	4b4b      	ldr	r3, [pc, #300]	; (80059a0 <mpu_set_bypass+0x200>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	7ddb      	ldrb	r3, [r3, #23]
 8005878:	b29a      	uxth	r2, r3
 800587a:	2305      	movs	r3, #5
 800587c:	9302      	str	r3, [sp, #8]
 800587e:	2301      	movs	r3, #1
 8005880:	9301      	str	r3, [sp, #4]
 8005882:	f107 030f 	add.w	r3, r7, #15
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	2301      	movs	r3, #1
 800588a:	4846      	ldr	r0, [pc, #280]	; (80059a4 <mpu_set_bypass+0x204>)
 800588c:	f7fc fa34 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d07b      	beq.n	800598e <mpu_set_bypass+0x1ee>
            return -1;
 8005896:	f04f 33ff 	mov.w	r3, #4294967295
 800589a:	e07c      	b.n	8005996 <mpu_set_bypass+0x1f6>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800589c:	4b40      	ldr	r3, [pc, #256]	; (80059a0 <mpu_set_bypass+0x200>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	b299      	uxth	r1, r3
 80058a8:	4b3d      	ldr	r3, [pc, #244]	; (80059a0 <mpu_set_bypass+0x200>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	791b      	ldrb	r3, [r3, #4]
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	2305      	movs	r3, #5
 80058b2:	9302      	str	r3, [sp, #8]
 80058b4:	2301      	movs	r3, #1
 80058b6:	9301      	str	r3, [sp, #4]
 80058b8:	f107 030f 	add.w	r3, r7, #15
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	2301      	movs	r3, #1
 80058c0:	4838      	ldr	r0, [pc, #224]	; (80059a4 <mpu_set_bypass+0x204>)
 80058c2:	f7fc fb13 	bl	8001eec <HAL_I2C_Mem_Read>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <mpu_set_bypass+0x132>
            return -1;
 80058cc:	f04f 33ff 	mov.w	r3, #4294967295
 80058d0:	e061      	b.n	8005996 <mpu_set_bypass+0x1f6>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80058d2:	4b33      	ldr	r3, [pc, #204]	; (80059a0 <mpu_set_bypass+0x200>)
 80058d4:	7a9b      	ldrb	r3, [r3, #10]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d005      	beq.n	80058ea <mpu_set_bypass+0x14a>
            tmp |= BIT_AUX_IF_EN;
 80058de:	7bfb      	ldrb	r3, [r7, #15]
 80058e0:	f043 0320 	orr.w	r3, r3, #32
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	73fb      	strb	r3, [r7, #15]
 80058e8:	e004      	b.n	80058f4 <mpu_set_bypass+0x154>
        else
            tmp &= ~BIT_AUX_IF_EN;
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	f023 0320 	bic.w	r3, r3, #32
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80058f4:	4b2a      	ldr	r3, [pc, #168]	; (80059a0 <mpu_set_bypass+0x200>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	b299      	uxth	r1, r3
 8005900:	4b27      	ldr	r3, [pc, #156]	; (80059a0 <mpu_set_bypass+0x200>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	791b      	ldrb	r3, [r3, #4]
 8005906:	b29a      	uxth	r2, r3
 8005908:	2305      	movs	r3, #5
 800590a:	9302      	str	r3, [sp, #8]
 800590c:	2301      	movs	r3, #1
 800590e:	9301      	str	r3, [sp, #4]
 8005910:	f107 030f 	add.w	r3, r7, #15
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	2301      	movs	r3, #1
 8005918:	4822      	ldr	r0, [pc, #136]	; (80059a4 <mpu_set_bypass+0x204>)
 800591a:	f7fc f9ed 	bl	8001cf8 <HAL_I2C_Mem_Write>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <mpu_set_bypass+0x18a>
            return -1;
 8005924:	f04f 33ff 	mov.w	r3, #4294967295
 8005928:	e035      	b.n	8005996 <mpu_set_bypass+0x1f6>
        delay_ms(3);
 800592a:	2003      	movs	r0, #3
 800592c:	f7fb fd50 	bl	80013d0 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 8005930:	4b1b      	ldr	r3, [pc, #108]	; (80059a0 <mpu_set_bypass+0x200>)
 8005932:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <mpu_set_bypass+0x1a0>
            tmp = BIT_ACTL;
 800593a:	2380      	movs	r3, #128	; 0x80
 800593c:	73fb      	strb	r3, [r7, #15]
 800593e:	e001      	b.n	8005944 <mpu_set_bypass+0x1a4>
        else
            tmp = 0;
 8005940:	2300      	movs	r3, #0
 8005942:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8005944:	4b16      	ldr	r3, [pc, #88]	; (80059a0 <mpu_set_bypass+0x200>)
 8005946:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800594a:	2b00      	cmp	r3, #0
 800594c:	d004      	beq.n	8005958 <mpu_set_bypass+0x1b8>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005954:	b2db      	uxtb	r3, r3
 8005956:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8005958:	4b11      	ldr	r3, [pc, #68]	; (80059a0 <mpu_set_bypass+0x200>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	b29b      	uxth	r3, r3
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	b299      	uxth	r1, r3
 8005964:	4b0e      	ldr	r3, [pc, #56]	; (80059a0 <mpu_set_bypass+0x200>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	7ddb      	ldrb	r3, [r3, #23]
 800596a:	b29a      	uxth	r2, r3
 800596c:	2305      	movs	r3, #5
 800596e:	9302      	str	r3, [sp, #8]
 8005970:	2301      	movs	r3, #1
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	f107 030f 	add.w	r3, r7, #15
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	2301      	movs	r3, #1
 800597c:	4809      	ldr	r0, [pc, #36]	; (80059a4 <mpu_set_bypass+0x204>)
 800597e:	f7fc f9bb 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <mpu_set_bypass+0x1ee>
            return -1;
 8005988:	f04f 33ff 	mov.w	r3, #4294967295
 800598c:	e003      	b.n	8005996 <mpu_set_bypass+0x1f6>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 800598e:	4a04      	ldr	r2, [pc, #16]	; (80059a0 <mpu_set_bypass+0x200>)
 8005990:	79fb      	ldrb	r3, [r7, #7]
 8005992:	7493      	strb	r3, [r2, #18]
    return 0;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20000010 	.word	0x20000010
 80059a4:	200000c4 	.word	0x200000c4

080059a8 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af04      	add	r7, sp, #16
 80059ae:	4603      	mov	r3, r0
 80059b0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 80059b2:	4b23      	ldr	r3, [pc, #140]	; (8005a40 <mpu_set_int_latched+0x98>)
 80059b4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80059b8:	79fa      	ldrb	r2, [r7, #7]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d101      	bne.n	80059c2 <mpu_set_int_latched+0x1a>
        return 0;
 80059be:	2300      	movs	r3, #0
 80059c0:	e03a      	b.n	8005a38 <mpu_set_int_latched+0x90>

    if (enable)
 80059c2:	79fb      	ldrb	r3, [r7, #7]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80059c8:	2330      	movs	r3, #48	; 0x30
 80059ca:	73fb      	strb	r3, [r7, #15]
 80059cc:	e001      	b.n	80059d2 <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 80059d2:	4b1b      	ldr	r3, [pc, #108]	; (8005a40 <mpu_set_int_latched+0x98>)
 80059d4:	7c9b      	ldrb	r3, [r3, #18]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d004      	beq.n	80059e4 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 80059da:	7bfb      	ldrb	r3, [r7, #15]
 80059dc:	f043 0302 	orr.w	r3, r3, #2
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 80059e4:	4b16      	ldr	r3, [pc, #88]	; (8005a40 <mpu_set_int_latched+0x98>)
 80059e6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d004      	beq.n	80059f8 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
 80059f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80059f8:	4b11      	ldr	r3, [pc, #68]	; (8005a40 <mpu_set_int_latched+0x98>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	b299      	uxth	r1, r3
 8005a04:	4b0e      	ldr	r3, [pc, #56]	; (8005a40 <mpu_set_int_latched+0x98>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	7ddb      	ldrb	r3, [r3, #23]
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	2305      	movs	r3, #5
 8005a0e:	9302      	str	r3, [sp, #8]
 8005a10:	2301      	movs	r3, #1
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	f107 030f 	add.w	r3, r7, #15
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	4809      	ldr	r0, [pc, #36]	; (8005a44 <mpu_set_int_latched+0x9c>)
 8005a1e:	f7fc f96b 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <mpu_set_int_latched+0x86>
        return -1;
 8005a28:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2c:	e004      	b.n	8005a38 <mpu_set_int_latched+0x90>
    st.chip_cfg.latched_int = enable;
 8005a2e:	4a04      	ldr	r2, [pc, #16]	; (8005a40 <mpu_set_int_latched+0x98>)
 8005a30:	79fb      	ldrb	r3, [r7, #7]
 8005a32:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	20000010 	.word	0x20000010
 8005a44:	200000c4 	.word	0x200000c4

08005a48 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b088      	sub	sp, #32
 8005a4c:	af04      	add	r7, sp, #16
 8005a4e:	4603      	mov	r3, r0
 8005a50:	603a      	str	r2, [r7, #0]
 8005a52:	80fb      	strh	r3, [r7, #6]
 8005a54:	460b      	mov	r3, r1
 8005a56:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d102      	bne.n	8005a64 <mpu_write_mem+0x1c>
        return -1;
 8005a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a62:	e050      	b.n	8005b06 <mpu_write_mem+0xbe>
    if (!st.chip_cfg.sensors)
 8005a64:	4b2a      	ldr	r3, [pc, #168]	; (8005b10 <mpu_write_mem+0xc8>)
 8005a66:	7a9b      	ldrb	r3, [r3, #10]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <mpu_write_mem+0x2a>
        return -1;
 8005a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a70:	e049      	b.n	8005b06 <mpu_write_mem+0xbe>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8005a72:	88fb      	ldrh	r3, [r7, #6]
 8005a74:	0a1b      	lsrs	r3, r3, #8
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8005a7c:	88fb      	ldrh	r3, [r7, #6]
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8005a82:	7b7b      	ldrb	r3, [r7, #13]
 8005a84:	461a      	mov	r2, r3
 8005a86:	88bb      	ldrh	r3, [r7, #4]
 8005a88:	4413      	add	r3, r2
 8005a8a:	4a21      	ldr	r2, [pc, #132]	; (8005b10 <mpu_write_mem+0xc8>)
 8005a8c:	6852      	ldr	r2, [r2, #4]
 8005a8e:	8952      	ldrh	r2, [r2, #10]
 8005a90:	4293      	cmp	r3, r2
 8005a92:	dd02      	ble.n	8005a9a <mpu_write_mem+0x52>
        return -1;
 8005a94:	f04f 33ff 	mov.w	r3, #4294967295
 8005a98:	e035      	b.n	8005b06 <mpu_write_mem+0xbe>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8005a9a:	4b1d      	ldr	r3, [pc, #116]	; (8005b10 <mpu_write_mem+0xc8>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	b299      	uxth	r1, r3
 8005aa6:	4b1a      	ldr	r3, [pc, #104]	; (8005b10 <mpu_write_mem+0xc8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	7edb      	ldrb	r3, [r3, #27]
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	2305      	movs	r3, #5
 8005ab0:	9302      	str	r3, [sp, #8]
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	f107 030c 	add.w	r3, r7, #12
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	2301      	movs	r3, #1
 8005abe:	4815      	ldr	r0, [pc, #84]	; (8005b14 <mpu_write_mem+0xcc>)
 8005ac0:	f7fc f91a 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <mpu_write_mem+0x88>
        return -1;
 8005aca:	f04f 33ff 	mov.w	r3, #4294967295
 8005ace:	e01a      	b.n	8005b06 <mpu_write_mem+0xbe>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8005ad0:	4b0f      	ldr	r3, [pc, #60]	; (8005b10 <mpu_write_mem+0xc8>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	b299      	uxth	r1, r3
 8005adc:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <mpu_write_mem+0xc8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	7e1b      	ldrb	r3, [r3, #24]
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	2305      	movs	r3, #5
 8005ae6:	9302      	str	r3, [sp, #8]
 8005ae8:	88bb      	ldrh	r3, [r7, #4]
 8005aea:	9301      	str	r3, [sp, #4]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	2301      	movs	r3, #1
 8005af2:	4808      	ldr	r0, [pc, #32]	; (8005b14 <mpu_write_mem+0xcc>)
 8005af4:	f7fc f900 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <mpu_write_mem+0xbc>
        return -1;
 8005afe:	f04f 33ff 	mov.w	r3, #4294967295
 8005b02:	e000      	b.n	8005b06 <mpu_write_mem+0xbe>
    return 0;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	20000010 	.word	0x20000010
 8005b14:	200000c4 	.word	0x200000c4

08005b18 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af04      	add	r7, sp, #16
 8005b1e:	4603      	mov	r3, r0
 8005b20:	603a      	str	r2, [r7, #0]
 8005b22:	80fb      	strh	r3, [r7, #6]
 8005b24:	460b      	mov	r3, r1
 8005b26:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d102      	bne.n	8005b34 <mpu_read_mem+0x1c>
        return -1;
 8005b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b32:	e050      	b.n	8005bd6 <mpu_read_mem+0xbe>
    if (!st.chip_cfg.sensors)
 8005b34:	4b2a      	ldr	r3, [pc, #168]	; (8005be0 <mpu_read_mem+0xc8>)
 8005b36:	7a9b      	ldrb	r3, [r3, #10]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d102      	bne.n	8005b42 <mpu_read_mem+0x2a>
        return -1;
 8005b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b40:	e049      	b.n	8005bd6 <mpu_read_mem+0xbe>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	0a1b      	lsrs	r3, r3, #8
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8005b4c:	88fb      	ldrh	r3, [r7, #6]
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8005b52:	7b7b      	ldrb	r3, [r7, #13]
 8005b54:	461a      	mov	r2, r3
 8005b56:	88bb      	ldrh	r3, [r7, #4]
 8005b58:	4413      	add	r3, r2
 8005b5a:	4a21      	ldr	r2, [pc, #132]	; (8005be0 <mpu_read_mem+0xc8>)
 8005b5c:	6852      	ldr	r2, [r2, #4]
 8005b5e:	8952      	ldrh	r2, [r2, #10]
 8005b60:	4293      	cmp	r3, r2
 8005b62:	dd02      	ble.n	8005b6a <mpu_read_mem+0x52>
        return -1;
 8005b64:	f04f 33ff 	mov.w	r3, #4294967295
 8005b68:	e035      	b.n	8005bd6 <mpu_read_mem+0xbe>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8005b6a:	4b1d      	ldr	r3, [pc, #116]	; (8005be0 <mpu_read_mem+0xc8>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	b299      	uxth	r1, r3
 8005b76:	4b1a      	ldr	r3, [pc, #104]	; (8005be0 <mpu_read_mem+0xc8>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	7edb      	ldrb	r3, [r3, #27]
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	2305      	movs	r3, #5
 8005b80:	9302      	str	r3, [sp, #8]
 8005b82:	2302      	movs	r3, #2
 8005b84:	9301      	str	r3, [sp, #4]
 8005b86:	f107 030c 	add.w	r3, r7, #12
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	4815      	ldr	r0, [pc, #84]	; (8005be4 <mpu_read_mem+0xcc>)
 8005b90:	f7fc f8b2 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <mpu_read_mem+0x88>
        return -1;
 8005b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9e:	e01a      	b.n	8005bd6 <mpu_read_mem+0xbe>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8005ba0:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <mpu_read_mem+0xc8>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	b299      	uxth	r1, r3
 8005bac:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <mpu_read_mem+0xc8>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	7e1b      	ldrb	r3, [r3, #24]
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	2305      	movs	r3, #5
 8005bb6:	9302      	str	r3, [sp, #8]
 8005bb8:	88bb      	ldrh	r3, [r7, #4]
 8005bba:	9301      	str	r3, [sp, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	4808      	ldr	r0, [pc, #32]	; (8005be4 <mpu_read_mem+0xcc>)
 8005bc4:	f7fc f992 	bl	8001eec <HAL_I2C_Mem_Read>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <mpu_read_mem+0xbc>
        return -1;
 8005bce:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd2:	e000      	b.n	8005bd6 <mpu_read_mem+0xbe>
    return 0;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20000010 	.word	0x20000010
 8005be4:	200000c4 	.word	0x200000c4

08005be8 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08e      	sub	sp, #56	; 0x38
 8005bec:	af04      	add	r7, sp, #16
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	81fb      	strh	r3, [r7, #14]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	81bb      	strh	r3, [r7, #12]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8005c00:	4b3c      	ldr	r3, [pc, #240]	; (8005cf4 <mpu_load_firmware+0x10c>)
 8005c02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 8005c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0e:	e06c      	b.n	8005cea <mpu_load_firmware+0x102>

    if (!firmware)
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d102      	bne.n	8005c1c <mpu_load_firmware+0x34>
        return -1;
 8005c16:	f04f 33ff 	mov.w	r3, #4294967295
 8005c1a:	e066      	b.n	8005cea <mpu_load_firmware+0x102>
    for (ii = 0; ii < length; ii += this_write) {
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005c20:	e034      	b.n	8005c8c <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 8005c22:	89fa      	ldrh	r2, [r7, #14]
 8005c24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b10      	cmp	r3, #16
 8005c2a:	bfa8      	it	ge
 8005c2c:	2310      	movge	r3, #16
 8005c2e:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8005c30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	441a      	add	r2, r3
 8005c36:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8005c38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff ff04 	bl	8005a48 <mpu_write_mem>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <mpu_load_firmware+0x64>
            return -1;
 8005c46:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4a:	e04e      	b.n	8005cea <mpu_load_firmware+0x102>
        if (mpu_read_mem(ii, this_write, cur))
 8005c4c:	f107 0214 	add.w	r2, r7, #20
 8005c50:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8005c52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff ff5f 	bl	8005b18 <mpu_read_mem>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <mpu_load_firmware+0x7e>
            return -1;
 8005c60:	f04f 33ff 	mov.w	r3, #4294967295
 8005c64:	e041      	b.n	8005cea <mpu_load_firmware+0x102>
        if (memcmp(firmware+ii, cur, this_write))
 8005c66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c6e:	f107 0114 	add.w	r1, r7, #20
 8005c72:	4618      	mov	r0, r3
 8005c74:	f001 ff02 	bl	8007a7c <memcmp>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d002      	beq.n	8005c84 <mpu_load_firmware+0x9c>
            return -2;
 8005c7e:	f06f 0301 	mvn.w	r3, #1
 8005c82:	e032      	b.n	8005cea <mpu_load_firmware+0x102>
    for (ii = 0; ii < length; ii += this_write) {
 8005c84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005c86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c88:	4413      	add	r3, r2
 8005c8a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005c8c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005c8e:	89fb      	ldrh	r3, [r7, #14]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d3c6      	bcc.n	8005c22 <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 8005c94:	89bb      	ldrh	r3, [r7, #12]
 8005c96:	0a1b      	lsrs	r3, r3, #8
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 8005c9e:	89bb      	ldrh	r3, [r7, #12]
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8005ca4:	4b13      	ldr	r3, [pc, #76]	; (8005cf4 <mpu_load_firmware+0x10c>)
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	b299      	uxth	r1, r3
 8005cb0:	4b10      	ldr	r3, [pc, #64]	; (8005cf4 <mpu_load_firmware+0x10c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	7f5b      	ldrb	r3, [r3, #29]
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	2305      	movs	r3, #5
 8005cba:	9302      	str	r3, [sp, #8]
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	9301      	str	r3, [sp, #4]
 8005cc0:	f107 0310 	add.w	r3, r7, #16
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	480b      	ldr	r0, [pc, #44]	; (8005cf8 <mpu_load_firmware+0x110>)
 8005cca:	f7fc f815 	bl	8001cf8 <HAL_I2C_Mem_Write>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <mpu_load_firmware+0xf2>
        return -1;
 8005cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd8:	e007      	b.n	8005cea <mpu_load_firmware+0x102>

    st.chip_cfg.dmp_loaded = 1;
 8005cda:	4b06      	ldr	r3, [pc, #24]	; (8005cf4 <mpu_load_firmware+0x10c>)
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8005ce2:	4a04      	ldr	r2, [pc, #16]	; (8005cf4 <mpu_load_firmware+0x10c>)
 8005ce4:	88fb      	ldrh	r3, [r7, #6]
 8005ce6:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3728      	adds	r7, #40	; 0x28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20000010 	.word	0x20000010
 8005cf8:	200000c4 	.word	0x200000c4

08005cfc <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af04      	add	r7, sp, #16
 8005d02:	4603      	mov	r3, r0
 8005d04:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 8005d06:	4b2f      	ldr	r3, [pc, #188]	; (8005dc4 <mpu_set_dmp_state+0xc8>)
 8005d08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d0c:	79fa      	ldrb	r2, [r7, #7]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d101      	bne.n	8005d16 <mpu_set_dmp_state+0x1a>
        return 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	e052      	b.n	8005dbc <mpu_set_dmp_state+0xc0>

    if (enable) {
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d030      	beq.n	8005d7e <mpu_set_dmp_state+0x82>
        if (!st.chip_cfg.dmp_loaded)
 8005d1c:	4b29      	ldr	r3, [pc, #164]	; (8005dc4 <mpu_set_dmp_state+0xc8>)
 8005d1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d102      	bne.n	8005d2c <mpu_set_dmp_state+0x30>
            return -1;
 8005d26:	f04f 33ff 	mov.w	r3, #4294967295
 8005d2a:	e047      	b.n	8005dbc <mpu_set_dmp_state+0xc0>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	f7fe fe99 	bl	8004a64 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 8005d32:	2000      	movs	r0, #0
 8005d34:	f7ff fd34 	bl	80057a0 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8005d38:	4b22      	ldr	r3, [pc, #136]	; (8005dc4 <mpu_set_dmp_state+0xc8>)
 8005d3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff fb31 	bl	80053a4 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 8005d42:	2300      	movs	r3, #0
 8005d44:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8005d46:	4b1f      	ldr	r3, [pc, #124]	; (8005dc4 <mpu_set_dmp_state+0xc8>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	b299      	uxth	r1, r3
 8005d52:	2305      	movs	r3, #5
 8005d54:	9302      	str	r3, [sp, #8]
 8005d56:	2301      	movs	r3, #1
 8005d58:	9301      	str	r3, [sp, #4]
 8005d5a:	f107 030f 	add.w	r3, r7, #15
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	2301      	movs	r3, #1
 8005d62:	2223      	movs	r2, #35	; 0x23
 8005d64:	4818      	ldr	r0, [pc, #96]	; (8005dc8 <mpu_set_dmp_state+0xcc>)
 8005d66:	f7fb ffc7 	bl	8001cf8 <HAL_I2C_Mem_Write>
        st.chip_cfg.dmp_on = 1;
 8005d6a:	4b16      	ldr	r3, [pc, #88]	; (8005dc4 <mpu_set_dmp_state+0xc8>)
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 8005d72:	2001      	movs	r0, #1
 8005d74:	f7fe fe76 	bl	8004a64 <set_int_enable>
        mpu_reset_fifo();
 8005d78:	f7ff f830 	bl	8004ddc <mpu_reset_fifo>
 8005d7c:	e01d      	b.n	8005dba <mpu_set_dmp_state+0xbe>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 8005d7e:	2000      	movs	r0, #0
 8005d80:	f7fe fe70 	bl	8004a64 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 8005d84:	4b0f      	ldr	r3, [pc, #60]	; (8005dc4 <mpu_set_dmp_state+0xc8>)
 8005d86:	7c1b      	ldrb	r3, [r3, #16]
 8005d88:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8005d8a:	4b0e      	ldr	r3, [pc, #56]	; (8005dc4 <mpu_set_dmp_state+0xc8>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	b299      	uxth	r1, r3
 8005d96:	2305      	movs	r3, #5
 8005d98:	9302      	str	r3, [sp, #8]
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	9301      	str	r3, [sp, #4]
 8005d9e:	f107 030f 	add.w	r3, r7, #15
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	2301      	movs	r3, #1
 8005da6:	2223      	movs	r2, #35	; 0x23
 8005da8:	4807      	ldr	r0, [pc, #28]	; (8005dc8 <mpu_set_dmp_state+0xcc>)
 8005daa:	f7fb ffa5 	bl	8001cf8 <HAL_I2C_Mem_Write>
        st.chip_cfg.dmp_on = 0;
 8005dae:	4b05      	ldr	r3, [pc, #20]	; (8005dc4 <mpu_set_dmp_state+0xc8>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 8005db6:	f7ff f811 	bl	8004ddc <mpu_reset_fifo>
    }
    return 0;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	20000010 	.word	0x20000010
 8005dc8:	200000c4 	.word	0x200000c4

08005dcc <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8005dd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005dd4:	23c8      	movs	r3, #200	; 0xc8
 8005dd6:	4904      	ldr	r1, [pc, #16]	; (8005de8 <dmp_load_motion_driver_firmware+0x1c>)
 8005dd8:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8005ddc:	f7ff ff04 	bl	8005be8 <mpu_load_firmware>
 8005de0:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	08007be4 	.word	0x08007be4

08005dec <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b088      	sub	sp, #32
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	4603      	mov	r3, r0
 8005df4:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8005df6:	4a6e      	ldr	r2, [pc, #440]	; (8005fb0 <dmp_set_orientation+0x1c4>)
 8005df8:	f107 0314 	add.w	r3, r7, #20
 8005dfc:	6812      	ldr	r2, [r2, #0]
 8005dfe:	4611      	mov	r1, r2
 8005e00:	8019      	strh	r1, [r3, #0]
 8005e02:	3302      	adds	r3, #2
 8005e04:	0c12      	lsrs	r2, r2, #16
 8005e06:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8005e08:	4a6a      	ldr	r2, [pc, #424]	; (8005fb4 <dmp_set_orientation+0x1c8>)
 8005e0a:	f107 0310 	add.w	r3, r7, #16
 8005e0e:	6812      	ldr	r2, [r2, #0]
 8005e10:	4611      	mov	r1, r2
 8005e12:	8019      	strh	r1, [r3, #0]
 8005e14:	3302      	adds	r3, #2
 8005e16:	0c12      	lsrs	r2, r2, #16
 8005e18:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8005e1a:	4a67      	ldr	r2, [pc, #412]	; (8005fb8 <dmp_set_orientation+0x1cc>)
 8005e1c:	f107 030c 	add.w	r3, r7, #12
 8005e20:	6812      	ldr	r2, [r2, #0]
 8005e22:	4611      	mov	r1, r2
 8005e24:	8019      	strh	r1, [r3, #0]
 8005e26:	3302      	adds	r3, #2
 8005e28:	0c12      	lsrs	r2, r2, #16
 8005e2a:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8005e2c:	4a63      	ldr	r2, [pc, #396]	; (8005fbc <dmp_set_orientation+0x1d0>)
 8005e2e:	f107 0308 	add.w	r3, r7, #8
 8005e32:	6812      	ldr	r2, [r2, #0]
 8005e34:	4611      	mov	r1, r2
 8005e36:	8019      	strh	r1, [r3, #0]
 8005e38:	3302      	adds	r3, #2
 8005e3a:	0c12      	lsrs	r2, r2, #16
 8005e3c:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 8005e3e:	88fb      	ldrh	r3, [r7, #6]
 8005e40:	f003 0303 	and.w	r3, r3, #3
 8005e44:	3320      	adds	r3, #32
 8005e46:	443b      	add	r3, r7
 8005e48:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8005e4c:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	08db      	lsrs	r3, r3, #3
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	f003 0303 	and.w	r3, r3, #3
 8005e58:	3320      	adds	r3, #32
 8005e5a:	443b      	add	r3, r7
 8005e5c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8005e60:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8005e62:	88fb      	ldrh	r3, [r7, #6]
 8005e64:	099b      	lsrs	r3, r3, #6
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f003 0303 	and.w	r3, r3, #3
 8005e6c:	3320      	adds	r3, #32
 8005e6e:	443b      	add	r3, r7
 8005e70:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8005e74:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 8005e76:	88fb      	ldrh	r3, [r7, #6]
 8005e78:	f003 0303 	and.w	r3, r3, #3
 8005e7c:	3320      	adds	r3, #32
 8005e7e:	443b      	add	r3, r7
 8005e80:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005e84:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8005e86:	88fb      	ldrh	r3, [r7, #6]
 8005e88:	08db      	lsrs	r3, r3, #3
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f003 0303 	and.w	r3, r3, #3
 8005e90:	3320      	adds	r3, #32
 8005e92:	443b      	add	r3, r7
 8005e94:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005e98:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8005e9a:	88fb      	ldrh	r3, [r7, #6]
 8005e9c:	099b      	lsrs	r3, r3, #6
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	3320      	adds	r3, #32
 8005ea6:	443b      	add	r3, r7
 8005ea8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005eac:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8005eae:	f107 031c 	add.w	r3, r7, #28
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	2103      	movs	r1, #3
 8005eb6:	f240 4026 	movw	r0, #1062	; 0x426
 8005eba:	f7ff fdc5 	bl	8005a48 <mpu_write_mem>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <dmp_set_orientation+0xde>
        return -1;
 8005ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec8:	e06e      	b.n	8005fa8 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8005eca:	f107 0318 	add.w	r3, r7, #24
 8005ece:	461a      	mov	r2, r3
 8005ed0:	2103      	movs	r1, #3
 8005ed2:	f240 402a 	movw	r0, #1066	; 0x42a
 8005ed6:	f7ff fdb7 	bl	8005a48 <mpu_write_mem>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <dmp_set_orientation+0xfa>
        return -1;
 8005ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee4:	e060      	b.n	8005fa8 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 8005ee6:	f107 031c 	add.w	r3, r7, #28
 8005eea:	f107 020c 	add.w	r2, r7, #12
 8005eee:	6812      	ldr	r2, [r2, #0]
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	8019      	strh	r1, [r3, #0]
 8005ef4:	3302      	adds	r3, #2
 8005ef6:	0c12      	lsrs	r2, r2, #16
 8005ef8:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 8005efa:	f107 0318 	add.w	r3, r7, #24
 8005efe:	f107 0208 	add.w	r2, r7, #8
 8005f02:	6812      	ldr	r2, [r2, #0]
 8005f04:	4611      	mov	r1, r2
 8005f06:	8019      	strh	r1, [r3, #0]
 8005f08:	3302      	adds	r3, #2
 8005f0a:	0c12      	lsrs	r2, r2, #16
 8005f0c:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 8005f0e:	88fb      	ldrh	r3, [r7, #6]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d009      	beq.n	8005f2c <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 8005f18:	7f3b      	ldrb	r3, [r7, #28]
 8005f1a:	f043 0301 	orr.w	r3, r3, #1
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 8005f22:	7e3b      	ldrb	r3, [r7, #24]
 8005f24:	f043 0301 	orr.w	r3, r3, #1
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 8005f2c:	88fb      	ldrh	r3, [r7, #6]
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d009      	beq.n	8005f4a <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 8005f36:	7f7b      	ldrb	r3, [r7, #29]
 8005f38:	f043 0301 	orr.w	r3, r3, #1
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 8005f40:	7e7b      	ldrb	r3, [r7, #25]
 8005f42:	f043 0301 	orr.w	r3, r3, #1
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 8005f4a:	88fb      	ldrh	r3, [r7, #6]
 8005f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d009      	beq.n	8005f68 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 8005f54:	7fbb      	ldrb	r3, [r7, #30]
 8005f56:	f043 0301 	orr.w	r3, r3, #1
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 8005f5e:	7ebb      	ldrb	r3, [r7, #26]
 8005f60:	f043 0301 	orr.w	r3, r3, #1
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8005f68:	f107 031c 	add.w	r3, r7, #28
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	2103      	movs	r1, #3
 8005f70:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8005f74:	f7ff fd68 	bl	8005a48 <mpu_write_mem>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <dmp_set_orientation+0x198>
        return -1;
 8005f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f82:	e011      	b.n	8005fa8 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8005f84:	f107 0318 	add.w	r3, r7, #24
 8005f88:	461a      	mov	r2, r3
 8005f8a:	2103      	movs	r1, #3
 8005f8c:	f240 4031 	movw	r0, #1073	; 0x431
 8005f90:	f7ff fd5a 	bl	8005a48 <mpu_write_mem>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <dmp_set_orientation+0x1b4>
        return -1;
 8005f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f9e:	e003      	b.n	8005fa8 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 8005fa0:	4a07      	ldr	r2, [pc, #28]	; (8005fc0 <dmp_set_orientation+0x1d4>)
 8005fa2:	88fb      	ldrh	r3, [r7, #6]
 8005fa4:	8113      	strh	r3, [r2, #8]
    return 0;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3720      	adds	r7, #32
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	08007b18 	.word	0x08007b18
 8005fb4:	08007b1c 	.word	0x08007b1c
 8005fb8:	08007b20 	.word	0x08007b20
 8005fbc:	08007b24 	.word	0x08007b24
 8005fc0:	2000012c 	.word	0x2000012c

08005fc4 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	4603      	mov	r3, r0
 8005fcc:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8005fce:	4a1f      	ldr	r2, [pc, #124]	; (800604c <dmp_set_fifo_rate+0x88>)
 8005fd0:	f107 0310 	add.w	r3, r7, #16
 8005fd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8005fd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	2bc8      	cmp	r3, #200	; 0xc8
 8005fde:	d902      	bls.n	8005fe6 <dmp_set_fifo_rate+0x22>
        return -1;
 8005fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe4:	e02e      	b.n	8006044 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 8005fe6:	88fb      	ldrh	r3, [r7, #6]
 8005fe8:	22c8      	movs	r2, #200	; 0xc8
 8005fea:	fb92 f3f3 	sdiv	r3, r2, r3
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8005ff4:	8bfb      	ldrh	r3, [r7, #30]
 8005ff6:	0a1b      	lsrs	r3, r3, #8
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 8005ffe:	8bfb      	ldrh	r3, [r7, #30]
 8006000:	b2db      	uxtb	r3, r3
 8006002:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8006004:	f107 0308 	add.w	r3, r7, #8
 8006008:	461a      	mov	r2, r3
 800600a:	2102      	movs	r1, #2
 800600c:	f240 2016 	movw	r0, #534	; 0x216
 8006010:	f7ff fd1a 	bl	8005a48 <mpu_write_mem>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d002      	beq.n	8006020 <dmp_set_fifo_rate+0x5c>
        return -1;
 800601a:	f04f 33ff 	mov.w	r3, #4294967295
 800601e:	e011      	b.n	8006044 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8006020:	f107 0310 	add.w	r3, r7, #16
 8006024:	461a      	mov	r2, r3
 8006026:	210c      	movs	r1, #12
 8006028:	f640 20c1 	movw	r0, #2753	; 0xac1
 800602c:	f7ff fd0c 	bl	8005a48 <mpu_write_mem>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <dmp_set_fifo_rate+0x78>
        return -1;
 8006036:	f04f 33ff 	mov.w	r3, #4294967295
 800603a:	e003      	b.n	8006044 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 800603c:	4a04      	ldr	r2, [pc, #16]	; (8006050 <dmp_set_fifo_rate+0x8c>)
 800603e:	88fb      	ldrh	r3, [r7, #6]
 8006040:	8193      	strh	r3, [r2, #12]
    return 0;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3720      	adds	r7, #32
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	08007b28 	.word	0x08007b28
 8006050:	2000012c 	.word	0x2000012c

08006054 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	4603      	mov	r3, r0
 800605c:	460a      	mov	r2, r1
 800605e:	71fb      	strb	r3, [r7, #7]
 8006060:	4613      	mov	r3, r2
 8006062:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8006064:	79fb      	ldrb	r3, [r7, #7]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <dmp_set_tap_thresh+0x22>
 800606e:	88bb      	ldrh	r3, [r7, #4]
 8006070:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006074:	d902      	bls.n	800607c <dmp_set_tap_thresh+0x28>
        return -1;
 8006076:	f04f 33ff 	mov.w	r3, #4294967295
 800607a:	e107      	b.n	800628c <dmp_set_tap_thresh+0x238>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 800607c:	88bb      	ldrh	r3, [r7, #4]
 800607e:	4618      	mov	r0, r3
 8006080:	f7fa fdd8 	bl	8000c34 <__aeabi_ui2f>
 8006084:	4603      	mov	r3, r0
 8006086:	4983      	ldr	r1, [pc, #524]	; (8006294 <dmp_set_tap_thresh+0x240>)
 8006088:	4618      	mov	r0, r3
 800608a:	f7fa fedf 	bl	8000e4c <__aeabi_fdiv>
 800608e:	4603      	mov	r3, r0
 8006090:	613b      	str	r3, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 8006092:	f107 030b 	add.w	r3, r7, #11
 8006096:	4618      	mov	r0, r3
 8006098:	f7ff f87c 	bl	8005194 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 800609c:	7afb      	ldrb	r3, [r7, #11]
 800609e:	3b02      	subs	r3, #2
 80060a0:	2b0e      	cmp	r3, #14
 80060a2:	d879      	bhi.n	8006198 <dmp_set_tap_thresh+0x144>
 80060a4:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <dmp_set_tap_thresh+0x58>)
 80060a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060aa:	bf00      	nop
 80060ac:	080060e9 	.word	0x080060e9
 80060b0:	08006199 	.word	0x08006199
 80060b4:	08006115 	.word	0x08006115
 80060b8:	08006199 	.word	0x08006199
 80060bc:	08006199 	.word	0x08006199
 80060c0:	08006199 	.word	0x08006199
 80060c4:	08006141 	.word	0x08006141
 80060c8:	08006199 	.word	0x08006199
 80060cc:	08006199 	.word	0x08006199
 80060d0:	08006199 	.word	0x08006199
 80060d4:	08006199 	.word	0x08006199
 80060d8:	08006199 	.word	0x08006199
 80060dc:	08006199 	.word	0x08006199
 80060e0:	08006199 	.word	0x08006199
 80060e4:	0800616d 	.word	0x0800616d
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 80060e8:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80060ec:	6938      	ldr	r0, [r7, #16]
 80060ee:	f7fa fdf9 	bl	8000ce4 <__aeabi_fmul>
 80060f2:	4603      	mov	r3, r0
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fa ff45 	bl	8000f84 <__aeabi_f2uiz>
 80060fa:	4603      	mov	r3, r0
 80060fc:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 80060fe:	4966      	ldr	r1, [pc, #408]	; (8006298 <dmp_set_tap_thresh+0x244>)
 8006100:	6938      	ldr	r0, [r7, #16]
 8006102:	f7fa fdef 	bl	8000ce4 <__aeabi_fmul>
 8006106:	4603      	mov	r3, r0
 8006108:	4618      	mov	r0, r3
 800610a:	f7fa ff3b 	bl	8000f84 <__aeabi_f2uiz>
 800610e:	4603      	mov	r3, r0
 8006110:	82bb      	strh	r3, [r7, #20]
        break;
 8006112:	e044      	b.n	800619e <dmp_set_tap_thresh+0x14a>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8006114:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 8006118:	6938      	ldr	r0, [r7, #16]
 800611a:	f7fa fde3 	bl	8000ce4 <__aeabi_fmul>
 800611e:	4603      	mov	r3, r0
 8006120:	4618      	mov	r0, r3
 8006122:	f7fa ff2f 	bl	8000f84 <__aeabi_f2uiz>
 8006126:	4603      	mov	r3, r0
 8006128:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 800612a:	495c      	ldr	r1, [pc, #368]	; (800629c <dmp_set_tap_thresh+0x248>)
 800612c:	6938      	ldr	r0, [r7, #16]
 800612e:	f7fa fdd9 	bl	8000ce4 <__aeabi_fmul>
 8006132:	4603      	mov	r3, r0
 8006134:	4618      	mov	r0, r3
 8006136:	f7fa ff25 	bl	8000f84 <__aeabi_f2uiz>
 800613a:	4603      	mov	r3, r0
 800613c:	82bb      	strh	r3, [r7, #20]
        break;
 800613e:	e02e      	b.n	800619e <dmp_set_tap_thresh+0x14a>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8006140:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8006144:	6938      	ldr	r0, [r7, #16]
 8006146:	f7fa fdcd 	bl	8000ce4 <__aeabi_fmul>
 800614a:	4603      	mov	r3, r0
 800614c:	4618      	mov	r0, r3
 800614e:	f7fa ff19 	bl	8000f84 <__aeabi_f2uiz>
 8006152:	4603      	mov	r3, r0
 8006154:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8006156:	4952      	ldr	r1, [pc, #328]	; (80062a0 <dmp_set_tap_thresh+0x24c>)
 8006158:	6938      	ldr	r0, [r7, #16]
 800615a:	f7fa fdc3 	bl	8000ce4 <__aeabi_fmul>
 800615e:	4603      	mov	r3, r0
 8006160:	4618      	mov	r0, r3
 8006162:	f7fa ff0f 	bl	8000f84 <__aeabi_f2uiz>
 8006166:	4603      	mov	r3, r0
 8006168:	82bb      	strh	r3, [r7, #20]
        break;
 800616a:	e018      	b.n	800619e <dmp_set_tap_thresh+0x14a>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 800616c:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 8006170:	6938      	ldr	r0, [r7, #16]
 8006172:	f7fa fdb7 	bl	8000ce4 <__aeabi_fmul>
 8006176:	4603      	mov	r3, r0
 8006178:	4618      	mov	r0, r3
 800617a:	f7fa ff03 	bl	8000f84 <__aeabi_f2uiz>
 800617e:	4603      	mov	r3, r0
 8006180:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8006182:	4948      	ldr	r1, [pc, #288]	; (80062a4 <dmp_set_tap_thresh+0x250>)
 8006184:	6938      	ldr	r0, [r7, #16]
 8006186:	f7fa fdad 	bl	8000ce4 <__aeabi_fmul>
 800618a:	4603      	mov	r3, r0
 800618c:	4618      	mov	r0, r3
 800618e:	f7fa fef9 	bl	8000f84 <__aeabi_f2uiz>
 8006192:	4603      	mov	r3, r0
 8006194:	82bb      	strh	r3, [r7, #20]
        break;
 8006196:	e002      	b.n	800619e <dmp_set_tap_thresh+0x14a>
    default:
        return -1;
 8006198:	f04f 33ff 	mov.w	r3, #4294967295
 800619c:	e076      	b.n	800628c <dmp_set_tap_thresh+0x238>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 800619e:	8afb      	ldrh	r3, [r7, #22]
 80061a0:	0a1b      	lsrs	r3, r3, #8
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 80061a8:	8afb      	ldrh	r3, [r7, #22]
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 80061ae:	8abb      	ldrh	r3, [r7, #20]
 80061b0:	0a1b      	lsrs	r3, r3, #8
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 80061b8:	8abb      	ldrh	r3, [r7, #20]
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 80061be:	79fb      	ldrb	r3, [r7, #7]
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01c      	beq.n	8006202 <dmp_set_tap_thresh+0x1ae>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 80061c8:	f107 030c 	add.w	r3, r7, #12
 80061cc:	461a      	mov	r2, r3
 80061ce:	2102      	movs	r1, #2
 80061d0:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 80061d4:	f7ff fc38 	bl	8005a48 <mpu_write_mem>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <dmp_set_tap_thresh+0x190>
            return -1;
 80061de:	f04f 33ff 	mov.w	r3, #4294967295
 80061e2:	e053      	b.n	800628c <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 80061e4:	f107 030c 	add.w	r3, r7, #12
 80061e8:	3302      	adds	r3, #2
 80061ea:	461a      	mov	r2, r3
 80061ec:	2102      	movs	r1, #2
 80061ee:	f44f 7092 	mov.w	r0, #292	; 0x124
 80061f2:	f7ff fc29 	bl	8005a48 <mpu_write_mem>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <dmp_set_tap_thresh+0x1ae>
            return -1;
 80061fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006200:	e044      	b.n	800628c <dmp_set_tap_thresh+0x238>
    }
    if (axis & TAP_Y) {
 8006202:	79fb      	ldrb	r3, [r7, #7]
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d01c      	beq.n	8006246 <dmp_set_tap_thresh+0x1f2>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 800620c:	f107 030c 	add.w	r3, r7, #12
 8006210:	461a      	mov	r2, r3
 8006212:	2102      	movs	r1, #2
 8006214:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 8006218:	f7ff fc16 	bl	8005a48 <mpu_write_mem>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <dmp_set_tap_thresh+0x1d4>
            return -1;
 8006222:	f04f 33ff 	mov.w	r3, #4294967295
 8006226:	e031      	b.n	800628c <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8006228:	f107 030c 	add.w	r3, r7, #12
 800622c:	3302      	adds	r3, #2
 800622e:	461a      	mov	r2, r3
 8006230:	2102      	movs	r1, #2
 8006232:	f44f 7094 	mov.w	r0, #296	; 0x128
 8006236:	f7ff fc07 	bl	8005a48 <mpu_write_mem>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <dmp_set_tap_thresh+0x1f2>
            return -1;
 8006240:	f04f 33ff 	mov.w	r3, #4294967295
 8006244:	e022      	b.n	800628c <dmp_set_tap_thresh+0x238>
    }
    if (axis & TAP_Z) {
 8006246:	79fb      	ldrb	r3, [r7, #7]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b00      	cmp	r3, #0
 800624e:	d01c      	beq.n	800628a <dmp_set_tap_thresh+0x236>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8006250:	f107 030c 	add.w	r3, r7, #12
 8006254:	461a      	mov	r2, r3
 8006256:	2102      	movs	r1, #2
 8006258:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 800625c:	f7ff fbf4 	bl	8005a48 <mpu_write_mem>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <dmp_set_tap_thresh+0x218>
            return -1;
 8006266:	f04f 33ff 	mov.w	r3, #4294967295
 800626a:	e00f      	b.n	800628c <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 800626c:	f107 030c 	add.w	r3, r7, #12
 8006270:	3302      	adds	r3, #2
 8006272:	461a      	mov	r2, r3
 8006274:	2102      	movs	r1, #2
 8006276:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800627a:	f7ff fbe5 	bl	8005a48 <mpu_write_mem>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <dmp_set_tap_thresh+0x236>
            return -1;
 8006284:	f04f 33ff 	mov.w	r3, #4294967295
 8006288:	e000      	b.n	800628c <dmp_set_tap_thresh+0x238>
    }
    return 0;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	43480000 	.word	0x43480000
 8006298:	46400000 	.word	0x46400000
 800629c:	45c00000 	.word	0x45c00000
 80062a0:	45400000 	.word	0x45400000
 80062a4:	44c00000 	.word	0x44c00000

080062a8 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	4603      	mov	r3, r0
 80062b0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 80062b6:	79fb      	ldrb	r3, [r7, #7]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d004      	beq.n	80062ca <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d004      	beq.n	80062de <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
 80062d6:	f043 030c 	orr.w	r3, r3, #12
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 80062de:	79fb      	ldrb	r3, [r7, #7]
 80062e0:	f003 0304 	and.w	r3, r3, #4
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d004      	beq.n	80062f2 <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
 80062ea:	f043 0303 	orr.w	r3, r3, #3
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 80062f2:	f107 030f 	add.w	r3, r7, #15
 80062f6:	461a      	mov	r2, r3
 80062f8:	2101      	movs	r1, #1
 80062fa:	f44f 70a4 	mov.w	r0, #328	; 0x148
 80062fe:	f7ff fba3 	bl	8005a48 <mpu_write_mem>
 8006302:	4603      	mov	r3, r0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	4603      	mov	r3, r0
 8006314:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 8006316:	79fb      	ldrb	r3, [r7, #7]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d102      	bne.n	8006322 <dmp_set_tap_count+0x16>
        min_taps = 1;
 800631c:	2301      	movs	r3, #1
 800631e:	71fb      	strb	r3, [r7, #7]
 8006320:	e004      	b.n	800632c <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	2b04      	cmp	r3, #4
 8006326:	d901      	bls.n	800632c <dmp_set_tap_count+0x20>
        min_taps = 4;
 8006328:	2304      	movs	r3, #4
 800632a:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 800632c:	79fb      	ldrb	r3, [r7, #7]
 800632e:	3b01      	subs	r3, #1
 8006330:	b2db      	uxtb	r3, r3
 8006332:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 8006334:	f107 030f 	add.w	r3, r7, #15
 8006338:	461a      	mov	r2, r3
 800633a:	2101      	movs	r1, #1
 800633c:	f240 104f 	movw	r0, #335	; 0x14f
 8006340:	f7ff fb82 	bl	8005a48 <mpu_write_mem>
 8006344:	4603      	mov	r3, r0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
	...

08006350 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	4603      	mov	r3, r0
 8006358:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800635a:	88fb      	ldrh	r3, [r7, #6]
 800635c:	4a0c      	ldr	r2, [pc, #48]	; (8006390 <dmp_set_tap_time+0x40>)
 800635e:	fba2 2303 	umull	r2, r3, r2, r3
 8006362:	089b      	lsrs	r3, r3, #2
 8006364:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8006366:	89fb      	ldrh	r3, [r7, #14]
 8006368:	0a1b      	lsrs	r3, r3, #8
 800636a:	b29b      	uxth	r3, r3
 800636c:	b2db      	uxtb	r3, r3
 800636e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8006370:	89fb      	ldrh	r3, [r7, #14]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8006376:	f107 030c 	add.w	r3, r7, #12
 800637a:	461a      	mov	r2, r3
 800637c:	2102      	movs	r1, #2
 800637e:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 8006382:	f7ff fb61 	bl	8005a48 <mpu_write_mem>
 8006386:	4603      	mov	r3, r0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	cccccccd 	.word	0xcccccccd

08006394 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	4603      	mov	r3, r0
 800639c:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800639e:	88fb      	ldrh	r3, [r7, #6]
 80063a0:	4a0c      	ldr	r2, [pc, #48]	; (80063d4 <dmp_set_tap_time_multi+0x40>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	089b      	lsrs	r3, r3, #2
 80063a8:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 80063aa:	89fb      	ldrh	r3, [r7, #14]
 80063ac:	0a1b      	lsrs	r3, r3, #8
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 80063b4:	89fb      	ldrh	r3, [r7, #14]
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 80063ba:	f107 030c 	add.w	r3, r7, #12
 80063be:	461a      	mov	r2, r3
 80063c0:	2102      	movs	r1, #2
 80063c2:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 80063c6:	f7ff fb3f 	bl	8005a48 <mpu_write_mem>
 80063ca:	4603      	mov	r3, r0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	cccccccd 	.word	0xcccccccd

080063d8 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	460b      	mov	r3, r1
 80063e2:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a13      	ldr	r2, [pc, #76]	; (8006434 <dmp_set_shake_reject_thresh+0x5c>)
 80063e8:	fb82 1203 	smull	r1, r2, r2, r3
 80063ec:	1192      	asrs	r2, r2, #6
 80063ee:	17db      	asrs	r3, r3, #31
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	887a      	ldrh	r2, [r7, #2]
 80063f4:	fb02 f303 	mul.w	r3, r2, r3
 80063f8:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	161b      	asrs	r3, r3, #24
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	141b      	asrs	r3, r3, #16
 8006406:	b2db      	uxtb	r3, r3
 8006408:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	121b      	asrs	r3, r3, #8
 800640e:	b2db      	uxtb	r3, r3
 8006410:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 8006418:	f107 0308 	add.w	r3, r7, #8
 800641c:	461a      	mov	r2, r3
 800641e:	2104      	movs	r1, #4
 8006420:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 8006424:	f7ff fb10 	bl	8005a48 <mpu_write_mem>
 8006428:	4603      	mov	r3, r0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	10624dd3 	.word	0x10624dd3

08006438 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8006442:	88fb      	ldrh	r3, [r7, #6]
 8006444:	4a0c      	ldr	r2, [pc, #48]	; (8006478 <dmp_set_shake_reject_time+0x40>)
 8006446:	fba2 2303 	umull	r2, r3, r2, r3
 800644a:	089b      	lsrs	r3, r3, #2
 800644c:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800644e:	88fb      	ldrh	r3, [r7, #6]
 8006450:	0a1b      	lsrs	r3, r3, #8
 8006452:	b29b      	uxth	r3, r3
 8006454:	b2db      	uxtb	r3, r3
 8006456:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8006458:	88fb      	ldrh	r3, [r7, #6]
 800645a:	b2db      	uxtb	r3, r3
 800645c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 800645e:	f107 030c 	add.w	r3, r7, #12
 8006462:	461a      	mov	r2, r3
 8006464:	2102      	movs	r1, #2
 8006466:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 800646a:	f7ff faed 	bl	8005a48 <mpu_write_mem>
 800646e:	4603      	mov	r3, r0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	cccccccd 	.word	0xcccccccd

0800647c <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	4603      	mov	r3, r0
 8006484:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	4a0c      	ldr	r2, [pc, #48]	; (80064bc <dmp_set_shake_reject_timeout+0x40>)
 800648a:	fba2 2303 	umull	r2, r3, r2, r3
 800648e:	089b      	lsrs	r3, r3, #2
 8006490:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8006492:	88fb      	ldrh	r3, [r7, #6]
 8006494:	0a1b      	lsrs	r3, r3, #8
 8006496:	b29b      	uxth	r3, r3
 8006498:	b2db      	uxtb	r3, r3
 800649a:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800649c:	88fb      	ldrh	r3, [r7, #6]
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 80064a2:	f107 030c 	add.w	r3, r7, #12
 80064a6:	461a      	mov	r2, r3
 80064a8:	2102      	movs	r1, #2
 80064aa:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80064ae:	f7ff facb 	bl	8005a48 <mpu_write_mem>
 80064b2:	4603      	mov	r3, r0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	cccccccd 	.word	0xcccccccd

080064c0 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	4603      	mov	r3, r0
 80064c8:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 80064ca:	2302      	movs	r3, #2
 80064cc:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 80064ce:	23ca      	movs	r3, #202	; 0xca
 80064d0:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 80064d2:	23e3      	movs	r3, #227	; 0xe3
 80064d4:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 80064d6:	2309      	movs	r3, #9
 80064d8:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 80064da:	f107 030c 	add.w	r3, r7, #12
 80064de:	461a      	mov	r2, r3
 80064e0:	2104      	movs	r1, #4
 80064e2:	2068      	movs	r0, #104	; 0x68
 80064e4:	f7ff fab0 	bl	8005a48 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 80064e8:	23a3      	movs	r3, #163	; 0xa3
 80064ea:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 80064ec:	88fb      	ldrh	r3, [r7, #6]
 80064ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d006      	beq.n	8006504 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 80064f6:	23c0      	movs	r3, #192	; 0xc0
 80064f8:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 80064fa:	23c8      	movs	r3, #200	; 0xc8
 80064fc:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 80064fe:	23c2      	movs	r3, #194	; 0xc2
 8006500:	73fb      	strb	r3, [r7, #15]
 8006502:	e005      	b.n	8006510 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 8006504:	23a3      	movs	r3, #163	; 0xa3
 8006506:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 8006508:	23a3      	movs	r3, #163	; 0xa3
 800650a:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 800650c:	23a3      	movs	r3, #163	; 0xa3
 800650e:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8006510:	88fb      	ldrh	r3, [r7, #6]
 8006512:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006516:	2b00      	cmp	r3, #0
 8006518:	d006      	beq.n	8006528 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 800651a:	23c4      	movs	r3, #196	; 0xc4
 800651c:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 800651e:	23cc      	movs	r3, #204	; 0xcc
 8006520:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 8006522:	23c6      	movs	r3, #198	; 0xc6
 8006524:	74bb      	strb	r3, [r7, #18]
 8006526:	e005      	b.n	8006534 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 8006528:	23a3      	movs	r3, #163	; 0xa3
 800652a:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 800652c:	23a3      	movs	r3, #163	; 0xa3
 800652e:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 8006530:	23a3      	movs	r3, #163	; 0xa3
 8006532:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 8006534:	23a3      	movs	r3, #163	; 0xa3
 8006536:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 8006538:	23a3      	movs	r3, #163	; 0xa3
 800653a:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 800653c:	23a3      	movs	r3, #163	; 0xa3
 800653e:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 8006540:	f107 030c 	add.w	r3, r7, #12
 8006544:	461a      	mov	r2, r3
 8006546:	210a      	movs	r1, #10
 8006548:	f640 20a7 	movw	r0, #2727	; 0xaa7
 800654c:	f7ff fa7c 	bl	8005a48 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8006550:	88fb      	ldrh	r3, [r7, #6]
 8006552:	f003 0303 	and.w	r3, r3, #3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 800655a:	2320      	movs	r3, #32
 800655c:	733b      	strb	r3, [r7, #12]
 800655e:	e001      	b.n	8006564 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 8006560:	23d8      	movs	r3, #216	; 0xd8
 8006562:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 8006564:	f107 030c 	add.w	r3, r7, #12
 8006568:	461a      	mov	r2, r3
 800656a:	2101      	movs	r1, #1
 800656c:	f640 20b6 	movw	r0, #2742	; 0xab6
 8006570:	f7ff fa6a 	bl	8005a48 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 8006574:	88fb      	ldrh	r3, [r7, #6]
 8006576:	f003 0320 	and.w	r3, r3, #32
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 800657e:	2001      	movs	r0, #1
 8006580:	f000 f8c6 	bl	8006710 <dmp_enable_gyro_cal>
 8006584:	e002      	b.n	800658c <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 8006586:	2000      	movs	r0, #0
 8006588:	f000 f8c2 	bl	8006710 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800658c:	88fb      	ldrh	r3, [r7, #6]
 800658e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01d      	beq.n	80065d2 <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8006596:	88fb      	ldrh	r3, [r7, #6]
 8006598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659c:	2b00      	cmp	r3, #0
 800659e:	d008      	beq.n	80065b2 <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 80065a0:	23b2      	movs	r3, #178	; 0xb2
 80065a2:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 80065a4:	238b      	movs	r3, #139	; 0x8b
 80065a6:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 80065a8:	23b6      	movs	r3, #182	; 0xb6
 80065aa:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 80065ac:	239b      	movs	r3, #155	; 0x9b
 80065ae:	73fb      	strb	r3, [r7, #15]
 80065b0:	e007      	b.n	80065c2 <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 80065b2:	23b0      	movs	r3, #176	; 0xb0
 80065b4:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 80065b6:	2380      	movs	r3, #128	; 0x80
 80065b8:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 80065ba:	23b4      	movs	r3, #180	; 0xb4
 80065bc:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 80065be:	2390      	movs	r3, #144	; 0x90
 80065c0:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 80065c2:	f107 030c 	add.w	r3, r7, #12
 80065c6:	461a      	mov	r2, r3
 80065c8:	2104      	movs	r1, #4
 80065ca:	f640 20a2 	movw	r0, #2722	; 0xaa2
 80065ce:	f7ff fa3b 	bl	8005a48 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 80065d2:	88fb      	ldrh	r3, [r7, #6]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d025      	beq.n	8006628 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 80065dc:	23f8      	movs	r3, #248	; 0xf8
 80065de:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 80065e0:	f107 030c 	add.w	r3, r7, #12
 80065e4:	461a      	mov	r2, r3
 80065e6:	2101      	movs	r1, #1
 80065e8:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 80065ec:	f7ff fa2c 	bl	8005a48 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 80065f0:	21fa      	movs	r1, #250	; 0xfa
 80065f2:	2007      	movs	r0, #7
 80065f4:	f7ff fd2e 	bl	8006054 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 80065f8:	2007      	movs	r0, #7
 80065fa:	f7ff fe55 	bl	80062a8 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 80065fe:	2001      	movs	r0, #1
 8006600:	f7ff fe84 	bl	800630c <dmp_set_tap_count>
        dmp_set_tap_time(100);
 8006604:	2064      	movs	r0, #100	; 0x64
 8006606:	f7ff fea3 	bl	8006350 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 800660a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800660e:	f7ff fec1 	bl	8006394 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 8006612:	21c8      	movs	r1, #200	; 0xc8
 8006614:	483c      	ldr	r0, [pc, #240]	; (8006708 <dmp_enable_feature+0x248>)
 8006616:	f7ff fedf 	bl	80063d8 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 800661a:	2028      	movs	r0, #40	; 0x28
 800661c:	f7ff ff0c 	bl	8006438 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 8006620:	200a      	movs	r0, #10
 8006622:	f7ff ff2b 	bl	800647c <dmp_set_shake_reject_timeout>
 8006626:	e009      	b.n	800663c <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 8006628:	23d8      	movs	r3, #216	; 0xd8
 800662a:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800662c:	f107 030c 	add.w	r3, r7, #12
 8006630:	461a      	mov	r2, r3
 8006632:	2101      	movs	r1, #1
 8006634:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 8006638:	f7ff fa06 	bl	8005a48 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 800663c:	88fb      	ldrh	r3, [r7, #6]
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 8006646:	23d9      	movs	r3, #217	; 0xd9
 8006648:	733b      	strb	r3, [r7, #12]
 800664a:	e001      	b.n	8006650 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 800664c:	23d8      	movs	r3, #216	; 0xd8
 800664e:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8006650:	f107 030c 	add.w	r3, r7, #12
 8006654:	461a      	mov	r2, r3
 8006656:	2101      	movs	r1, #1
 8006658:	f240 703d 	movw	r0, #1853	; 0x73d
 800665c:	f7ff f9f4 	bl	8005a48 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 8006660:	88fb      	ldrh	r3, [r7, #6]
 8006662:	f003 0304 	and.w	r3, r3, #4
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 800666a:	2001      	movs	r0, #1
 800666c:	f000 f880 	bl	8006770 <dmp_enable_lp_quat>
 8006670:	e002      	b.n	8006678 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 8006672:	2000      	movs	r0, #0
 8006674:	f000 f87c 	bl	8006770 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8006678:	88fb      	ldrh	r3, [r7, #6]
 800667a:	f003 0310 	and.w	r3, r3, #16
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 8006682:	2001      	movs	r0, #1
 8006684:	f000 f89b 	bl	80067be <dmp_enable_6x_lp_quat>
 8006688:	e002      	b.n	8006690 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 800668a:	2000      	movs	r0, #0
 800668c:	f000 f897 	bl	80067be <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8006690:	88fb      	ldrh	r3, [r7, #6]
 8006692:	f043 0308 	orr.w	r3, r3, #8
 8006696:	b29a      	uxth	r2, r3
 8006698:	4b1c      	ldr	r3, [pc, #112]	; (800670c <dmp_enable_feature+0x24c>)
 800669a:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 800669c:	f7fe fb9e 	bl	8004ddc <mpu_reset_fifo>

    dmp.packet_length = 0;
 80066a0:	4b1a      	ldr	r3, [pc, #104]	; (800670c <dmp_enable_feature+0x24c>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 80066a6:	88fb      	ldrh	r3, [r7, #6]
 80066a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d005      	beq.n	80066bc <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 80066b0:	4b16      	ldr	r3, [pc, #88]	; (800670c <dmp_enable_feature+0x24c>)
 80066b2:	7b9b      	ldrb	r3, [r3, #14]
 80066b4:	3306      	adds	r3, #6
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	4b14      	ldr	r3, [pc, #80]	; (800670c <dmp_enable_feature+0x24c>)
 80066ba:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 80066bc:	88fb      	ldrh	r3, [r7, #6]
 80066be:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d005      	beq.n	80066d2 <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 80066c6:	4b11      	ldr	r3, [pc, #68]	; (800670c <dmp_enable_feature+0x24c>)
 80066c8:	7b9b      	ldrb	r3, [r3, #14]
 80066ca:	3306      	adds	r3, #6
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	4b0f      	ldr	r3, [pc, #60]	; (800670c <dmp_enable_feature+0x24c>)
 80066d0:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 80066d2:	88fb      	ldrh	r3, [r7, #6]
 80066d4:	f003 0314 	and.w	r3, r3, #20
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 80066dc:	4b0b      	ldr	r3, [pc, #44]	; (800670c <dmp_enable_feature+0x24c>)
 80066de:	7b9b      	ldrb	r3, [r3, #14]
 80066e0:	3310      	adds	r3, #16
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	4b09      	ldr	r3, [pc, #36]	; (800670c <dmp_enable_feature+0x24c>)
 80066e6:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80066e8:	88fb      	ldrh	r3, [r7, #6]
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 80066f2:	4b06      	ldr	r3, [pc, #24]	; (800670c <dmp_enable_feature+0x24c>)
 80066f4:	7b9b      	ldrb	r3, [r3, #14]
 80066f6:	3304      	adds	r3, #4
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	4b04      	ldr	r3, [pc, #16]	; (800670c <dmp_enable_feature+0x24c>)
 80066fc:	739a      	strb	r2, [r3, #14]

    return 0;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3718      	adds	r7, #24
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	02cae309 	.word	0x02cae309
 800670c:	2000012c 	.word	0x2000012c

08006710 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	4603      	mov	r3, r0
 8006718:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 800671a:	79fb      	ldrb	r3, [r7, #7]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00f      	beq.n	8006740 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8006720:	4a11      	ldr	r2, [pc, #68]	; (8006768 <dmp_enable_gyro_cal+0x58>)
 8006722:	f107 0314 	add.w	r3, r7, #20
 8006726:	ca07      	ldmia	r2, {r0, r1, r2}
 8006728:	c303      	stmia	r3!, {r0, r1}
 800672a:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800672c:	f107 0314 	add.w	r3, r7, #20
 8006730:	461a      	mov	r2, r3
 8006732:	2109      	movs	r1, #9
 8006734:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8006738:	f7ff f986 	bl	8005a48 <mpu_write_mem>
 800673c:	4603      	mov	r3, r0
 800673e:	e00e      	b.n	800675e <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8006740:	4a0a      	ldr	r2, [pc, #40]	; (800676c <dmp_enable_gyro_cal+0x5c>)
 8006742:	f107 0308 	add.w	r3, r7, #8
 8006746:	ca07      	ldmia	r2, {r0, r1, r2}
 8006748:	c303      	stmia	r3!, {r0, r1}
 800674a:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800674c:	f107 0308 	add.w	r3, r7, #8
 8006750:	461a      	mov	r2, r3
 8006752:	2109      	movs	r1, #9
 8006754:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8006758:	f7ff f976 	bl	8005a48 <mpu_write_mem>
 800675c:	4603      	mov	r3, r0
    }
}
 800675e:	4618      	mov	r0, r3
 8006760:	3720      	adds	r7, #32
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	08007b34 	.word	0x08007b34
 800676c:	08007b40 	.word	0x08007b40

08006770 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	4603      	mov	r3, r0
 8006778:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 800677a:	79fb      	ldrb	r3, [r7, #7]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d008      	beq.n	8006792 <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 8006780:	23c0      	movs	r3, #192	; 0xc0
 8006782:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8006784:	23c2      	movs	r3, #194	; 0xc2
 8006786:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 8006788:	23c4      	movs	r3, #196	; 0xc4
 800678a:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 800678c:	23c6      	movs	r3, #198	; 0xc6
 800678e:	73fb      	strb	r3, [r7, #15]
 8006790:	e006      	b.n	80067a0 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 8006792:	f107 030c 	add.w	r3, r7, #12
 8006796:	2204      	movs	r2, #4
 8006798:	218b      	movs	r1, #139	; 0x8b
 800679a:	4618      	mov	r0, r3
 800679c:	f001 f97e 	bl	8007a9c <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 80067a0:	f107 030c 	add.w	r3, r7, #12
 80067a4:	461a      	mov	r2, r3
 80067a6:	2104      	movs	r1, #4
 80067a8:	f640 2098 	movw	r0, #2712	; 0xa98
 80067ac:	f7ff f94c 	bl	8005a48 <mpu_write_mem>

    return mpu_reset_fifo();
 80067b0:	f7fe fb14 	bl	8004ddc <mpu_reset_fifo>
 80067b4:	4603      	mov	r3, r0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	4603      	mov	r3, r0
 80067c6:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d008      	beq.n	80067e0 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 80067ce:	2320      	movs	r3, #32
 80067d0:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 80067d2:	2328      	movs	r3, #40	; 0x28
 80067d4:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 80067d6:	2330      	movs	r3, #48	; 0x30
 80067d8:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 80067da:	2338      	movs	r3, #56	; 0x38
 80067dc:	73fb      	strb	r3, [r7, #15]
 80067de:	e006      	b.n	80067ee <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 80067e0:	f107 030c 	add.w	r3, r7, #12
 80067e4:	2204      	movs	r2, #4
 80067e6:	21a3      	movs	r1, #163	; 0xa3
 80067e8:	4618      	mov	r0, r3
 80067ea:	f001 f957 	bl	8007a9c <memset>

    mpu_write_mem(CFG_8, 4, regs);
 80067ee:	f107 030c 	add.w	r3, r7, #12
 80067f2:	461a      	mov	r2, r3
 80067f4:	2104      	movs	r1, #4
 80067f6:	f640 209e 	movw	r0, #2718	; 0xa9e
 80067fa:	f7ff f925 	bl	8005a48 <mpu_write_mem>

    return mpu_reset_fifo();
 80067fe:	f7fe faed 	bl	8004ddc <mpu_reset_fifo>
 8006802:	4603      	mov	r3, r0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3303      	adds	r3, #3
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800681e:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3303      	adds	r3, #3
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800682a:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3301      	adds	r3, #1
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d012      	beq.n	8006860 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 800683a:	7bbb      	ldrb	r3, [r7, #14]
 800683c:	08db      	lsrs	r3, r3, #3
 800683e:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 8006840:	7bbb      	ldrb	r3, [r7, #14]
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	b2db      	uxtb	r3, r3
 8006848:	3301      	adds	r3, #1
 800684a:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 800684c:	4b10      	ldr	r3, [pc, #64]	; (8006890 <decode_gesture+0x84>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 8006854:	4b0e      	ldr	r3, [pc, #56]	; (8006890 <decode_gesture+0x84>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	7b39      	ldrb	r1, [r7, #12]
 800685a:	7b7a      	ldrb	r2, [r7, #13]
 800685c:	4610      	mov	r0, r2
 800685e:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3301      	adds	r3, #1
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	f003 0308 	and.w	r3, r3, #8
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 800686e:	4b08      	ldr	r3, [pc, #32]	; (8006890 <decode_gesture+0x84>)
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d006      	beq.n	8006884 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 8006876:	4b06      	ldr	r3, [pc, #24]	; (8006890 <decode_gesture+0x84>)
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	7bfa      	ldrb	r2, [r7, #15]
 800687c:	0992      	lsrs	r2, r2, #6
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	4610      	mov	r0, r2
 8006882:	4798      	blx	r3
    }

    return 0;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	2000012c 	.word	0x2000012c

08006894 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b092      	sub	sp, #72	; 0x48
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 80068a2:	2300      	movs	r3, #0
 80068a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 80068a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068aa:	2200      	movs	r2, #0
 80068ac:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 80068ae:	4baf      	ldr	r3, [pc, #700]	; (8006b6c <dmp_read_fifo+0x2d8>)
 80068b0:	7b9b      	ldrb	r3, [r3, #14]
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	f107 0120 	add.w	r1, r7, #32
 80068b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe fed2 	bl	8005664 <mpu_read_fifo_stream>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <dmp_read_fifo+0x38>
        return -1;
 80068c6:	f04f 33ff 	mov.w	r3, #4294967295
 80068ca:	e14a      	b.n	8006b62 <dmp_read_fifo+0x2ce>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 80068cc:	4ba7      	ldr	r3, [pc, #668]	; (8006b6c <dmp_read_fifo+0x2d8>)
 80068ce:	895b      	ldrh	r3, [r3, #10]
 80068d0:	f003 0314 	and.w	r3, r3, #20
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 808a 	beq.w	80069ee <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 80068da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80068de:	061a      	lsls	r2, r3, #24
 80068e0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80068e4:	041b      	lsls	r3, r3, #16
 80068e6:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 80068e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80068ec:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 80068ee:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 80068f0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80068f4:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80068fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80068fe:	061a      	lsls	r2, r3, #24
 8006900:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006904:	041b      	lsls	r3, r3, #16
 8006906:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8006908:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800690c:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800690e:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8006910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006914:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800691a:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800691c:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800691e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006922:	061a      	lsls	r2, r3, #24
 8006924:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006928:	041b      	lsls	r3, r3, #16
 800692a:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800692c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006930:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8006932:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8006934:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006938:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800693e:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8006940:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8006942:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006946:	061a      	lsls	r2, r3, #24
 8006948:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800694c:	041b      	lsls	r3, r3, #16
 800694e:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8006950:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006954:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8006956:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8006958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800695c:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8006962:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8006964:	601a      	str	r2, [r3, #0]
        ii += 16;
 8006966:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800696a:	3310      	adds	r3, #16
 800696c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	141b      	asrs	r3, r3, #16
 8006976:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3304      	adds	r3, #4
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	141b      	asrs	r3, r3, #16
 8006980:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3308      	adds	r3, #8
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	141b      	asrs	r3, r3, #16
 800698a:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	330c      	adds	r3, #12
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	141b      	asrs	r3, r3, #16
 8006994:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	fb03 f202 	mul.w	r2, r3, r2
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	6979      	ldr	r1, [r7, #20]
 80069a2:	fb01 f303 	mul.w	r3, r1, r3
 80069a6:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	69b9      	ldr	r1, [r7, #24]
 80069ac:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 80069b0:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	69f9      	ldr	r1, [r7, #28]
 80069b6:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 80069ba:	4413      	add	r3, r2
 80069bc:	643b      	str	r3, [r7, #64]	; 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 80069be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80069c4:	db03      	blt.n	80069ce <dmp_read_fifo+0x13a>
 80069c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c8:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
 80069cc:	dd07      	ble.n	80069de <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 80069ce:	f7fe fa05 	bl	8004ddc <mpu_reset_fifo>
            sensors[0] = 0;
 80069d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d4:	2200      	movs	r2, #0
 80069d6:	801a      	strh	r2, [r3, #0]
            return -1;
 80069d8:	f04f 33ff 	mov.w	r3, #4294967295
 80069dc:	e0c1      	b.n	8006b62 <dmp_read_fifo+0x2ce>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 80069de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069e8:	b21a      	sxth	r2, r3
 80069ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069ec:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 80069ee:	4b5f      	ldr	r3, [pc, #380]	; (8006b6c <dmp_read_fifo+0x2d8>)
 80069f0:	895b      	ldrh	r3, [r3, #10]
 80069f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d04c      	beq.n	8006a94 <dmp_read_fifo+0x200>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80069fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80069fe:	3348      	adds	r3, #72	; 0x48
 8006a00:	443b      	add	r3, r7
 8006a02:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006a06:	021b      	lsls	r3, r3, #8
 8006a08:	b21a      	sxth	r2, r3
 8006a0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a0e:	3301      	adds	r3, #1
 8006a10:	3348      	adds	r3, #72	; 0x48
 8006a12:	443b      	add	r3, r7
 8006a14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006a18:	b21b      	sxth	r3, r3
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	b21a      	sxth	r2, r3
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8006a22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a26:	3302      	adds	r3, #2
 8006a28:	3348      	adds	r3, #72	; 0x48
 8006a2a:	443b      	add	r3, r7
 8006a2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006a30:	021b      	lsls	r3, r3, #8
 8006a32:	b219      	sxth	r1, r3
 8006a34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a38:	3303      	adds	r3, #3
 8006a3a:	3348      	adds	r3, #72	; 0x48
 8006a3c:	443b      	add	r3, r7
 8006a3e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006a42:	b21a      	sxth	r2, r3
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	3302      	adds	r3, #2
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	b212      	sxth	r2, r2
 8006a4c:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8006a4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a52:	3304      	adds	r3, #4
 8006a54:	3348      	adds	r3, #72	; 0x48
 8006a56:	443b      	add	r3, r7
 8006a58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006a5c:	021b      	lsls	r3, r3, #8
 8006a5e:	b219      	sxth	r1, r3
 8006a60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a64:	3305      	adds	r3, #5
 8006a66:	3348      	adds	r3, #72	; 0x48
 8006a68:	443b      	add	r3, r7
 8006a6a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006a6e:	b21a      	sxth	r2, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	3304      	adds	r3, #4
 8006a74:	430a      	orrs	r2, r1
 8006a76:	b212      	sxth	r2, r2
 8006a78:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8006a7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a7e:	3306      	adds	r3, #6
 8006a80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 8006a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a8a:	f043 0308 	orr.w	r3, r3, #8
 8006a8e:	b21a      	sxth	r2, r3
 8006a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a92:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8006a94:	4b35      	ldr	r3, [pc, #212]	; (8006b6c <dmp_read_fifo+0x2d8>)
 8006a96:	895b      	ldrh	r3, [r3, #10]
 8006a98:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d04c      	beq.n	8006b3a <dmp_read_fifo+0x2a6>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8006aa0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006aa4:	3348      	adds	r3, #72	; 0x48
 8006aa6:	443b      	add	r3, r7
 8006aa8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006aac:	021b      	lsls	r3, r3, #8
 8006aae:	b21a      	sxth	r2, r3
 8006ab0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	3348      	adds	r3, #72	; 0x48
 8006ab8:	443b      	add	r3, r7
 8006aba:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006abe:	b21b      	sxth	r3, r3
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	b21a      	sxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8006ac8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006acc:	3302      	adds	r3, #2
 8006ace:	3348      	adds	r3, #72	; 0x48
 8006ad0:	443b      	add	r3, r7
 8006ad2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006ad6:	021b      	lsls	r3, r3, #8
 8006ad8:	b219      	sxth	r1, r3
 8006ada:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006ade:	3303      	adds	r3, #3
 8006ae0:	3348      	adds	r3, #72	; 0x48
 8006ae2:	443b      	add	r3, r7
 8006ae4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006ae8:	b21a      	sxth	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3302      	adds	r3, #2
 8006aee:	430a      	orrs	r2, r1
 8006af0:	b212      	sxth	r2, r2
 8006af2:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8006af4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006af8:	3304      	adds	r3, #4
 8006afa:	3348      	adds	r3, #72	; 0x48
 8006afc:	443b      	add	r3, r7
 8006afe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006b02:	021b      	lsls	r3, r3, #8
 8006b04:	b219      	sxth	r1, r3
 8006b06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006b0a:	3305      	adds	r3, #5
 8006b0c:	3348      	adds	r3, #72	; 0x48
 8006b0e:	443b      	add	r3, r7
 8006b10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006b14:	b21a      	sxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	3304      	adds	r3, #4
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	b212      	sxth	r2, r2
 8006b1e:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8006b20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006b24:	3306      	adds	r3, #6
 8006b26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
 8006b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b30:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006b34:	b21a      	sxth	r2, r3
 8006b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b38:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8006b3a:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <dmp_read_fifo+0x2d8>)
 8006b3c:	895b      	ldrh	r3, [r3, #10]
 8006b3e:	f003 0303 	and.w	r3, r3, #3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d007      	beq.n	8006b56 <dmp_read_fifo+0x2c2>
        decode_gesture(fifo_data + ii);
 8006b46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006b4a:	f107 0220 	add.w	r2, r7, #32
 8006b4e:	4413      	add	r3, r2
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7ff fe5b 	bl	800680c <decode_gesture>

    get_ms(timestamp);
 8006b56:	f7fa fc31 	bl	80013bc <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	601a      	str	r2, [r3, #0]
    return 0;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3748      	adds	r7, #72	; 0x48
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	2000012c 	.word	0x2000012c

08006b70 <inv_row_2_scale>:
		return -1;
	}
	return 0;
}

static unsigned short inv_row_2_scale(const signed char *row) {
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
	unsigned short b;

	if (row[0] > 0)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f993 3000 	ldrsb.w	r3, [r3]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	dd02      	ble.n	8006b88 <inv_row_2_scale+0x18>
		b = 0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	81fb      	strh	r3, [r7, #14]
 8006b86:	e02d      	b.n	8006be4 <inv_row_2_scale+0x74>
	else if (row[0] < 0)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f993 3000 	ldrsb.w	r3, [r3]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	da02      	bge.n	8006b98 <inv_row_2_scale+0x28>
		b = 4;
 8006b92:	2304      	movs	r3, #4
 8006b94:	81fb      	strh	r3, [r7, #14]
 8006b96:	e025      	b.n	8006be4 <inv_row_2_scale+0x74>
	else if (row[1] > 0)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	f993 3000 	ldrsb.w	r3, [r3]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	dd02      	ble.n	8006baa <inv_row_2_scale+0x3a>
		b = 1;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	81fb      	strh	r3, [r7, #14]
 8006ba8:	e01c      	b.n	8006be4 <inv_row_2_scale+0x74>
	else if (row[1] < 0)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	3301      	adds	r3, #1
 8006bae:	f993 3000 	ldrsb.w	r3, [r3]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	da02      	bge.n	8006bbc <inv_row_2_scale+0x4c>
		b = 5;
 8006bb6:	2305      	movs	r3, #5
 8006bb8:	81fb      	strh	r3, [r7, #14]
 8006bba:	e013      	b.n	8006be4 <inv_row_2_scale+0x74>
	else if (row[2] > 0)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	3302      	adds	r3, #2
 8006bc0:	f993 3000 	ldrsb.w	r3, [r3]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	dd02      	ble.n	8006bce <inv_row_2_scale+0x5e>
		b = 2;
 8006bc8:	2302      	movs	r3, #2
 8006bca:	81fb      	strh	r3, [r7, #14]
 8006bcc:	e00a      	b.n	8006be4 <inv_row_2_scale+0x74>
	else if (row[2] < 0)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3302      	adds	r3, #2
 8006bd2:	f993 3000 	ldrsb.w	r3, [r3]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	da02      	bge.n	8006be0 <inv_row_2_scale+0x70>
		b = 6;
 8006bda:	2306      	movs	r3, #6
 8006bdc:	81fb      	strh	r3, [r7, #14]
 8006bde:	e001      	b.n	8006be4 <inv_row_2_scale+0x74>
	else
		b = 7;      // error
 8006be0:	2307      	movs	r3, #7
 8006be2:	81fb      	strh	r3, [r7, #14]
	return b;
 8006be4:	89fb      	ldrh	r3, [r7, #14]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bc80      	pop	{r7}
 8006bee:	4770      	bx	lr

08006bf0 <inv_orientation_matrix_to_scalar>:

static unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx) {
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
	 YZX  000_010_001
	 ZXY  001_000_010
	 ZYX  000_001_010
	 */

	scalar = inv_row_2_scale(mtx);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff ffb9 	bl	8006b70 <inv_row_2_scale>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	81fb      	strh	r3, [r7, #14]
	scalar |= inv_row_2_scale(mtx + 3) << 3;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3303      	adds	r3, #3
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7ff ffb2 	bl	8006b70 <inv_row_2_scale>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	b21a      	sxth	r2, r3
 8006c12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	b21b      	sxth	r3, r3
 8006c1a:	81fb      	strh	r3, [r7, #14]
	scalar |= inv_row_2_scale(mtx + 6) << 6;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3306      	adds	r3, #6
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff ffa5 	bl	8006b70 <inv_row_2_scale>
 8006c26:	4603      	mov	r3, r0
 8006c28:	019b      	lsls	r3, r3, #6
 8006c2a:	b21a      	sxth	r2, r3
 8006c2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	b21b      	sxth	r3, r3
 8006c34:	81fb      	strh	r3, [r7, #14]

	return scalar;
 8006c36:	89fb      	ldrh	r3, [r7, #14]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <MPU6050_DMP_Init>:

int MPU6050_DMP_Init() {
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
	int result;
	struct int_param_s int_param;

	result = mpu_init(&int_param);      //MPU初始化
 8006c46:	1d3b      	adds	r3, r7, #4
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fd ff7b 	bl	8004b44 <mpu_init>
 8006c4e:	6078      	str	r0, [r7, #4]
	if (result != 0) {
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <MPU6050_DMP_Init+0x1c>
		return -1;
 8006c56:	f04f 33ff 	mov.w	r3, #4294967295
 8006c5a:	e054      	b.n	8006d06 <MPU6050_DMP_Init+0xc6>
	}
	result = mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);      //设置传感器
 8006c5c:	2078      	movs	r0, #120	; 0x78
 8006c5e:	f7fe fc65 	bl	800552c <mpu_set_sensors>
 8006c62:	6078      	str	r0, [r7, #4]
	if (result != 0) {
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <MPU6050_DMP_Init+0x30>
		return -2;
 8006c6a:	f06f 0301 	mvn.w	r3, #1
 8006c6e:	e04a      	b.n	8006d06 <MPU6050_DMP_Init+0xc6>
	}
	result = mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);      //设置fifo
 8006c70:	2078      	movs	r0, #120	; 0x78
 8006c72:	f7fe fc09 	bl	8005488 <mpu_configure_fifo>
 8006c76:	6078      	str	r0, [r7, #4]
	if (result != 0) {
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d002      	beq.n	8006c84 <MPU6050_DMP_Init+0x44>
		return -3;
 8006c7e:	f06f 0302 	mvn.w	r3, #2
 8006c82:	e040      	b.n	8006d06 <MPU6050_DMP_Init+0xc6>
	}
	result = mpu_set_sample_rate(DEFAULT_MPU_HZ);      //设置采样频率
 8006c84:	2064      	movs	r0, #100	; 0x64
 8006c86:	f7fe fb8d 	bl	80053a4 <mpu_set_sample_rate>
 8006c8a:	6078      	str	r0, [r7, #4]
	if (result != 0) {
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <MPU6050_DMP_Init+0x58>
		return -4;
 8006c92:	f06f 0303 	mvn.w	r3, #3
 8006c96:	e036      	b.n	8006d06 <MPU6050_DMP_Init+0xc6>
	}
	result = dmp_load_motion_driver_firmware();      //加载固件
 8006c98:	f7ff f898 	bl	8005dcc <dmp_load_motion_driver_firmware>
 8006c9c:	6078      	str	r0, [r7, #4]
	if (result != 0) {
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <MPU6050_DMP_Init+0x6a>
		return -5;
 8006ca4:	f06f 0304 	mvn.w	r3, #4
 8006ca8:	e02d      	b.n	8006d06 <MPU6050_DMP_Init+0xc6>
	}
	result = dmp_set_orientation(
 8006caa:	4819      	ldr	r0, [pc, #100]	; (8006d10 <MPU6050_DMP_Init+0xd0>)
 8006cac:	f7ff ffa0 	bl	8006bf0 <inv_orientation_matrix_to_scalar>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7ff f89a 	bl	8005dec <dmp_set_orientation>
 8006cb8:	6078      	str	r0, [r7, #4]
			inv_orientation_matrix_to_scalar(gyro_orientation));      //设置方向
	if (result != 0) {
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <MPU6050_DMP_Init+0x86>
		return -6;
 8006cc0:	f06f 0305 	mvn.w	r3, #5
 8006cc4:	e01f      	b.n	8006d06 <MPU6050_DMP_Init+0xc6>
	}
	result = dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
 8006cc6:	f240 1073 	movw	r0, #371	; 0x173
 8006cca:	f7ff fbf9 	bl	80064c0 <dmp_enable_feature>
 8006cce:	6078      	str	r0, [r7, #4]
	DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL |
	DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL);      //设置DMP功能
	if (result != 0) {
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <MPU6050_DMP_Init+0x9c>
		return -7;
 8006cd6:	f06f 0306 	mvn.w	r3, #6
 8006cda:	e014      	b.n	8006d06 <MPU6050_DMP_Init+0xc6>
	}
	result = dmp_set_fifo_rate(DEFAULT_MPU_HZ);      //设置输出速率
 8006cdc:	2064      	movs	r0, #100	; 0x64
 8006cde:	f7ff f971 	bl	8005fc4 <dmp_set_fifo_rate>
 8006ce2:	6078      	str	r0, [r7, #4]
	if (result != 0) {
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <MPU6050_DMP_Init+0xb0>
		return -8;
 8006cea:	f06f 0307 	mvn.w	r3, #7
 8006cee:	e00a      	b.n	8006d06 <MPU6050_DMP_Init+0xc6>
	}
//	result = run_self_test();      //自检
//	if (result != 0) {
//		return -9;
//	}
	result = mpu_set_dmp_state(1);      //使能dmp
 8006cf0:	2001      	movs	r0, #1
 8006cf2:	f7ff f803 	bl	8005cfc <mpu_set_dmp_state>
 8006cf6:	6078      	str	r0, [r7, #4]
	if (result != 0) {
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <MPU6050_DMP_Init+0xc4>
		return -10;
 8006cfe:	f06f 0309 	mvn.w	r3, #9
 8006d02:	e000      	b.n	8006d06 <MPU6050_DMP_Init+0xc6>
	}
	return 0;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	2000003c 	.word	0x2000003c
 8006d14:	00000000 	.word	0x00000000

08006d18 <MPU6050_DMP_Get_Data>:



int MPU6050_DMP_Get_Data(float *pitch, float *roll, float *yaw) {
 8006d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d1a:	b095      	sub	sp, #84	; 0x54
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
	float q0 = 0.0f;
 8006d24:	f04f 0300 	mov.w	r3, #0
 8006d28:	647b      	str	r3, [r7, #68]	; 0x44
	float q1 = 0.0f;
 8006d2a:	f04f 0300 	mov.w	r3, #0
 8006d2e:	643b      	str	r3, [r7, #64]	; 0x40
	float q2 = 0.0f;
 8006d30:	f04f 0300 	mov.w	r3, #0
 8006d34:	63fb      	str	r3, [r7, #60]	; 0x3c
	float q3 = 0.0f;
 8006d36:	f04f 0300 	mov.w	r3, #0
 8006d3a:	63bb      	str	r3, [r7, #56]	; 0x38
	short accel[3];
	short sensors;
	unsigned char more;
	long quat[4];
	unsigned long timestamp;
	if (dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors, &more)) {
 8006d3c:	f107 0410 	add.w	r4, r7, #16
 8006d40:	f107 0214 	add.w	r2, r7, #20
 8006d44:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006d48:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8006d4c:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	4623      	mov	r3, r4
 8006d5a:	f7ff fd9b 	bl	8006894 <dmp_read_fifo>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <MPU6050_DMP_Get_Data+0x52>
		return -1;
 8006d64:	f04f 33ff 	mov.w	r3, #4294967295
 8006d68:	e11c      	b.n	8006fa4 <MPU6050_DMP_Get_Data+0x28c>
	}
	if (sensors & INV_XYZ_ACCEL) {
 8006d6a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	f003 0308 	and.w	r3, r3, #8
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 8114 	beq.w	8006fa2 <MPU6050_DMP_Get_Data+0x28a>

		q0 = quat[0] / Q30;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7f9 ff5d 	bl	8000c3c <__aeabi_i2f>
 8006d82:	4603      	mov	r3, r0
 8006d84:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fa f85f 	bl	8000e4c <__aeabi_fdiv>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	647b      	str	r3, [r7, #68]	; 0x44
		q1 = quat[1] / Q30;
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7f9 ff51 	bl	8000c3c <__aeabi_i2f>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fa f853 	bl	8000e4c <__aeabi_fdiv>
 8006da6:	4603      	mov	r3, r0
 8006da8:	643b      	str	r3, [r7, #64]	; 0x40
		q2 = quat[2] / Q30;
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7f9 ff45 	bl	8000c3c <__aeabi_i2f>
 8006db2:	4603      	mov	r3, r0
 8006db4:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fa f847 	bl	8000e4c <__aeabi_fdiv>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
		q3 = quat[3] / Q30;
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7f9 ff39 	bl	8000c3c <__aeabi_i2f>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fa f83b 	bl	8000e4c <__aeabi_fdiv>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	63bb      	str	r3, [r7, #56]	; 0x38

		*pitch = asin(-2 * q1 * q3 + 2 * q0 * q2) * 57.3;
 8006dda:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8006dde:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006de0:	f7f9 ff80 	bl	8000ce4 <__aeabi_fmul>
 8006de4:	4603      	mov	r3, r0
 8006de6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7f9 ff7b 	bl	8000ce4 <__aeabi_fmul>
 8006dee:	4603      	mov	r3, r0
 8006df0:	461c      	mov	r4, r3
 8006df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006df4:	4619      	mov	r1, r3
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7f9 fe6c 	bl	8000ad4 <__addsf3>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7f9 ff6f 	bl	8000ce4 <__aeabi_fmul>
 8006e06:	4603      	mov	r3, r0
 8006e08:	4619      	mov	r1, r3
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f7f9 fe62 	bl	8000ad4 <__addsf3>
 8006e10:	4603      	mov	r3, r0
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7f9 fb00 	bl	8000418 <__aeabi_f2d>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4619      	mov	r1, r3
 8006e20:	f000 f8ca 	bl	8006fb8 <asin>
 8006e24:	a362      	add	r3, pc, #392	; (adr r3, 8006fb0 <MPU6050_DMP_Get_Data+0x298>)
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	f7f9 fb4d 	bl	80004c8 <__aeabi_dmul>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4610      	mov	r0, r2
 8006e34:	4619      	mov	r1, r3
 8006e36:	f7f9 fdf7 	bl	8000a28 <__aeabi_d2f>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	601a      	str	r2, [r3, #0]
		*roll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2 * q2 + 1)
 8006e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e42:	4619      	mov	r1, r3
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7f9 fe45 	bl	8000ad4 <__addsf3>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7f9 ff48 	bl	8000ce4 <__aeabi_fmul>
 8006e54:	4603      	mov	r3, r0
 8006e56:	461c      	mov	r4, r3
 8006e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7f9 fe39 	bl	8000ad4 <__addsf3>
 8006e62:	4603      	mov	r3, r0
 8006e64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7f9 ff3c 	bl	8000ce4 <__aeabi_fmul>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4620      	mov	r0, r4
 8006e72:	f7f9 fe2f 	bl	8000ad4 <__addsf3>
 8006e76:	4603      	mov	r3, r0
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7f9 facd 	bl	8000418 <__aeabi_f2d>
 8006e7e:	4604      	mov	r4, r0
 8006e80:	460d      	mov	r5, r1
 8006e82:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8006e86:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006e88:	f7f9 ff2c 	bl	8000ce4 <__aeabi_fmul>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7f9 ff27 	bl	8000ce4 <__aeabi_fmul>
 8006e96:	4603      	mov	r3, r0
 8006e98:	461e      	mov	r6, r3
 8006e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7f9 fe18 	bl	8000ad4 <__addsf3>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7f9 ff1b 	bl	8000ce4 <__aeabi_fmul>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f7f9 fe0c 	bl	8000ad0 <__aeabi_fsub>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7f9 fe08 	bl	8000ad4 <__addsf3>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7f9 faa6 	bl	8000418 <__aeabi_f2d>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	f000 f898 	bl	8007008 <atan2>
				* 57.3;
 8006ed8:	a335      	add	r3, pc, #212	; (adr r3, 8006fb0 <MPU6050_DMP_Get_Data+0x298>)
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	f7f9 faf3 	bl	80004c8 <__aeabi_dmul>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	4610      	mov	r0, r2
 8006ee8:	4619      	mov	r1, r3
 8006eea:	f7f9 fd9d 	bl	8000a28 <__aeabi_d2f>
 8006eee:	4602      	mov	r2, r0
		*roll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2 * q2 + 1)
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	601a      	str	r2, [r3, #0]
		*yaw = atan2(2 * (q1 * q2 + q0 * q3),
 8006ef4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ef6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006ef8:	f7f9 fef4 	bl	8000ce4 <__aeabi_fmul>
 8006efc:	4603      	mov	r3, r0
 8006efe:	461c      	mov	r4, r3
 8006f00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f02:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006f04:	f7f9 feee 	bl	8000ce4 <__aeabi_fmul>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f7f9 fde1 	bl	8000ad4 <__addsf3>
 8006f12:	4603      	mov	r3, r0
 8006f14:	4619      	mov	r1, r3
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7f9 fddc 	bl	8000ad4 <__addsf3>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7f9 fa7a 	bl	8000418 <__aeabi_f2d>
 8006f24:	4604      	mov	r4, r0
 8006f26:	460d      	mov	r5, r1
				q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3) * 57.3;
 8006f28:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f2a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006f2c:	f7f9 feda 	bl	8000ce4 <__aeabi_fmul>
 8006f30:	4603      	mov	r3, r0
 8006f32:	461e      	mov	r6, r3
 8006f34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f36:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006f38:	f7f9 fed4 	bl	8000ce4 <__aeabi_fmul>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	4619      	mov	r1, r3
 8006f40:	4630      	mov	r0, r6
 8006f42:	f7f9 fdc7 	bl	8000ad4 <__addsf3>
 8006f46:	4603      	mov	r3, r0
 8006f48:	461e      	mov	r6, r3
 8006f4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f4c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006f4e:	f7f9 fec9 	bl	8000ce4 <__aeabi_fmul>
 8006f52:	4603      	mov	r3, r0
 8006f54:	4619      	mov	r1, r3
 8006f56:	4630      	mov	r0, r6
 8006f58:	f7f9 fdba 	bl	8000ad0 <__aeabi_fsub>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	461e      	mov	r6, r3
 8006f60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f64:	f7f9 febe 	bl	8000ce4 <__aeabi_fmul>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	f7f9 fdaf 	bl	8000ad0 <__aeabi_fsub>
 8006f72:	4603      	mov	r3, r0
		*yaw = atan2(2 * (q1 * q2 + q0 * q3),
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7f9 fa4f 	bl	8000418 <__aeabi_f2d>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4620      	mov	r0, r4
 8006f80:	4629      	mov	r1, r5
 8006f82:	f000 f841 	bl	8007008 <atan2>
				q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3) * 57.3;
 8006f86:	a30a      	add	r3, pc, #40	; (adr r3, 8006fb0 <MPU6050_DMP_Get_Data+0x298>)
 8006f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8c:	f7f9 fa9c 	bl	80004c8 <__aeabi_dmul>
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4610      	mov	r0, r2
 8006f96:	4619      	mov	r1, r3
 8006f98:	f7f9 fd46 	bl	8000a28 <__aeabi_d2f>
 8006f9c:	4602      	mov	r2, r0
		*yaw = atan2(2 * (q1 * q2 + q0 * q3),
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	601a      	str	r2, [r3, #0]
	}
	return 0;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	374c      	adds	r7, #76	; 0x4c
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fac:	f3af 8000 	nop.w
 8006fb0:	66666666 	.word	0x66666666
 8006fb4:	404ca666 	.word	0x404ca666

08006fb8 <asin>:
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fba:	4604      	mov	r4, r0
 8006fbc:	460d      	mov	r5, r1
 8006fbe:	f000 f82f 	bl	8007020 <__ieee754_asin>
 8006fc2:	4622      	mov	r2, r4
 8006fc4:	4606      	mov	r6, r0
 8006fc6:	460f      	mov	r7, r1
 8006fc8:	462b      	mov	r3, r5
 8006fca:	4620      	mov	r0, r4
 8006fcc:	4629      	mov	r1, r5
 8006fce:	f7f9 fd15 	bl	80009fc <__aeabi_dcmpun>
 8006fd2:	b988      	cbnz	r0, 8006ff8 <asin+0x40>
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	f000 f818 	bl	800700c <fabs>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	4b08      	ldr	r3, [pc, #32]	; (8007000 <asin+0x48>)
 8006fe0:	f7f9 fd02 	bl	80009e8 <__aeabi_dcmpgt>
 8006fe4:	b140      	cbz	r0, 8006ff8 <asin+0x40>
 8006fe6:	f000 fd61 	bl	8007aac <__errno>
 8006fea:	2321      	movs	r3, #33	; 0x21
 8006fec:	6003      	str	r3, [r0, #0]
 8006fee:	4805      	ldr	r0, [pc, #20]	; (8007004 <asin+0x4c>)
 8006ff0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006ff4:	f000 b80e 	b.w	8007014 <nan>
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	4639      	mov	r1, r7
 8006ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ffe:	bf00      	nop
 8007000:	3ff00000 	.word	0x3ff00000
 8007004:	080087da 	.word	0x080087da

08007008 <atan2>:
 8007008:	f000 ba06 	b.w	8007418 <__ieee754_atan2>

0800700c <fabs>:
 800700c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007010:	4619      	mov	r1, r3
 8007012:	4770      	bx	lr

08007014 <nan>:
 8007014:	2000      	movs	r0, #0
 8007016:	4901      	ldr	r1, [pc, #4]	; (800701c <nan+0x8>)
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	7ff80000 	.word	0x7ff80000

08007020 <__ieee754_asin>:
 8007020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007024:	4bc4      	ldr	r3, [pc, #784]	; (8007338 <__ieee754_asin+0x318>)
 8007026:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800702a:	b087      	sub	sp, #28
 800702c:	429e      	cmp	r6, r3
 800702e:	4602      	mov	r2, r0
 8007030:	4604      	mov	r4, r0
 8007032:	460d      	mov	r5, r1
 8007034:	9105      	str	r1, [sp, #20]
 8007036:	dd28      	ble.n	800708a <__ieee754_asin+0x6a>
 8007038:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 800703c:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007040:	4306      	orrs	r6, r0
 8007042:	d114      	bne.n	800706e <__ieee754_asin+0x4e>
 8007044:	a3a2      	add	r3, pc, #648	; (adr r3, 80072d0 <__ieee754_asin+0x2b0>)
 8007046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704a:	f7f9 fa3d 	bl	80004c8 <__aeabi_dmul>
 800704e:	a3a2      	add	r3, pc, #648	; (adr r3, 80072d8 <__ieee754_asin+0x2b8>)
 8007050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007054:	4606      	mov	r6, r0
 8007056:	460f      	mov	r7, r1
 8007058:	4620      	mov	r0, r4
 800705a:	4629      	mov	r1, r5
 800705c:	f7f9 fa34 	bl	80004c8 <__aeabi_dmul>
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	4630      	mov	r0, r6
 8007066:	4639      	mov	r1, r7
 8007068:	f7f9 f878 	bl	800015c <__adddf3>
 800706c:	e006      	b.n	800707c <__ieee754_asin+0x5c>
 800706e:	460b      	mov	r3, r1
 8007070:	f7f9 f872 	bl	8000158 <__aeabi_dsub>
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	f7f9 fb50 	bl	800071c <__aeabi_ddiv>
 800707c:	4604      	mov	r4, r0
 800707e:	460d      	mov	r5, r1
 8007080:	4620      	mov	r0, r4
 8007082:	4629      	mov	r1, r5
 8007084:	b007      	add	sp, #28
 8007086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708a:	4bac      	ldr	r3, [pc, #688]	; (800733c <__ieee754_asin+0x31c>)
 800708c:	429e      	cmp	r6, r3
 800708e:	dc0e      	bgt.n	80070ae <__ieee754_asin+0x8e>
 8007090:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007094:	f280 80ab 	bge.w	80071ee <__ieee754_asin+0x1ce>
 8007098:	a391      	add	r3, pc, #580	; (adr r3, 80072e0 <__ieee754_asin+0x2c0>)
 800709a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709e:	f7f9 f85d 	bl	800015c <__adddf3>
 80070a2:	2200      	movs	r2, #0
 80070a4:	4ba6      	ldr	r3, [pc, #664]	; (8007340 <__ieee754_asin+0x320>)
 80070a6:	f7f9 fc9f 	bl	80009e8 <__aeabi_dcmpgt>
 80070aa:	2800      	cmp	r0, #0
 80070ac:	d1e8      	bne.n	8007080 <__ieee754_asin+0x60>
 80070ae:	4620      	mov	r0, r4
 80070b0:	4629      	mov	r1, r5
 80070b2:	f7ff ffab 	bl	800700c <fabs>
 80070b6:	4602      	mov	r2, r0
 80070b8:	460b      	mov	r3, r1
 80070ba:	2000      	movs	r0, #0
 80070bc:	49a0      	ldr	r1, [pc, #640]	; (8007340 <__ieee754_asin+0x320>)
 80070be:	f7f9 f84b 	bl	8000158 <__aeabi_dsub>
 80070c2:	2200      	movs	r2, #0
 80070c4:	4b9f      	ldr	r3, [pc, #636]	; (8007344 <__ieee754_asin+0x324>)
 80070c6:	f7f9 f9ff 	bl	80004c8 <__aeabi_dmul>
 80070ca:	a387      	add	r3, pc, #540	; (adr r3, 80072e8 <__ieee754_asin+0x2c8>)
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	4604      	mov	r4, r0
 80070d2:	460d      	mov	r5, r1
 80070d4:	f7f9 f9f8 	bl	80004c8 <__aeabi_dmul>
 80070d8:	a385      	add	r3, pc, #532	; (adr r3, 80072f0 <__ieee754_asin+0x2d0>)
 80070da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070de:	f7f9 f83d 	bl	800015c <__adddf3>
 80070e2:	4622      	mov	r2, r4
 80070e4:	462b      	mov	r3, r5
 80070e6:	f7f9 f9ef 	bl	80004c8 <__aeabi_dmul>
 80070ea:	a383      	add	r3, pc, #524	; (adr r3, 80072f8 <__ieee754_asin+0x2d8>)
 80070ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f0:	f7f9 f832 	bl	8000158 <__aeabi_dsub>
 80070f4:	4622      	mov	r2, r4
 80070f6:	462b      	mov	r3, r5
 80070f8:	f7f9 f9e6 	bl	80004c8 <__aeabi_dmul>
 80070fc:	a380      	add	r3, pc, #512	; (adr r3, 8007300 <__ieee754_asin+0x2e0>)
 80070fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007102:	f7f9 f82b 	bl	800015c <__adddf3>
 8007106:	4622      	mov	r2, r4
 8007108:	462b      	mov	r3, r5
 800710a:	f7f9 f9dd 	bl	80004c8 <__aeabi_dmul>
 800710e:	a37e      	add	r3, pc, #504	; (adr r3, 8007308 <__ieee754_asin+0x2e8>)
 8007110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007114:	f7f9 f820 	bl	8000158 <__aeabi_dsub>
 8007118:	4622      	mov	r2, r4
 800711a:	462b      	mov	r3, r5
 800711c:	f7f9 f9d4 	bl	80004c8 <__aeabi_dmul>
 8007120:	a37b      	add	r3, pc, #492	; (adr r3, 8007310 <__ieee754_asin+0x2f0>)
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	f7f9 f819 	bl	800015c <__adddf3>
 800712a:	4622      	mov	r2, r4
 800712c:	462b      	mov	r3, r5
 800712e:	f7f9 f9cb 	bl	80004c8 <__aeabi_dmul>
 8007132:	a379      	add	r3, pc, #484	; (adr r3, 8007318 <__ieee754_asin+0x2f8>)
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	e9cd 0100 	strd	r0, r1, [sp]
 800713c:	4620      	mov	r0, r4
 800713e:	4629      	mov	r1, r5
 8007140:	f7f9 f9c2 	bl	80004c8 <__aeabi_dmul>
 8007144:	a376      	add	r3, pc, #472	; (adr r3, 8007320 <__ieee754_asin+0x300>)
 8007146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714a:	f7f9 f805 	bl	8000158 <__aeabi_dsub>
 800714e:	4622      	mov	r2, r4
 8007150:	462b      	mov	r3, r5
 8007152:	f7f9 f9b9 	bl	80004c8 <__aeabi_dmul>
 8007156:	a374      	add	r3, pc, #464	; (adr r3, 8007328 <__ieee754_asin+0x308>)
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	f7f8 fffe 	bl	800015c <__adddf3>
 8007160:	4622      	mov	r2, r4
 8007162:	462b      	mov	r3, r5
 8007164:	f7f9 f9b0 	bl	80004c8 <__aeabi_dmul>
 8007168:	a371      	add	r3, pc, #452	; (adr r3, 8007330 <__ieee754_asin+0x310>)
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	f7f8 fff3 	bl	8000158 <__aeabi_dsub>
 8007172:	4622      	mov	r2, r4
 8007174:	462b      	mov	r3, r5
 8007176:	f7f9 f9a7 	bl	80004c8 <__aeabi_dmul>
 800717a:	4b71      	ldr	r3, [pc, #452]	; (8007340 <__ieee754_asin+0x320>)
 800717c:	2200      	movs	r2, #0
 800717e:	f7f8 ffed 	bl	800015c <__adddf3>
 8007182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007186:	4620      	mov	r0, r4
 8007188:	4629      	mov	r1, r5
 800718a:	f000 fb9f 	bl	80078cc <__ieee754_sqrt>
 800718e:	4b6e      	ldr	r3, [pc, #440]	; (8007348 <__ieee754_asin+0x328>)
 8007190:	4682      	mov	sl, r0
 8007192:	429e      	cmp	r6, r3
 8007194:	468b      	mov	fp, r1
 8007196:	f340 80d9 	ble.w	800734c <__ieee754_asin+0x32c>
 800719a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800719e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071a2:	f7f9 fabb 	bl	800071c <__aeabi_ddiv>
 80071a6:	4652      	mov	r2, sl
 80071a8:	465b      	mov	r3, fp
 80071aa:	f7f9 f98d 	bl	80004c8 <__aeabi_dmul>
 80071ae:	4652      	mov	r2, sl
 80071b0:	465b      	mov	r3, fp
 80071b2:	f7f8 ffd3 	bl	800015c <__adddf3>
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	f7f8 ffcf 	bl	800015c <__adddf3>
 80071be:	a346      	add	r3, pc, #280	; (adr r3, 80072d8 <__ieee754_asin+0x2b8>)
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	f7f8 ffc8 	bl	8000158 <__aeabi_dsub>
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	a140      	add	r1, pc, #256	; (adr r1, 80072d0 <__ieee754_asin+0x2b0>)
 80071ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071d2:	f7f8 ffc1 	bl	8000158 <__aeabi_dsub>
 80071d6:	9b05      	ldr	r3, [sp, #20]
 80071d8:	4604      	mov	r4, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	bfdc      	itt	le
 80071de:	4602      	movle	r2, r0
 80071e0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80071e4:	460d      	mov	r5, r1
 80071e6:	bfdc      	itt	le
 80071e8:	4614      	movle	r4, r2
 80071ea:	461d      	movle	r5, r3
 80071ec:	e748      	b.n	8007080 <__ieee754_asin+0x60>
 80071ee:	460b      	mov	r3, r1
 80071f0:	f7f9 f96a 	bl	80004c8 <__aeabi_dmul>
 80071f4:	a33c      	add	r3, pc, #240	; (adr r3, 80072e8 <__ieee754_asin+0x2c8>)
 80071f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fa:	4606      	mov	r6, r0
 80071fc:	460f      	mov	r7, r1
 80071fe:	f7f9 f963 	bl	80004c8 <__aeabi_dmul>
 8007202:	a33b      	add	r3, pc, #236	; (adr r3, 80072f0 <__ieee754_asin+0x2d0>)
 8007204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007208:	f7f8 ffa8 	bl	800015c <__adddf3>
 800720c:	4632      	mov	r2, r6
 800720e:	463b      	mov	r3, r7
 8007210:	f7f9 f95a 	bl	80004c8 <__aeabi_dmul>
 8007214:	a338      	add	r3, pc, #224	; (adr r3, 80072f8 <__ieee754_asin+0x2d8>)
 8007216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721a:	f7f8 ff9d 	bl	8000158 <__aeabi_dsub>
 800721e:	4632      	mov	r2, r6
 8007220:	463b      	mov	r3, r7
 8007222:	f7f9 f951 	bl	80004c8 <__aeabi_dmul>
 8007226:	a336      	add	r3, pc, #216	; (adr r3, 8007300 <__ieee754_asin+0x2e0>)
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	f7f8 ff96 	bl	800015c <__adddf3>
 8007230:	4632      	mov	r2, r6
 8007232:	463b      	mov	r3, r7
 8007234:	f7f9 f948 	bl	80004c8 <__aeabi_dmul>
 8007238:	a333      	add	r3, pc, #204	; (adr r3, 8007308 <__ieee754_asin+0x2e8>)
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	f7f8 ff8b 	bl	8000158 <__aeabi_dsub>
 8007242:	4632      	mov	r2, r6
 8007244:	463b      	mov	r3, r7
 8007246:	f7f9 f93f 	bl	80004c8 <__aeabi_dmul>
 800724a:	a331      	add	r3, pc, #196	; (adr r3, 8007310 <__ieee754_asin+0x2f0>)
 800724c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007250:	f7f8 ff84 	bl	800015c <__adddf3>
 8007254:	4632      	mov	r2, r6
 8007256:	463b      	mov	r3, r7
 8007258:	f7f9 f936 	bl	80004c8 <__aeabi_dmul>
 800725c:	a32e      	add	r3, pc, #184	; (adr r3, 8007318 <__ieee754_asin+0x2f8>)
 800725e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007262:	4680      	mov	r8, r0
 8007264:	4689      	mov	r9, r1
 8007266:	4630      	mov	r0, r6
 8007268:	4639      	mov	r1, r7
 800726a:	f7f9 f92d 	bl	80004c8 <__aeabi_dmul>
 800726e:	a32c      	add	r3, pc, #176	; (adr r3, 8007320 <__ieee754_asin+0x300>)
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	f7f8 ff70 	bl	8000158 <__aeabi_dsub>
 8007278:	4632      	mov	r2, r6
 800727a:	463b      	mov	r3, r7
 800727c:	f7f9 f924 	bl	80004c8 <__aeabi_dmul>
 8007280:	a329      	add	r3, pc, #164	; (adr r3, 8007328 <__ieee754_asin+0x308>)
 8007282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007286:	f7f8 ff69 	bl	800015c <__adddf3>
 800728a:	4632      	mov	r2, r6
 800728c:	463b      	mov	r3, r7
 800728e:	f7f9 f91b 	bl	80004c8 <__aeabi_dmul>
 8007292:	a327      	add	r3, pc, #156	; (adr r3, 8007330 <__ieee754_asin+0x310>)
 8007294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007298:	f7f8 ff5e 	bl	8000158 <__aeabi_dsub>
 800729c:	4632      	mov	r2, r6
 800729e:	463b      	mov	r3, r7
 80072a0:	f7f9 f912 	bl	80004c8 <__aeabi_dmul>
 80072a4:	2200      	movs	r2, #0
 80072a6:	4b26      	ldr	r3, [pc, #152]	; (8007340 <__ieee754_asin+0x320>)
 80072a8:	f7f8 ff58 	bl	800015c <__adddf3>
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	4640      	mov	r0, r8
 80072b2:	4649      	mov	r1, r9
 80072b4:	f7f9 fa32 	bl	800071c <__aeabi_ddiv>
 80072b8:	4622      	mov	r2, r4
 80072ba:	462b      	mov	r3, r5
 80072bc:	f7f9 f904 	bl	80004c8 <__aeabi_dmul>
 80072c0:	4602      	mov	r2, r0
 80072c2:	460b      	mov	r3, r1
 80072c4:	4620      	mov	r0, r4
 80072c6:	4629      	mov	r1, r5
 80072c8:	e6ce      	b.n	8007068 <__ieee754_asin+0x48>
 80072ca:	bf00      	nop
 80072cc:	f3af 8000 	nop.w
 80072d0:	54442d18 	.word	0x54442d18
 80072d4:	3ff921fb 	.word	0x3ff921fb
 80072d8:	33145c07 	.word	0x33145c07
 80072dc:	3c91a626 	.word	0x3c91a626
 80072e0:	8800759c 	.word	0x8800759c
 80072e4:	7e37e43c 	.word	0x7e37e43c
 80072e8:	0dfdf709 	.word	0x0dfdf709
 80072ec:	3f023de1 	.word	0x3f023de1
 80072f0:	7501b288 	.word	0x7501b288
 80072f4:	3f49efe0 	.word	0x3f49efe0
 80072f8:	b5688f3b 	.word	0xb5688f3b
 80072fc:	3fa48228 	.word	0x3fa48228
 8007300:	0e884455 	.word	0x0e884455
 8007304:	3fc9c155 	.word	0x3fc9c155
 8007308:	03eb6f7d 	.word	0x03eb6f7d
 800730c:	3fd4d612 	.word	0x3fd4d612
 8007310:	55555555 	.word	0x55555555
 8007314:	3fc55555 	.word	0x3fc55555
 8007318:	b12e9282 	.word	0xb12e9282
 800731c:	3fb3b8c5 	.word	0x3fb3b8c5
 8007320:	1b8d0159 	.word	0x1b8d0159
 8007324:	3fe6066c 	.word	0x3fe6066c
 8007328:	9c598ac8 	.word	0x9c598ac8
 800732c:	40002ae5 	.word	0x40002ae5
 8007330:	1c8a2d4b 	.word	0x1c8a2d4b
 8007334:	40033a27 	.word	0x40033a27
 8007338:	3fefffff 	.word	0x3fefffff
 800733c:	3fdfffff 	.word	0x3fdfffff
 8007340:	3ff00000 	.word	0x3ff00000
 8007344:	3fe00000 	.word	0x3fe00000
 8007348:	3fef3332 	.word	0x3fef3332
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	f7f8 ff04 	bl	800015c <__adddf3>
 8007354:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007358:	4606      	mov	r6, r0
 800735a:	460f      	mov	r7, r1
 800735c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007360:	f7f9 f9dc 	bl	800071c <__aeabi_ddiv>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	4630      	mov	r0, r6
 800736a:	4639      	mov	r1, r7
 800736c:	f7f9 f8ac 	bl	80004c8 <__aeabi_dmul>
 8007370:	f04f 0800 	mov.w	r8, #0
 8007374:	4606      	mov	r6, r0
 8007376:	460f      	mov	r7, r1
 8007378:	4642      	mov	r2, r8
 800737a:	465b      	mov	r3, fp
 800737c:	4640      	mov	r0, r8
 800737e:	4659      	mov	r1, fp
 8007380:	f7f9 f8a2 	bl	80004c8 <__aeabi_dmul>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4620      	mov	r0, r4
 800738a:	4629      	mov	r1, r5
 800738c:	f7f8 fee4 	bl	8000158 <__aeabi_dsub>
 8007390:	4642      	mov	r2, r8
 8007392:	4604      	mov	r4, r0
 8007394:	460d      	mov	r5, r1
 8007396:	465b      	mov	r3, fp
 8007398:	4650      	mov	r0, sl
 800739a:	4659      	mov	r1, fp
 800739c:	f7f8 fede 	bl	800015c <__adddf3>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	4620      	mov	r0, r4
 80073a6:	4629      	mov	r1, r5
 80073a8:	f7f9 f9b8 	bl	800071c <__aeabi_ddiv>
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	f7f8 fed4 	bl	800015c <__adddf3>
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	a113      	add	r1, pc, #76	; (adr r1, 8007408 <__ieee754_asin+0x3e8>)
 80073ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073be:	f7f8 fecb 	bl	8000158 <__aeabi_dsub>
 80073c2:	4602      	mov	r2, r0
 80073c4:	460b      	mov	r3, r1
 80073c6:	4630      	mov	r0, r6
 80073c8:	4639      	mov	r1, r7
 80073ca:	f7f8 fec5 	bl	8000158 <__aeabi_dsub>
 80073ce:	4642      	mov	r2, r8
 80073d0:	4604      	mov	r4, r0
 80073d2:	460d      	mov	r5, r1
 80073d4:	465b      	mov	r3, fp
 80073d6:	4640      	mov	r0, r8
 80073d8:	4659      	mov	r1, fp
 80073da:	f7f8 febf 	bl	800015c <__adddf3>
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	a10b      	add	r1, pc, #44	; (adr r1, 8007410 <__ieee754_asin+0x3f0>)
 80073e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073e8:	f7f8 feb6 	bl	8000158 <__aeabi_dsub>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4620      	mov	r0, r4
 80073f2:	4629      	mov	r1, r5
 80073f4:	f7f8 feb0 	bl	8000158 <__aeabi_dsub>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	a104      	add	r1, pc, #16	; (adr r1, 8007410 <__ieee754_asin+0x3f0>)
 80073fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007402:	e6e6      	b.n	80071d2 <__ieee754_asin+0x1b2>
 8007404:	f3af 8000 	nop.w
 8007408:	33145c07 	.word	0x33145c07
 800740c:	3c91a626 	.word	0x3c91a626
 8007410:	54442d18 	.word	0x54442d18
 8007414:	3fe921fb 	.word	0x3fe921fb

08007418 <__ieee754_atan2>:
 8007418:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741c:	4617      	mov	r7, r2
 800741e:	4692      	mov	sl, r2
 8007420:	4699      	mov	r9, r3
 8007422:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007426:	427b      	negs	r3, r7
 8007428:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80075a8 <__ieee754_atan2+0x190>
 800742c:	433b      	orrs	r3, r7
 800742e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007432:	4543      	cmp	r3, r8
 8007434:	4604      	mov	r4, r0
 8007436:	460d      	mov	r5, r1
 8007438:	d809      	bhi.n	800744e <__ieee754_atan2+0x36>
 800743a:	4246      	negs	r6, r0
 800743c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007440:	4306      	orrs	r6, r0
 8007442:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8007446:	4546      	cmp	r6, r8
 8007448:	468e      	mov	lr, r1
 800744a:	4683      	mov	fp, r0
 800744c:	d908      	bls.n	8007460 <__ieee754_atan2+0x48>
 800744e:	4652      	mov	r2, sl
 8007450:	464b      	mov	r3, r9
 8007452:	4620      	mov	r0, r4
 8007454:	4629      	mov	r1, r5
 8007456:	f7f8 fe81 	bl	800015c <__adddf3>
 800745a:	4604      	mov	r4, r0
 800745c:	460d      	mov	r5, r1
 800745e:	e019      	b.n	8007494 <__ieee754_atan2+0x7c>
 8007460:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8007464:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007468:	433e      	orrs	r6, r7
 800746a:	d103      	bne.n	8007474 <__ieee754_atan2+0x5c>
 800746c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007470:	f000 b8a2 	b.w	80075b8 <atan>
 8007474:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8007478:	f006 0602 	and.w	r6, r6, #2
 800747c:	ea53 0b0b 	orrs.w	fp, r3, fp
 8007480:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8007484:	d10a      	bne.n	800749c <__ieee754_atan2+0x84>
 8007486:	2e02      	cmp	r6, #2
 8007488:	d067      	beq.n	800755a <__ieee754_atan2+0x142>
 800748a:	2e03      	cmp	r6, #3
 800748c:	d102      	bne.n	8007494 <__ieee754_atan2+0x7c>
 800748e:	a53a      	add	r5, pc, #232	; (adr r5, 8007578 <__ieee754_atan2+0x160>)
 8007490:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007494:	4620      	mov	r0, r4
 8007496:	4629      	mov	r1, r5
 8007498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800749c:	4317      	orrs	r7, r2
 800749e:	d106      	bne.n	80074ae <__ieee754_atan2+0x96>
 80074a0:	f1be 0f00 	cmp.w	lr, #0
 80074a4:	da64      	bge.n	8007570 <__ieee754_atan2+0x158>
 80074a6:	a536      	add	r5, pc, #216	; (adr r5, 8007580 <__ieee754_atan2+0x168>)
 80074a8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80074ac:	e7f2      	b.n	8007494 <__ieee754_atan2+0x7c>
 80074ae:	4542      	cmp	r2, r8
 80074b0:	d10f      	bne.n	80074d2 <__ieee754_atan2+0xba>
 80074b2:	4293      	cmp	r3, r2
 80074b4:	f106 36ff 	add.w	r6, r6, #4294967295
 80074b8:	d107      	bne.n	80074ca <__ieee754_atan2+0xb2>
 80074ba:	2e02      	cmp	r6, #2
 80074bc:	d851      	bhi.n	8007562 <__ieee754_atan2+0x14a>
 80074be:	4b3b      	ldr	r3, [pc, #236]	; (80075ac <__ieee754_atan2+0x194>)
 80074c0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80074c4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80074c8:	e7e4      	b.n	8007494 <__ieee754_atan2+0x7c>
 80074ca:	2e02      	cmp	r6, #2
 80074cc:	d84d      	bhi.n	800756a <__ieee754_atan2+0x152>
 80074ce:	4b38      	ldr	r3, [pc, #224]	; (80075b0 <__ieee754_atan2+0x198>)
 80074d0:	e7f6      	b.n	80074c0 <__ieee754_atan2+0xa8>
 80074d2:	4543      	cmp	r3, r8
 80074d4:	d0e4      	beq.n	80074a0 <__ieee754_atan2+0x88>
 80074d6:	1a9b      	subs	r3, r3, r2
 80074d8:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80074dc:	ea4f 5223 	mov.w	r2, r3, asr #20
 80074e0:	da21      	bge.n	8007526 <__ieee754_atan2+0x10e>
 80074e2:	f1b9 0f00 	cmp.w	r9, #0
 80074e6:	da01      	bge.n	80074ec <__ieee754_atan2+0xd4>
 80074e8:	323c      	adds	r2, #60	; 0x3c
 80074ea:	db20      	blt.n	800752e <__ieee754_atan2+0x116>
 80074ec:	4652      	mov	r2, sl
 80074ee:	464b      	mov	r3, r9
 80074f0:	4620      	mov	r0, r4
 80074f2:	4629      	mov	r1, r5
 80074f4:	f7f9 f912 	bl	800071c <__aeabi_ddiv>
 80074f8:	f7ff fd88 	bl	800700c <fabs>
 80074fc:	f000 f85c 	bl	80075b8 <atan>
 8007500:	4604      	mov	r4, r0
 8007502:	460d      	mov	r5, r1
 8007504:	2e01      	cmp	r6, #1
 8007506:	d015      	beq.n	8007534 <__ieee754_atan2+0x11c>
 8007508:	2e02      	cmp	r6, #2
 800750a:	d017      	beq.n	800753c <__ieee754_atan2+0x124>
 800750c:	2e00      	cmp	r6, #0
 800750e:	d0c1      	beq.n	8007494 <__ieee754_atan2+0x7c>
 8007510:	a31d      	add	r3, pc, #116	; (adr r3, 8007588 <__ieee754_atan2+0x170>)
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	4620      	mov	r0, r4
 8007518:	4629      	mov	r1, r5
 800751a:	f7f8 fe1d 	bl	8000158 <__aeabi_dsub>
 800751e:	a31c      	add	r3, pc, #112	; (adr r3, 8007590 <__ieee754_atan2+0x178>)
 8007520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007524:	e016      	b.n	8007554 <__ieee754_atan2+0x13c>
 8007526:	a51c      	add	r5, pc, #112	; (adr r5, 8007598 <__ieee754_atan2+0x180>)
 8007528:	e9d5 4500 	ldrd	r4, r5, [r5]
 800752c:	e7ea      	b.n	8007504 <__ieee754_atan2+0xec>
 800752e:	2400      	movs	r4, #0
 8007530:	2500      	movs	r5, #0
 8007532:	e7e7      	b.n	8007504 <__ieee754_atan2+0xec>
 8007534:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007538:	461d      	mov	r5, r3
 800753a:	e7ab      	b.n	8007494 <__ieee754_atan2+0x7c>
 800753c:	a312      	add	r3, pc, #72	; (adr r3, 8007588 <__ieee754_atan2+0x170>)
 800753e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007542:	4620      	mov	r0, r4
 8007544:	4629      	mov	r1, r5
 8007546:	f7f8 fe07 	bl	8000158 <__aeabi_dsub>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	a110      	add	r1, pc, #64	; (adr r1, 8007590 <__ieee754_atan2+0x178>)
 8007550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007554:	f7f8 fe00 	bl	8000158 <__aeabi_dsub>
 8007558:	e77f      	b.n	800745a <__ieee754_atan2+0x42>
 800755a:	a50d      	add	r5, pc, #52	; (adr r5, 8007590 <__ieee754_atan2+0x178>)
 800755c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007560:	e798      	b.n	8007494 <__ieee754_atan2+0x7c>
 8007562:	a50f      	add	r5, pc, #60	; (adr r5, 80075a0 <__ieee754_atan2+0x188>)
 8007564:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007568:	e794      	b.n	8007494 <__ieee754_atan2+0x7c>
 800756a:	2400      	movs	r4, #0
 800756c:	2500      	movs	r5, #0
 800756e:	e791      	b.n	8007494 <__ieee754_atan2+0x7c>
 8007570:	a509      	add	r5, pc, #36	; (adr r5, 8007598 <__ieee754_atan2+0x180>)
 8007572:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007576:	e78d      	b.n	8007494 <__ieee754_atan2+0x7c>
 8007578:	54442d18 	.word	0x54442d18
 800757c:	c00921fb 	.word	0xc00921fb
 8007580:	54442d18 	.word	0x54442d18
 8007584:	bff921fb 	.word	0xbff921fb
 8007588:	33145c07 	.word	0x33145c07
 800758c:	3ca1a626 	.word	0x3ca1a626
 8007590:	54442d18 	.word	0x54442d18
 8007594:	400921fb 	.word	0x400921fb
 8007598:	54442d18 	.word	0x54442d18
 800759c:	3ff921fb 	.word	0x3ff921fb
 80075a0:	54442d18 	.word	0x54442d18
 80075a4:	3fe921fb 	.word	0x3fe921fb
 80075a8:	7ff00000 	.word	0x7ff00000
 80075ac:	080087e0 	.word	0x080087e0
 80075b0:	080087f8 	.word	0x080087f8
 80075b4:	00000000 	.word	0x00000000

080075b8 <atan>:
 80075b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075bc:	4bb6      	ldr	r3, [pc, #728]	; (8007898 <atan+0x2e0>)
 80075be:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80075c2:	429e      	cmp	r6, r3
 80075c4:	4604      	mov	r4, r0
 80075c6:	460d      	mov	r5, r1
 80075c8:	468b      	mov	fp, r1
 80075ca:	dd17      	ble.n	80075fc <atan+0x44>
 80075cc:	4bb3      	ldr	r3, [pc, #716]	; (800789c <atan+0x2e4>)
 80075ce:	429e      	cmp	r6, r3
 80075d0:	dc01      	bgt.n	80075d6 <atan+0x1e>
 80075d2:	d109      	bne.n	80075e8 <atan+0x30>
 80075d4:	b140      	cbz	r0, 80075e8 <atan+0x30>
 80075d6:	4622      	mov	r2, r4
 80075d8:	462b      	mov	r3, r5
 80075da:	4620      	mov	r0, r4
 80075dc:	4629      	mov	r1, r5
 80075de:	f7f8 fdbd 	bl	800015c <__adddf3>
 80075e2:	4604      	mov	r4, r0
 80075e4:	460d      	mov	r5, r1
 80075e6:	e005      	b.n	80075f4 <atan+0x3c>
 80075e8:	f1bb 0f00 	cmp.w	fp, #0
 80075ec:	4cac      	ldr	r4, [pc, #688]	; (80078a0 <atan+0x2e8>)
 80075ee:	f300 8121 	bgt.w	8007834 <atan+0x27c>
 80075f2:	4dac      	ldr	r5, [pc, #688]	; (80078a4 <atan+0x2ec>)
 80075f4:	4620      	mov	r0, r4
 80075f6:	4629      	mov	r1, r5
 80075f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075fc:	4baa      	ldr	r3, [pc, #680]	; (80078a8 <atan+0x2f0>)
 80075fe:	429e      	cmp	r6, r3
 8007600:	dc11      	bgt.n	8007626 <atan+0x6e>
 8007602:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007606:	429e      	cmp	r6, r3
 8007608:	dc0a      	bgt.n	8007620 <atan+0x68>
 800760a:	a38b      	add	r3, pc, #556	; (adr r3, 8007838 <atan+0x280>)
 800760c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007610:	f7f8 fda4 	bl	800015c <__adddf3>
 8007614:	2200      	movs	r2, #0
 8007616:	4ba5      	ldr	r3, [pc, #660]	; (80078ac <atan+0x2f4>)
 8007618:	f7f9 f9e6 	bl	80009e8 <__aeabi_dcmpgt>
 800761c:	2800      	cmp	r0, #0
 800761e:	d1e9      	bne.n	80075f4 <atan+0x3c>
 8007620:	f04f 3aff 	mov.w	sl, #4294967295
 8007624:	e027      	b.n	8007676 <atan+0xbe>
 8007626:	f7ff fcf1 	bl	800700c <fabs>
 800762a:	4ba1      	ldr	r3, [pc, #644]	; (80078b0 <atan+0x2f8>)
 800762c:	4604      	mov	r4, r0
 800762e:	429e      	cmp	r6, r3
 8007630:	460d      	mov	r5, r1
 8007632:	f300 80b8 	bgt.w	80077a6 <atan+0x1ee>
 8007636:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800763a:	429e      	cmp	r6, r3
 800763c:	f300 809c 	bgt.w	8007778 <atan+0x1c0>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	f7f8 fd8a 	bl	800015c <__adddf3>
 8007648:	2200      	movs	r2, #0
 800764a:	4b98      	ldr	r3, [pc, #608]	; (80078ac <atan+0x2f4>)
 800764c:	f7f8 fd84 	bl	8000158 <__aeabi_dsub>
 8007650:	2200      	movs	r2, #0
 8007652:	4606      	mov	r6, r0
 8007654:	460f      	mov	r7, r1
 8007656:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800765a:	4620      	mov	r0, r4
 800765c:	4629      	mov	r1, r5
 800765e:	f7f8 fd7d 	bl	800015c <__adddf3>
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	4630      	mov	r0, r6
 8007668:	4639      	mov	r1, r7
 800766a:	f7f9 f857 	bl	800071c <__aeabi_ddiv>
 800766e:	f04f 0a00 	mov.w	sl, #0
 8007672:	4604      	mov	r4, r0
 8007674:	460d      	mov	r5, r1
 8007676:	4622      	mov	r2, r4
 8007678:	462b      	mov	r3, r5
 800767a:	4620      	mov	r0, r4
 800767c:	4629      	mov	r1, r5
 800767e:	f7f8 ff23 	bl	80004c8 <__aeabi_dmul>
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	4680      	mov	r8, r0
 8007688:	4689      	mov	r9, r1
 800768a:	f7f8 ff1d 	bl	80004c8 <__aeabi_dmul>
 800768e:	a36c      	add	r3, pc, #432	; (adr r3, 8007840 <atan+0x288>)
 8007690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007694:	4606      	mov	r6, r0
 8007696:	460f      	mov	r7, r1
 8007698:	f7f8 ff16 	bl	80004c8 <__aeabi_dmul>
 800769c:	a36a      	add	r3, pc, #424	; (adr r3, 8007848 <atan+0x290>)
 800769e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a2:	f7f8 fd5b 	bl	800015c <__adddf3>
 80076a6:	4632      	mov	r2, r6
 80076a8:	463b      	mov	r3, r7
 80076aa:	f7f8 ff0d 	bl	80004c8 <__aeabi_dmul>
 80076ae:	a368      	add	r3, pc, #416	; (adr r3, 8007850 <atan+0x298>)
 80076b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b4:	f7f8 fd52 	bl	800015c <__adddf3>
 80076b8:	4632      	mov	r2, r6
 80076ba:	463b      	mov	r3, r7
 80076bc:	f7f8 ff04 	bl	80004c8 <__aeabi_dmul>
 80076c0:	a365      	add	r3, pc, #404	; (adr r3, 8007858 <atan+0x2a0>)
 80076c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c6:	f7f8 fd49 	bl	800015c <__adddf3>
 80076ca:	4632      	mov	r2, r6
 80076cc:	463b      	mov	r3, r7
 80076ce:	f7f8 fefb 	bl	80004c8 <__aeabi_dmul>
 80076d2:	a363      	add	r3, pc, #396	; (adr r3, 8007860 <atan+0x2a8>)
 80076d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d8:	f7f8 fd40 	bl	800015c <__adddf3>
 80076dc:	4632      	mov	r2, r6
 80076de:	463b      	mov	r3, r7
 80076e0:	f7f8 fef2 	bl	80004c8 <__aeabi_dmul>
 80076e4:	a360      	add	r3, pc, #384	; (adr r3, 8007868 <atan+0x2b0>)
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	f7f8 fd37 	bl	800015c <__adddf3>
 80076ee:	4642      	mov	r2, r8
 80076f0:	464b      	mov	r3, r9
 80076f2:	f7f8 fee9 	bl	80004c8 <__aeabi_dmul>
 80076f6:	a35e      	add	r3, pc, #376	; (adr r3, 8007870 <atan+0x2b8>)
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	4680      	mov	r8, r0
 80076fe:	4689      	mov	r9, r1
 8007700:	4630      	mov	r0, r6
 8007702:	4639      	mov	r1, r7
 8007704:	f7f8 fee0 	bl	80004c8 <__aeabi_dmul>
 8007708:	a35b      	add	r3, pc, #364	; (adr r3, 8007878 <atan+0x2c0>)
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	f7f8 fd23 	bl	8000158 <__aeabi_dsub>
 8007712:	4632      	mov	r2, r6
 8007714:	463b      	mov	r3, r7
 8007716:	f7f8 fed7 	bl	80004c8 <__aeabi_dmul>
 800771a:	a359      	add	r3, pc, #356	; (adr r3, 8007880 <atan+0x2c8>)
 800771c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007720:	f7f8 fd1a 	bl	8000158 <__aeabi_dsub>
 8007724:	4632      	mov	r2, r6
 8007726:	463b      	mov	r3, r7
 8007728:	f7f8 fece 	bl	80004c8 <__aeabi_dmul>
 800772c:	a356      	add	r3, pc, #344	; (adr r3, 8007888 <atan+0x2d0>)
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	f7f8 fd11 	bl	8000158 <__aeabi_dsub>
 8007736:	4632      	mov	r2, r6
 8007738:	463b      	mov	r3, r7
 800773a:	f7f8 fec5 	bl	80004c8 <__aeabi_dmul>
 800773e:	a354      	add	r3, pc, #336	; (adr r3, 8007890 <atan+0x2d8>)
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	f7f8 fd08 	bl	8000158 <__aeabi_dsub>
 8007748:	4632      	mov	r2, r6
 800774a:	463b      	mov	r3, r7
 800774c:	f7f8 febc 	bl	80004c8 <__aeabi_dmul>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4640      	mov	r0, r8
 8007756:	4649      	mov	r1, r9
 8007758:	f7f8 fd00 	bl	800015c <__adddf3>
 800775c:	4622      	mov	r2, r4
 800775e:	462b      	mov	r3, r5
 8007760:	f7f8 feb2 	bl	80004c8 <__aeabi_dmul>
 8007764:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007768:	4602      	mov	r2, r0
 800776a:	460b      	mov	r3, r1
 800776c:	d144      	bne.n	80077f8 <atan+0x240>
 800776e:	4620      	mov	r0, r4
 8007770:	4629      	mov	r1, r5
 8007772:	f7f8 fcf1 	bl	8000158 <__aeabi_dsub>
 8007776:	e734      	b.n	80075e2 <atan+0x2a>
 8007778:	2200      	movs	r2, #0
 800777a:	4b4c      	ldr	r3, [pc, #304]	; (80078ac <atan+0x2f4>)
 800777c:	f7f8 fcec 	bl	8000158 <__aeabi_dsub>
 8007780:	2200      	movs	r2, #0
 8007782:	4606      	mov	r6, r0
 8007784:	460f      	mov	r7, r1
 8007786:	4620      	mov	r0, r4
 8007788:	4629      	mov	r1, r5
 800778a:	4b48      	ldr	r3, [pc, #288]	; (80078ac <atan+0x2f4>)
 800778c:	f7f8 fce6 	bl	800015c <__adddf3>
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	4630      	mov	r0, r6
 8007796:	4639      	mov	r1, r7
 8007798:	f7f8 ffc0 	bl	800071c <__aeabi_ddiv>
 800779c:	f04f 0a01 	mov.w	sl, #1
 80077a0:	4604      	mov	r4, r0
 80077a2:	460d      	mov	r5, r1
 80077a4:	e767      	b.n	8007676 <atan+0xbe>
 80077a6:	4b43      	ldr	r3, [pc, #268]	; (80078b4 <atan+0x2fc>)
 80077a8:	429e      	cmp	r6, r3
 80077aa:	da1a      	bge.n	80077e2 <atan+0x22a>
 80077ac:	2200      	movs	r2, #0
 80077ae:	4b42      	ldr	r3, [pc, #264]	; (80078b8 <atan+0x300>)
 80077b0:	f7f8 fcd2 	bl	8000158 <__aeabi_dsub>
 80077b4:	2200      	movs	r2, #0
 80077b6:	4606      	mov	r6, r0
 80077b8:	460f      	mov	r7, r1
 80077ba:	4620      	mov	r0, r4
 80077bc:	4629      	mov	r1, r5
 80077be:	4b3e      	ldr	r3, [pc, #248]	; (80078b8 <atan+0x300>)
 80077c0:	f7f8 fe82 	bl	80004c8 <__aeabi_dmul>
 80077c4:	2200      	movs	r2, #0
 80077c6:	4b39      	ldr	r3, [pc, #228]	; (80078ac <atan+0x2f4>)
 80077c8:	f7f8 fcc8 	bl	800015c <__adddf3>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4630      	mov	r0, r6
 80077d2:	4639      	mov	r1, r7
 80077d4:	f7f8 ffa2 	bl	800071c <__aeabi_ddiv>
 80077d8:	f04f 0a02 	mov.w	sl, #2
 80077dc:	4604      	mov	r4, r0
 80077de:	460d      	mov	r5, r1
 80077e0:	e749      	b.n	8007676 <atan+0xbe>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	2000      	movs	r0, #0
 80077e8:	4934      	ldr	r1, [pc, #208]	; (80078bc <atan+0x304>)
 80077ea:	f7f8 ff97 	bl	800071c <__aeabi_ddiv>
 80077ee:	f04f 0a03 	mov.w	sl, #3
 80077f2:	4604      	mov	r4, r0
 80077f4:	460d      	mov	r5, r1
 80077f6:	e73e      	b.n	8007676 <atan+0xbe>
 80077f8:	4b31      	ldr	r3, [pc, #196]	; (80078c0 <atan+0x308>)
 80077fa:	4e32      	ldr	r6, [pc, #200]	; (80078c4 <atan+0x30c>)
 80077fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007804:	f7f8 fca8 	bl	8000158 <__aeabi_dsub>
 8007808:	4622      	mov	r2, r4
 800780a:	462b      	mov	r3, r5
 800780c:	f7f8 fca4 	bl	8000158 <__aeabi_dsub>
 8007810:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	e9d6 0100 	ldrd	r0, r1, [r6]
 800781c:	f7f8 fc9c 	bl	8000158 <__aeabi_dsub>
 8007820:	f1bb 0f00 	cmp.w	fp, #0
 8007824:	4604      	mov	r4, r0
 8007826:	460d      	mov	r5, r1
 8007828:	f6bf aee4 	bge.w	80075f4 <atan+0x3c>
 800782c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007830:	461d      	mov	r5, r3
 8007832:	e6df      	b.n	80075f4 <atan+0x3c>
 8007834:	4d24      	ldr	r5, [pc, #144]	; (80078c8 <atan+0x310>)
 8007836:	e6dd      	b.n	80075f4 <atan+0x3c>
 8007838:	8800759c 	.word	0x8800759c
 800783c:	7e37e43c 	.word	0x7e37e43c
 8007840:	e322da11 	.word	0xe322da11
 8007844:	3f90ad3a 	.word	0x3f90ad3a
 8007848:	24760deb 	.word	0x24760deb
 800784c:	3fa97b4b 	.word	0x3fa97b4b
 8007850:	a0d03d51 	.word	0xa0d03d51
 8007854:	3fb10d66 	.word	0x3fb10d66
 8007858:	c54c206e 	.word	0xc54c206e
 800785c:	3fb745cd 	.word	0x3fb745cd
 8007860:	920083ff 	.word	0x920083ff
 8007864:	3fc24924 	.word	0x3fc24924
 8007868:	5555550d 	.word	0x5555550d
 800786c:	3fd55555 	.word	0x3fd55555
 8007870:	2c6a6c2f 	.word	0x2c6a6c2f
 8007874:	bfa2b444 	.word	0xbfa2b444
 8007878:	52defd9a 	.word	0x52defd9a
 800787c:	3fadde2d 	.word	0x3fadde2d
 8007880:	af749a6d 	.word	0xaf749a6d
 8007884:	3fb3b0f2 	.word	0x3fb3b0f2
 8007888:	fe231671 	.word	0xfe231671
 800788c:	3fbc71c6 	.word	0x3fbc71c6
 8007890:	9998ebc4 	.word	0x9998ebc4
 8007894:	3fc99999 	.word	0x3fc99999
 8007898:	440fffff 	.word	0x440fffff
 800789c:	7ff00000 	.word	0x7ff00000
 80078a0:	54442d18 	.word	0x54442d18
 80078a4:	bff921fb 	.word	0xbff921fb
 80078a8:	3fdbffff 	.word	0x3fdbffff
 80078ac:	3ff00000 	.word	0x3ff00000
 80078b0:	3ff2ffff 	.word	0x3ff2ffff
 80078b4:	40038000 	.word	0x40038000
 80078b8:	3ff80000 	.word	0x3ff80000
 80078bc:	bff00000 	.word	0xbff00000
 80078c0:	08008830 	.word	0x08008830
 80078c4:	08008810 	.word	0x08008810
 80078c8:	3ff921fb 	.word	0x3ff921fb

080078cc <__ieee754_sqrt>:
 80078cc:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8007a70 <__ieee754_sqrt+0x1a4>
 80078d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d4:	ea3c 0c01 	bics.w	ip, ip, r1
 80078d8:	460b      	mov	r3, r1
 80078da:	4606      	mov	r6, r0
 80078dc:	460d      	mov	r5, r1
 80078de:	460a      	mov	r2, r1
 80078e0:	4604      	mov	r4, r0
 80078e2:	d10e      	bne.n	8007902 <__ieee754_sqrt+0x36>
 80078e4:	4602      	mov	r2, r0
 80078e6:	f7f8 fdef 	bl	80004c8 <__aeabi_dmul>
 80078ea:	4602      	mov	r2, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	4630      	mov	r0, r6
 80078f0:	4629      	mov	r1, r5
 80078f2:	f7f8 fc33 	bl	800015c <__adddf3>
 80078f6:	4606      	mov	r6, r0
 80078f8:	460d      	mov	r5, r1
 80078fa:	4630      	mov	r0, r6
 80078fc:	4629      	mov	r1, r5
 80078fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007902:	2900      	cmp	r1, #0
 8007904:	dc0d      	bgt.n	8007922 <__ieee754_sqrt+0x56>
 8007906:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800790a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800790e:	d0f4      	beq.n	80078fa <__ieee754_sqrt+0x2e>
 8007910:	b139      	cbz	r1, 8007922 <__ieee754_sqrt+0x56>
 8007912:	4602      	mov	r2, r0
 8007914:	f7f8 fc20 	bl	8000158 <__aeabi_dsub>
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	f7f8 fefe 	bl	800071c <__aeabi_ddiv>
 8007920:	e7e9      	b.n	80078f6 <__ieee754_sqrt+0x2a>
 8007922:	1512      	asrs	r2, r2, #20
 8007924:	f000 8089 	beq.w	8007a3a <__ieee754_sqrt+0x16e>
 8007928:	2500      	movs	r5, #0
 800792a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800792e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007936:	07d2      	lsls	r2, r2, #31
 8007938:	bf5c      	itt	pl
 800793a:	005b      	lslpl	r3, r3, #1
 800793c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8007940:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007944:	bf58      	it	pl
 8007946:	0064      	lslpl	r4, r4, #1
 8007948:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800794c:	0062      	lsls	r2, r4, #1
 800794e:	2016      	movs	r0, #22
 8007950:	4629      	mov	r1, r5
 8007952:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8007956:	1076      	asrs	r6, r6, #1
 8007958:	190f      	adds	r7, r1, r4
 800795a:	429f      	cmp	r7, r3
 800795c:	bfde      	ittt	le
 800795e:	1bdb      	suble	r3, r3, r7
 8007960:	1939      	addle	r1, r7, r4
 8007962:	192d      	addle	r5, r5, r4
 8007964:	005b      	lsls	r3, r3, #1
 8007966:	3801      	subs	r0, #1
 8007968:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800796c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007970:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007974:	d1f0      	bne.n	8007958 <__ieee754_sqrt+0x8c>
 8007976:	4604      	mov	r4, r0
 8007978:	2720      	movs	r7, #32
 800797a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800797e:	428b      	cmp	r3, r1
 8007980:	eb0c 0e00 	add.w	lr, ip, r0
 8007984:	dc02      	bgt.n	800798c <__ieee754_sqrt+0xc0>
 8007986:	d113      	bne.n	80079b0 <__ieee754_sqrt+0xe4>
 8007988:	4596      	cmp	lr, r2
 800798a:	d811      	bhi.n	80079b0 <__ieee754_sqrt+0xe4>
 800798c:	f1be 0f00 	cmp.w	lr, #0
 8007990:	eb0e 000c 	add.w	r0, lr, ip
 8007994:	da56      	bge.n	8007a44 <__ieee754_sqrt+0x178>
 8007996:	2800      	cmp	r0, #0
 8007998:	db54      	blt.n	8007a44 <__ieee754_sqrt+0x178>
 800799a:	f101 0801 	add.w	r8, r1, #1
 800799e:	1a5b      	subs	r3, r3, r1
 80079a0:	4641      	mov	r1, r8
 80079a2:	4596      	cmp	lr, r2
 80079a4:	bf88      	it	hi
 80079a6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80079aa:	eba2 020e 	sub.w	r2, r2, lr
 80079ae:	4464      	add	r4, ip
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	3f01      	subs	r7, #1
 80079b4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80079b8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80079bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80079c0:	d1dd      	bne.n	800797e <__ieee754_sqrt+0xb2>
 80079c2:	4313      	orrs	r3, r2
 80079c4:	d01b      	beq.n	80079fe <__ieee754_sqrt+0x132>
 80079c6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007a74 <__ieee754_sqrt+0x1a8>
 80079ca:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007a78 <__ieee754_sqrt+0x1ac>
 80079ce:	e9da 0100 	ldrd	r0, r1, [sl]
 80079d2:	e9db 2300 	ldrd	r2, r3, [fp]
 80079d6:	f7f8 fbbf 	bl	8000158 <__aeabi_dsub>
 80079da:	e9da 8900 	ldrd	r8, r9, [sl]
 80079de:	4602      	mov	r2, r0
 80079e0:	460b      	mov	r3, r1
 80079e2:	4640      	mov	r0, r8
 80079e4:	4649      	mov	r1, r9
 80079e6:	f7f8 ffeb 	bl	80009c0 <__aeabi_dcmple>
 80079ea:	b140      	cbz	r0, 80079fe <__ieee754_sqrt+0x132>
 80079ec:	e9da 0100 	ldrd	r0, r1, [sl]
 80079f0:	e9db 2300 	ldrd	r2, r3, [fp]
 80079f4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80079f8:	d126      	bne.n	8007a48 <__ieee754_sqrt+0x17c>
 80079fa:	463c      	mov	r4, r7
 80079fc:	3501      	adds	r5, #1
 80079fe:	106b      	asrs	r3, r5, #1
 8007a00:	0864      	lsrs	r4, r4, #1
 8007a02:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007a06:	07ea      	lsls	r2, r5, #31
 8007a08:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007a0c:	bf48      	it	mi
 8007a0e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8007a12:	4620      	mov	r0, r4
 8007a14:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8007a18:	e76d      	b.n	80078f6 <__ieee754_sqrt+0x2a>
 8007a1a:	0ae3      	lsrs	r3, r4, #11
 8007a1c:	3915      	subs	r1, #21
 8007a1e:	0564      	lsls	r4, r4, #21
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d0fa      	beq.n	8007a1a <__ieee754_sqrt+0x14e>
 8007a24:	02d8      	lsls	r0, r3, #11
 8007a26:	d50a      	bpl.n	8007a3e <__ieee754_sqrt+0x172>
 8007a28:	f1c2 0020 	rsb	r0, r2, #32
 8007a2c:	fa24 f000 	lsr.w	r0, r4, r0
 8007a30:	1e55      	subs	r5, r2, #1
 8007a32:	4094      	lsls	r4, r2
 8007a34:	4303      	orrs	r3, r0
 8007a36:	1b4a      	subs	r2, r1, r5
 8007a38:	e776      	b.n	8007928 <__ieee754_sqrt+0x5c>
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	e7f0      	b.n	8007a20 <__ieee754_sqrt+0x154>
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	3201      	adds	r2, #1
 8007a42:	e7ef      	b.n	8007a24 <__ieee754_sqrt+0x158>
 8007a44:	4688      	mov	r8, r1
 8007a46:	e7aa      	b.n	800799e <__ieee754_sqrt+0xd2>
 8007a48:	f7f8 fb88 	bl	800015c <__adddf3>
 8007a4c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4640      	mov	r0, r8
 8007a56:	4649      	mov	r1, r9
 8007a58:	f7f8 ffa8 	bl	80009ac <__aeabi_dcmplt>
 8007a5c:	b120      	cbz	r0, 8007a68 <__ieee754_sqrt+0x19c>
 8007a5e:	1ca1      	adds	r1, r4, #2
 8007a60:	bf08      	it	eq
 8007a62:	3501      	addeq	r5, #1
 8007a64:	3402      	adds	r4, #2
 8007a66:	e7ca      	b.n	80079fe <__ieee754_sqrt+0x132>
 8007a68:	3401      	adds	r4, #1
 8007a6a:	f024 0401 	bic.w	r4, r4, #1
 8007a6e:	e7c6      	b.n	80079fe <__ieee754_sqrt+0x132>
 8007a70:	7ff00000 	.word	0x7ff00000
 8007a74:	20000048 	.word	0x20000048
 8007a78:	20000050 	.word	0x20000050

08007a7c <memcmp>:
 8007a7c:	b510      	push	{r4, lr}
 8007a7e:	3901      	subs	r1, #1
 8007a80:	4402      	add	r2, r0
 8007a82:	4290      	cmp	r0, r2
 8007a84:	d101      	bne.n	8007a8a <memcmp+0xe>
 8007a86:	2000      	movs	r0, #0
 8007a88:	e005      	b.n	8007a96 <memcmp+0x1a>
 8007a8a:	7803      	ldrb	r3, [r0, #0]
 8007a8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a90:	42a3      	cmp	r3, r4
 8007a92:	d001      	beq.n	8007a98 <memcmp+0x1c>
 8007a94:	1b18      	subs	r0, r3, r4
 8007a96:	bd10      	pop	{r4, pc}
 8007a98:	3001      	adds	r0, #1
 8007a9a:	e7f2      	b.n	8007a82 <memcmp+0x6>

08007a9c <memset>:
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	4402      	add	r2, r0
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d100      	bne.n	8007aa6 <memset+0xa>
 8007aa4:	4770      	bx	lr
 8007aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8007aaa:	e7f9      	b.n	8007aa0 <memset+0x4>

08007aac <__errno>:
 8007aac:	4b01      	ldr	r3, [pc, #4]	; (8007ab4 <__errno+0x8>)
 8007aae:	6818      	ldr	r0, [r3, #0]
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	200000a4 	.word	0x200000a4

08007ab8 <__libc_init_array>:
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	2600      	movs	r6, #0
 8007abc:	4d0c      	ldr	r5, [pc, #48]	; (8007af0 <__libc_init_array+0x38>)
 8007abe:	4c0d      	ldr	r4, [pc, #52]	; (8007af4 <__libc_init_array+0x3c>)
 8007ac0:	1b64      	subs	r4, r4, r5
 8007ac2:	10a4      	asrs	r4, r4, #2
 8007ac4:	42a6      	cmp	r6, r4
 8007ac6:	d109      	bne.n	8007adc <__libc_init_array+0x24>
 8007ac8:	f000 f81a 	bl	8007b00 <_init>
 8007acc:	2600      	movs	r6, #0
 8007ace:	4d0a      	ldr	r5, [pc, #40]	; (8007af8 <__libc_init_array+0x40>)
 8007ad0:	4c0a      	ldr	r4, [pc, #40]	; (8007afc <__libc_init_array+0x44>)
 8007ad2:	1b64      	subs	r4, r4, r5
 8007ad4:	10a4      	asrs	r4, r4, #2
 8007ad6:	42a6      	cmp	r6, r4
 8007ad8:	d105      	bne.n	8007ae6 <__libc_init_array+0x2e>
 8007ada:	bd70      	pop	{r4, r5, r6, pc}
 8007adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ae0:	4798      	blx	r3
 8007ae2:	3601      	adds	r6, #1
 8007ae4:	e7ee      	b.n	8007ac4 <__libc_init_array+0xc>
 8007ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aea:	4798      	blx	r3
 8007aec:	3601      	adds	r6, #1
 8007aee:	e7f2      	b.n	8007ad6 <__libc_init_array+0x1e>
 8007af0:	08008850 	.word	0x08008850
 8007af4:	08008850 	.word	0x08008850
 8007af8:	08008850 	.word	0x08008850
 8007afc:	08008854 	.word	0x08008854

08007b00 <_init>:
 8007b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b02:	bf00      	nop
 8007b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b06:	bc08      	pop	{r3}
 8007b08:	469e      	mov	lr, r3
 8007b0a:	4770      	bx	lr

08007b0c <_fini>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	bf00      	nop
 8007b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b12:	bc08      	pop	{r3}
 8007b14:	469e      	mov	lr, r3
 8007b16:	4770      	bx	lr
